<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__window">
<title>Window reference</title>
<indexterm><primary>Window reference</primary></indexterm>
<para>

<para>Functions and types related to windows. </para>
 
</para>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_g_l_f_wimage">GLFWimage</link></para>

<para>Image data. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group__window_1ga54ddb14825a1541a56e22afb5f832a9e">GLFW_FOCUSED</link>   0x00020001</para>

<para>Input focus window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga39d44b7c056e55e581355a92d240b58a">GLFW_ICONIFIED</link>   0x00020002</para>

<para>Window iconification window attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d">GLFW_RESIZABLE</link>   0x00020003</para>

<para>Window resize-ability window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4">GLFW_VISIBLE</link>   0x00020004</para>

<para>Window visibility window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga21b854d36314c94d65aed84405b2f25e">GLFW_DECORATED</link>   0x00020005</para>

<para>Window decoration window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga9d9874fc928200136a6dcdad726aa252">GLFW_AUTO_ICONIFY</link>   0x00020006</para>

<para>Window auto-iconification window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga7fb0be51407783b41adbf5bec0b09d80">GLFW_FLOATING</link>   0x00020007</para>

<para>Window decoration window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gad8ccb396253ad0b72c6d4c917eb38a03">GLFW_MAXIMIZED</link>   0x00020008</para>

<para>Window maximization window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga5ac0847c0aa0b3619f2855707b8a7a77">GLFW_CENTER_CURSOR</link>   0x00020009</para>

<para>Cursor centering window hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga60a0578c3b9449027d683a9c6abb9f14">GLFW_TRANSPARENT_FRAMEBUFFER</link>   0x0002000A</para>

<para>Window framebuffer transparency hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga8665c71c6fa3d22425c6a0e8a3f89d8a">GLFW_HOVERED</link>   0x0002000B</para>

<para>Mouse cursor hover window attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gafa94b1da34bfd6488c0d709761504dfc">GLFW_FOCUS_ON_SHOW</link>   0x0002000C</para>

<para>Input focus on calling show window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga88981797d29800808ec242274ab5c03a">GLFW_MOUSE_PASSTHROUGH</link>   0x0002000D</para>

<para>Mouse input transparency window hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gaf78ed8e417dbcc1e354906cc2708c982">GLFW_RED_BITS</link>   0x00021001</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gafba3b72638c914e5fb8a237dd4c50d4d">GLFW_GREEN_BITS</link>   0x00021002</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gab292ea403db6d514537b515311bf9ae3">GLFW_BLUE_BITS</link>   0x00021003</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gafed79a3f468997877da86c449bd43e8c">GLFW_ALPHA_BITS</link>   0x00021004</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga318a55eac1fee57dfe593b6d38149d07">GLFW_DEPTH_BITS</link>   0x00021005</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga5339890a45a1fb38e93cb9fcc5fd069d">GLFW_STENCIL_BITS</link>   0x00021006</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gaead34a9a683b2bc20eecf30ba738bfc6">GLFW_ACCUM_RED_BITS</link>   0x00021007</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga65713cee1326f8e9d806fdf93187b471">GLFW_ACCUM_GREEN_BITS</link>   0x00021008</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga22bbe9104a8ce1f8b88fb4f186aa36ce">GLFW_ACCUM_BLUE_BITS</link>   0x00021009</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gae829b55591c18169a40ab4067a041b1f">GLFW_ACCUM_ALPHA_BITS</link>   0x0002100A</para>

<para>Framebuffer bit depth hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gab05108c5029443b371112b031d1fa174">GLFW_AUX_BUFFERS</link>   0x0002100B</para>

<para>Framebuffer auxiliary buffer hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga83d991efca02537e2d69969135b77b03">GLFW_STEREO</link>   0x0002100C</para>

<para>OpenGL stereoscopic rendering hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga2cdf86fdcb7722fb8829c4e201607535">GLFW_SAMPLES</link>   0x0002100D</para>

<para>Framebuffer MSAA samples hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga444a8f00414a63220591f9fdb7b5642b">GLFW_SRGB_CAPABLE</link>   0x0002100E</para>

<para>Framebuffer sRGB hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga0f20825e6e47ee8ba389024519682212">GLFW_REFRESH_RATE</link>   0x0002100F</para>

<para>Monitor refresh rate hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga714a5d569e8a274ea58fdfa020955339">GLFW_DOUBLEBUFFER</link>   0x00021010</para>

<para>Framebuffer double buffering hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga649309cf72a3d3de5b1348ca7936c95b">GLFW_CLIENT_API</link>   0x00022001</para>

<para>Context client API hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gafe5e4922de1f9932d7e9849bb053b0c0">GLFW_CONTEXT_VERSION_MAJOR</link>   0x00022002</para>

<para>Context client API major version hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga31aca791e4b538c4e4a771eb95cc2d07">GLFW_CONTEXT_VERSION_MINOR</link>   0x00022003</para>

<para>Context client API minor version hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gafb9475071aa77c6fb05ca5a5c8678a08">GLFW_CONTEXT_REVISION</link>   0x00022004</para>

<para>Context client API revision number attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gade3593916b4c507900aa2d6844810e00">GLFW_CONTEXT_ROBUSTNESS</link>   0x00022005</para>

<para>Context robustness hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga13d24b12465da8b28985f46c8557925b">GLFW_OPENGL_FORWARD_COMPAT</link>   0x00022006</para>

<para>OpenGL forward-compatibility hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f">GLFW_CONTEXT_DEBUG</link>   0x00022007</para>

<para>Debug mode context hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga87ec2df0b915201e950ca42d5d0831e1">GLFW_OPENGL_DEBUG_CONTEXT</link>   <link linkend="_group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f">GLFW_CONTEXT_DEBUG</link></para>

<para>Legacy name for compatibility. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga44f3a6b4261fbe351e0b950b0f372e12">GLFW_OPENGL_PROFILE</link>   0x00022008</para>

<para>OpenGL profile hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga72b648a8378fe3310c7c7bbecc0f7be6">GLFW_CONTEXT_RELEASE_BEHAVIOR</link>   0x00022009</para>

<para>Context flush-on-release hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga5a52fdfd46d8249c211f923675728082">GLFW_CONTEXT_NO_ERROR</link>   0x0002200A</para>

<para>Context error suppression hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga5154cebfcd831c1cc63a4d5ac9bb4486">GLFW_CONTEXT_CREATION_API</link>   0x0002200B</para>

<para>Context creation API hint and attribute. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga620bc4280c7eab81ac9f02204500ed47">GLFW_SCALE_TO_MONITOR</link>   0x0002200C</para>

<para>Window content area scaling window <link linkend="_window_guide_1GLFW_SCALE_TO_MONITOR">window hint</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gab6ef2d02eb55800d249ccf1af253c35e">GLFW_COCOA_RETINA_FRAMEBUFFER</link>   0x00023001</para>

<para>macOS specific <link linkend="_window_guide_1GLFW_COCOA_RETINA_FRAMEBUFFER_hint">window hint</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga70fa0fbc745de6aa824df79a580e84b5">GLFW_COCOA_FRAME_NAME</link>   0x00023002</para>

<para>macOS specific <link linkend="_window_guide_1GLFW_COCOA_FRAME_NAME_hint">window hint</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga53c84ed2ddd94e15bbd44b1f6f7feafc">GLFW_COCOA_GRAPHICS_SWITCHING</link>   0x00023003</para>

<para>macOS specific <link linkend="_window_guide_1GLFW_COCOA_GRAPHICS_SWITCHING_hint">window hint</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gae5a9ea2fccccd92edbd343fc56461114">GLFW_X11_CLASS_NAME</link>   0x00024001</para>

<para>X11 specific <link linkend="_window_guide_1GLFW_X11_CLASS_NAME_hint">window hint</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1ga494c3c0d911e4b860b946530a3e389e8">GLFW_X11_INSTANCE_NAME</link>   0x00024002</para>

<para>X11 specific <link linkend="_window_guide_1GLFW_X11_CLASS_NAME_hint">window hint</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__window_1gaf65ea8dafdc0edb07b821b9a336d5043">GLFW_WIN32_KEYBOARD_MENU</link>   0x00025001</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link></para>

<para>Opaque window object. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9">GLFWwindowposfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int xpos, int ypos)</para>

<para>The function pointer type for window position callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1gaec0282944bb810f6f3163ec02da90350">GLFWwindowsizefun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int <link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</para>

<para>The function pointer type for window size callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1gabf859b936d80961b7d39013a9694cc3e">GLFWwindowclosefun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>The function pointer type for window close callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1ga431663a1427d2eb3a273bc398b6737b5">GLFWwindowrefreshfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>The function pointer type for window content refresh callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46">GLFWwindowfocusfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int focused)</para>

<para>The function pointer type for window focus callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f">GLFWwindowiconifyfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int iconified)</para>

<para>The function pointer type for window iconify callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1ga3017196fdaec33ac3e095765176c2a90">GLFWwindowmaximizefun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int maximized)</para>

<para>The function pointer type for window maximize callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1gae18026e294dde685ed2e5f759533144d">GLFWframebuffersizefun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int <link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</para>

<para>The function pointer type for framebuffer size callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e">GLFWwindowcontentscalefun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, float xscale, float yscale)</para>

<para>The function pointer type for window content scale callbacks. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_g_l_f_wimage">GLFWimage</link> <link linkend="_group__window_1ga7cc0a09de172fa7250872046f8c4d2ca">GLFWimage</link></para>

<para>Image data. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4">glfwDefaultWindowHints</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Resets all window hints to their default values. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga69c40728499720bef8a49aa925ea0efa">glfwWindowHint</link> (int hint, int <link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)</para>

<para>Sets the specified window hint to the desired value. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga3c2270562d7ba13d92680ba1090adafe">glfwWindowHintString</link> (int hint, const char *<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)</para>

<para>Sets the specified window hint to the desired value. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * <link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link> (int <link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int <link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>, const char *title, <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *share)</para>

<para>Creates a window and its associated context. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga806747476b7247d292be3711c323ea10">glfwDestroyWindow</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Destroys the specified window and its context. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__window_1gaa6162f67dfa38b8beda2fea623649332">glfwWindowShouldClose</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Checks the close flag of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga1cadeda7a1e2f224e06a8415d30741aa">glfwSetWindowShouldClose</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)</para>

<para>Sets the close flag of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga861ed3414ab8120e2f74151a666ed1dc">glfwSetWindowTitle</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, const char *title)</para>

<para>Sets the title of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga182987a1a62a41a924842b9473d560df">glfwSetWindowIcon</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>, const <link linkend="_struct_g_l_f_wimage">GLFWimage</link> *images)</para>

<para>Sets the icon for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga0076a8591ef7494d359730cf2250b45b">glfwGetWindowPos</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int *xpos, int *ypos)</para>

<para>Retrieves the position of the content area of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0">glfwSetWindowPos</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int xpos, int ypos)</para>

<para>Sets the position of the content area of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e">glfwGetWindowSize</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int *<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int *<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</para>

<para>Retrieves the size of the content area of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga8af814fc98d786d1de2505b40b707de8">glfwSetWindowSizeLimits</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int minwidth, int minheight, int maxwidth, int maxheight)</para>

<para>Sets the size limits of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac">glfwSetWindowAspectRatio</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int numer, int denom)</para>

<para>Sets the aspect ratio of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gae54d1f4915ded15e267ddd3f41496cd2">glfwSetWindowSize</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int <link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</para>

<para>Sets the size of the content area of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e">glfwGetFramebufferSize</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int *<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int *<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</para>

<para>Retrieves the size of the framebuffer of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gaad46cdaae2eb732f68d3a1499a7c5409">glfwGetWindowFrameSize</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int *<link linkend="_glad_8h_1a85b8f6c07fbc1fb5d77c2ae090f21995">left</link>, int *<link linkend="_glext_8h_1a5ab323daeacf8dfdb8f91132fecdca23">top</link>, int *<link linkend="_glext_8h_1a5ffadbbacc6b89cf6218bc43b384d3fe">right</link>, int *<link linkend="_glad_8h_1a95fc257e5ddf46f7db9d5e898cdf1991">bottom</link>)</para>

<para>Retrieves the size of the frame of the window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee">glfwGetWindowContentScale</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, float *xscale, float *yscale)</para>

<para>Retrieves the content scale for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> float <link linkend="_group__window_1gad124d57a1c1c519f60c9765cd0c2a89c">glfwGetWindowOpacity</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Returns the opacity of the whole window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga62a784fe328f227727cbcd0d07480ff3">glfwSetWindowOpacity</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, float opacity)</para>

<para>Sets the opacity of the whole window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3">glfwIconifyWindow</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Iconifies the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga1e29caf0b819f578b04db52fff17256c">glfwRestoreWindow</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Restores the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga4f825a55367d3fabde3d06e7f30128e8">glfwMaximizeWindow</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Maximizes the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga7945bcdff9e5e058cf36505d6873ed8c">glfwShowWindow</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Makes the specified window visible. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gaa17e287d521544bdeceafa09ac036e20">glfwHideWindow</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Hides the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga0da0e3daaa2d100f44a115c09077b510">glfwFocusWindow</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Brings the specified window to front and sets input focus. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gad0c9629abb49447bedd28080642b8538">glfwRequestWindowAttention</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Requests user attention to the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * <link linkend="_group__window_1gaf1525cb3bccd5789c702cc9676ef3403">glfwGetWindowMonitor</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Returns the monitor that the window uses for full screen mode. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga12fabf78575e59c00f822f323ae0b6ae">glfwSetWindowMonitor</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, int xpos, int ypos, int <link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int <link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>, int refreshRate)</para>

<para>Sets the mode, monitor, video mode and placement of a window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__window_1ga1bb0c7e100418e284dbb800789c63d40">glfwGetWindowAttrib</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int attrib)</para>

<para>Returns an attribute of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gad39f43f07856efcf3d656426a9284c75">glfwSetWindowAttrib</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int attrib, int <link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)</para>

<para>Sets an attribute of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gacc9e68faee3c1763b54cd9bc405cf43e">glfwSetWindowUserPointer</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *<link linkend="_glad_8h_1a8e06a460fd89ba3a95ce49119ef7aab2">pointer</link>)</para>

<para>Sets the user pointer of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * <link linkend="_group__window_1ga0a9ff3b4bf8589e9518e8816d06a8f50">glfwGetWindowUserPointer</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Returns the user pointer of the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9">GLFWwindowposfun</link> <link linkend="_group__window_1ga517b6e80b982efa06e9b8ca89d4a75a6">glfwSetWindowPosCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9">GLFWwindowposfun</link> callback)</para>

<para>Sets the position callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gaec0282944bb810f6f3163ec02da90350">GLFWwindowsizefun</link> <link linkend="_group__window_1gab0754f8d5c7c4d5cae2a9937a0e00bc5">glfwSetWindowSizeCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1gaec0282944bb810f6f3163ec02da90350">GLFWwindowsizefun</link> callback)</para>

<para>Sets the size callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gabf859b936d80961b7d39013a9694cc3e">GLFWwindowclosefun</link> <link linkend="_group__window_1ga693d778815971a06e1a5a7bcdeff3d36">glfwSetWindowCloseCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1gabf859b936d80961b7d39013a9694cc3e">GLFWwindowclosefun</link> callback)</para>

<para>Sets the close callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga431663a1427d2eb3a273bc398b6737b5">GLFWwindowrefreshfun</link> <link linkend="_group__window_1ga62bfa902c07a03b8ad9be37da31a4be7">glfwSetWindowRefreshCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1ga431663a1427d2eb3a273bc398b6737b5">GLFWwindowrefreshfun</link> callback)</para>

<para>Sets the refresh callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46">GLFWwindowfocusfun</link> <link linkend="_group__window_1gacce1c4dd273b5c4c60b05599f8725b4e">glfwSetWindowFocusCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46">GLFWwindowfocusfun</link> callback)</para>

<para>Sets the focus callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f">GLFWwindowiconifyfun</link> <link linkend="_group__window_1ga3e9f355edb6b9247149ddea2335eda69">glfwSetWindowIconifyCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f">GLFWwindowiconifyfun</link> callback)</para>

<para>Sets the iconify callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga3017196fdaec33ac3e095765176c2a90">GLFWwindowmaximizefun</link> <link linkend="_group__window_1gae77b3960dcd40514fb7b2b8a6eb98137">glfwSetWindowMaximizeCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1ga3017196fdaec33ac3e095765176c2a90">GLFWwindowmaximizefun</link> callback)</para>

<para>Sets the maximize callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gae18026e294dde685ed2e5f759533144d">GLFWframebuffersizefun</link> <link linkend="_group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0">glfwSetFramebufferSizeCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1gae18026e294dde685ed2e5f759533144d">GLFWframebuffersizefun</link> callback)</para>

<para>Sets the framebuffer resize callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e">GLFWwindowcontentscalefun</link> <link linkend="_group__window_1gac6edcddbe785445d0d2b7b7be500836e">glfwSetWindowContentScaleCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e">GLFWwindowcontentscalefun</link> callback)</para>

<para>Sets the window content scale callback for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga872d16e4c77f58c0436f356255920cfc">glfwPollEvents</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Processes all pending events. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Waits until events are queued and processes them. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1ga05223a0a4c5e50f10f289e60398153aa">glfwWaitEventsTimeout</link> (double <link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>)</para>

<para>Waits with timeout until events are queued and processes them. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gad6f6b997278c91c43b35970eb9713d7e">glfwPostEmptyEvent</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Posts an empty event to the event queue. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Swaps the front and back buffers of the specified window. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Functions and types related to windows. </para>

<para>This is the reference documentation for window related functions and types, including creation, deletion and event polling. For more task-oriented information, see the <link linkend="_window_guide">Window guide</link>. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group__window_1gae829b55591c18169a40ab4067a041b1f"/>    <section>
    <title>GLFW_ACCUM_ALPHA_BITS</title>
<indexterm><primary>GLFW_ACCUM_ALPHA_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_ACCUM_ALPHA_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_ACCUM_ALPHA_BITS   0x0002100A</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_ACCUM_ALPHA_BITS">hint</link>. </para>
<para>
Definition at line 980 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga22bbe9104a8ce1f8b88fb4f186aa36ce"/>    <section>
    <title>GLFW_ACCUM_BLUE_BITS</title>
<indexterm><primary>GLFW_ACCUM_BLUE_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_ACCUM_BLUE_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_ACCUM_BLUE_BITS   0x00021009</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_ACCUM_BLUE_BITS">hint</link>. </para>
<para>
Definition at line 975 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga65713cee1326f8e9d806fdf93187b471"/>    <section>
    <title>GLFW_ACCUM_GREEN_BITS</title>
<indexterm><primary>GLFW_ACCUM_GREEN_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_ACCUM_GREEN_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_ACCUM_GREEN_BITS   0x00021008</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_ACCUM_GREEN_BITS">hint</link>. </para>
<para>
Definition at line 970 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gaead34a9a683b2bc20eecf30ba738bfc6"/>    <section>
    <title>GLFW_ACCUM_RED_BITS</title>
<indexterm><primary>GLFW_ACCUM_RED_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_ACCUM_RED_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_ACCUM_RED_BITS   0x00021007</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_ACCUM_RED_BITS">hint</link>. </para>
<para>
Definition at line 965 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gafed79a3f468997877da86c449bd43e8c"/>    <section>
    <title>GLFW_ALPHA_BITS</title>
<indexterm><primary>GLFW_ALPHA_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_ALPHA_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_ALPHA_BITS   0x00021004</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_ALPHA_BITS">hint</link>. </para>
<para>
Definition at line 950 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga9d9874fc928200136a6dcdad726aa252"/>    <section>
    <title>GLFW_AUTO_ICONIFY</title>
<indexterm><primary>GLFW_AUTO_ICONIFY</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_AUTO_ICONIFY</secondary></indexterm>
<para><computeroutput>#define GLFW_AUTO_ICONIFY   0x00020006</computeroutput></para><para>

<para>Window auto-iconification window hint and attribute. </para>
</para>

<para>Window auto-iconification <link linkend="_window_guide_1GLFW_AUTO_ICONIFY_hint">window hint</link> and <link linkend="_window_guide_1GLFW_AUTO_ICONIFY_attrib">window attribute</link>. </para>
<para>
Definition at line 887 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gab05108c5029443b371112b031d1fa174"/>    <section>
    <title>GLFW_AUX_BUFFERS</title>
<indexterm><primary>GLFW_AUX_BUFFERS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_AUX_BUFFERS</secondary></indexterm>
<para><computeroutput>#define GLFW_AUX_BUFFERS   0x0002100B</computeroutput></para><para>

<para>Framebuffer auxiliary buffer hint. </para>
</para>

<para>Framebuffer auxiliary buffer <link linkend="_window_guide_1GLFW_AUX_BUFFERS">hint</link>. </para>
<para>
Definition at line 985 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gab292ea403db6d514537b515311bf9ae3"/>    <section>
    <title>GLFW_BLUE_BITS</title>
<indexterm><primary>GLFW_BLUE_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_BLUE_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_BLUE_BITS   0x00021003</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_BLUE_BITS">hint</link>. </para>
<para>
Definition at line 945 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga5ac0847c0aa0b3619f2855707b8a7a77"/>    <section>
    <title>GLFW_CENTER_CURSOR</title>
<indexterm><primary>GLFW_CENTER_CURSOR</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CENTER_CURSOR</secondary></indexterm>
<para><computeroutput>#define GLFW_CENTER_CURSOR   0x00020009</computeroutput></para><para>

<para>Cursor centering window hint. </para>
</para>

<para>Cursor centering <link linkend="_window_guide_1GLFW_CENTER_CURSOR_hint">window hint</link>. </para>
<para>
Definition at line 904 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga649309cf72a3d3de5b1348ca7936c95b"/>    <section>
    <title>GLFW_CLIENT_API</title>
<indexterm><primary>GLFW_CLIENT_API</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CLIENT_API</secondary></indexterm>
<para><computeroutput>#define GLFW_CLIENT_API   0x00022001</computeroutput></para><para>

<para>Context client API hint and attribute. </para>
</para>

<para>Context client API <link linkend="_window_guide_1GLFW_CLIENT_API_hint">hint</link> and <link linkend="_window_guide_1GLFW_CLIENT_API_attrib">attribute</link>. </para>
<para>
Definition at line 1018 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga70fa0fbc745de6aa824df79a580e84b5"/>    <section>
    <title>GLFW_COCOA_FRAME_NAME</title>
<indexterm><primary>GLFW_COCOA_FRAME_NAME</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_COCOA_FRAME_NAME</secondary></indexterm>
<para><computeroutput>#define GLFW_COCOA_FRAME_NAME   0x00023002</computeroutput></para><para>

<para>macOS specific <link linkend="_window_guide_1GLFW_COCOA_FRAME_NAME_hint">window hint</link>. </para>
</para>
<para>
Definition at line 1095 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga53c84ed2ddd94e15bbd44b1f6f7feafc"/>    <section>
    <title>GLFW_COCOA_GRAPHICS_SWITCHING</title>
<indexterm><primary>GLFW_COCOA_GRAPHICS_SWITCHING</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_COCOA_GRAPHICS_SWITCHING</secondary></indexterm>
<para><computeroutput>#define GLFW_COCOA_GRAPHICS_SWITCHING   0x00023003</computeroutput></para><para>

<para>macOS specific <link linkend="_window_guide_1GLFW_COCOA_GRAPHICS_SWITCHING_hint">window hint</link>. </para>
</para>
<para>
Definition at line 1099 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gab6ef2d02eb55800d249ccf1af253c35e"/>    <section>
    <title>GLFW_COCOA_RETINA_FRAMEBUFFER</title>
<indexterm><primary>GLFW_COCOA_RETINA_FRAMEBUFFER</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_COCOA_RETINA_FRAMEBUFFER</secondary></indexterm>
<para><computeroutput>#define GLFW_COCOA_RETINA_FRAMEBUFFER   0x00023001</computeroutput></para><para>

<para>macOS specific <link linkend="_window_guide_1GLFW_COCOA_RETINA_FRAMEBUFFER_hint">window hint</link>. </para>
</para>
<para>
Definition at line 1091 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga5154cebfcd831c1cc63a4d5ac9bb4486"/>    <section>
    <title>GLFW_CONTEXT_CREATION_API</title>
<indexterm><primary>GLFW_CONTEXT_CREATION_API</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_CREATION_API</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_CREATION_API   0x0002200B</computeroutput></para><para>

<para>Context creation API hint and attribute. </para>
</para>

<para>Context creation API <link linkend="_window_guide_1GLFW_CONTEXT_CREATION_API_hint">hint</link> and <link linkend="_window_guide_1GLFW_CONTEXT_CREATION_API_attrib">attribute</link>. </para>
<para>
Definition at line 1083 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f"/>    <section>
    <title>GLFW_CONTEXT_DEBUG</title>
<indexterm><primary>GLFW_CONTEXT_DEBUG</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_DEBUG</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_DEBUG   0x00022007</computeroutput></para><para>

<para>Debug mode context hint and attribute. </para>
</para>

<para>Debug mode context <link linkend="_window_guide_1GLFW_CONTEXT_DEBUG_hint">hint</link> and <link linkend="_window_guide_1GLFW_CONTEXT_DEBUG_attrib">attribute</link>. </para>
<para>
Definition at line 1054 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga5a52fdfd46d8249c211f923675728082"/>    <section>
    <title>GLFW_CONTEXT_NO_ERROR</title>
<indexterm><primary>GLFW_CONTEXT_NO_ERROR</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_NO_ERROR</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_NO_ERROR   0x0002200A</computeroutput></para><para>

<para>Context error suppression hint and attribute. </para>
</para>

<para>Context error suppression <link linkend="_window_guide_1GLFW_CONTEXT_NO_ERROR_hint">hint</link> and <link linkend="_window_guide_1GLFW_CONTEXT_NO_ERROR_attrib">attribute</link>. </para>
<para>
Definition at line 1077 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga72b648a8378fe3310c7c7bbecc0f7be6"/>    <section>
    <title>GLFW_CONTEXT_RELEASE_BEHAVIOR</title>
<indexterm><primary>GLFW_CONTEXT_RELEASE_BEHAVIOR</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_RELEASE_BEHAVIOR</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_RELEASE_BEHAVIOR   0x00022009</computeroutput></para><para>

<para>Context flush-on-release hint and attribute. </para>
</para>

<para>Context flush-on-release <link linkend="_window_guide_1GLFW_CONTEXT_RELEASE_BEHAVIOR_hint">hint</link> and <link linkend="_window_guide_1GLFW_CONTEXT_RELEASE_BEHAVIOR_attrib">attribute</link>. </para>
<para>
Definition at line 1071 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gafb9475071aa77c6fb05ca5a5c8678a08"/>    <section>
    <title>GLFW_CONTEXT_REVISION</title>
<indexterm><primary>GLFW_CONTEXT_REVISION</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_REVISION</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_REVISION   0x00022004</computeroutput></para><para>

<para>Context client API revision number attribute. </para>
</para>

<para>Context client API revision number <link linkend="_window_guide_1GLFW_CONTEXT_REVISION_attrib">attribute</link>. </para>
<para>
Definition at line 1036 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gade3593916b4c507900aa2d6844810e00"/>    <section>
    <title>GLFW_CONTEXT_ROBUSTNESS</title>
<indexterm><primary>GLFW_CONTEXT_ROBUSTNESS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_ROBUSTNESS</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_ROBUSTNESS   0x00022005</computeroutput></para><para>

<para>Context robustness hint and attribute. </para>
</para>

<para>Context client API revision number <link linkend="_window_guide_1GLFW_CONTEXT_ROBUSTNESS_hint">hint</link> and <link linkend="_window_guide_1GLFW_CONTEXT_ROBUSTNESS_attrib">attribute</link>. </para>
<para>
Definition at line 1042 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gafe5e4922de1f9932d7e9849bb053b0c0"/>    <section>
    <title>GLFW_CONTEXT_VERSION_MAJOR</title>
<indexterm><primary>GLFW_CONTEXT_VERSION_MAJOR</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_VERSION_MAJOR</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_VERSION_MAJOR   0x00022002</computeroutput></para><para>

<para>Context client API major version hint and attribute. </para>
</para>

<para>Context client API major version <link linkend="_window_guide_1GLFW_CONTEXT_VERSION_MAJOR_hint">hint</link> and <link linkend="_window_guide_1GLFW_CONTEXT_VERSION_MAJOR_attrib">attribute</link>. </para>
<para>
Definition at line 1024 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga31aca791e4b538c4e4a771eb95cc2d07"/>    <section>
    <title>GLFW_CONTEXT_VERSION_MINOR</title>
<indexterm><primary>GLFW_CONTEXT_VERSION_MINOR</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_CONTEXT_VERSION_MINOR</secondary></indexterm>
<para><computeroutput>#define GLFW_CONTEXT_VERSION_MINOR   0x00022003</computeroutput></para><para>

<para>Context client API minor version hint and attribute. </para>
</para>

<para>Context client API minor version <link linkend="_window_guide_1GLFW_CONTEXT_VERSION_MINOR_hint">hint</link> and <link linkend="_window_guide_1GLFW_CONTEXT_VERSION_MINOR_attrib">attribute</link>. </para>
<para>
Definition at line 1030 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga21b854d36314c94d65aed84405b2f25e"/>    <section>
    <title>GLFW_DECORATED</title>
<indexterm><primary>GLFW_DECORATED</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_DECORATED</secondary></indexterm>
<para><computeroutput>#define GLFW_DECORATED   0x00020005</computeroutput></para><para>

<para>Window decoration window hint and attribute. </para>
</para>

<para>Window decoration <link linkend="_window_guide_1GLFW_DECORATED_hint">window hint</link> and <link linkend="_window_guide_1GLFW_DECORATED_attrib">window attribute</link>. </para>
<para>
Definition at line 881 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga318a55eac1fee57dfe593b6d38149d07"/>    <section>
    <title>GLFW_DEPTH_BITS</title>
<indexterm><primary>GLFW_DEPTH_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_DEPTH_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_DEPTH_BITS   0x00021005</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_DEPTH_BITS">hint</link>. </para>
<para>
Definition at line 955 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga714a5d569e8a274ea58fdfa020955339"/>    <section>
    <title>GLFW_DOUBLEBUFFER</title>
<indexterm><primary>GLFW_DOUBLEBUFFER</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_DOUBLEBUFFER</secondary></indexterm>
<para><computeroutput>#define GLFW_DOUBLEBUFFER   0x00021010</computeroutput></para><para>

<para>Framebuffer double buffering hint and attribute. </para>
</para>

<para>Framebuffer double buffering <link linkend="_window_guide_1GLFW_DOUBLEBUFFER_hint">hint</link> and <link linkend="_window_guide_1GLFW_DOUBLEBUFFER_attrib">attribute</link>. </para>
<para>
Definition at line 1011 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga7fb0be51407783b41adbf5bec0b09d80"/>    <section>
    <title>GLFW_FLOATING</title>
<indexterm><primary>GLFW_FLOATING</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_FLOATING</secondary></indexterm>
<para><computeroutput>#define GLFW_FLOATING   0x00020007</computeroutput></para><para>

<para>Window decoration window hint and attribute. </para>
</para>

<para>Window decoration <link linkend="_window_guide_1GLFW_FLOATING_hint">window hint</link> and <link linkend="_window_guide_1GLFW_FLOATING_attrib">window attribute</link>. </para>
<para>
Definition at line 893 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gafa94b1da34bfd6488c0d709761504dfc"/>    <section>
    <title>GLFW_FOCUS_ON_SHOW</title>
<indexterm><primary>GLFW_FOCUS_ON_SHOW</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_FOCUS_ON_SHOW</secondary></indexterm>
<para><computeroutput>#define GLFW_FOCUS_ON_SHOW   0x0002000C</computeroutput></para><para>

<para>Input focus on calling show window hint and attribute. </para>
</para>

<para>Input focus <link linkend="_window_guide_1GLFW_FOCUS_ON_SHOW_hint">window hint</link> or <link linkend="_window_guide_1GLFW_FOCUS_ON_SHOW_attrib">window attribute</link>. </para>
<para>
Definition at line 922 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga54ddb14825a1541a56e22afb5f832a9e"/>    <section>
    <title>GLFW_FOCUSED</title>
<indexterm><primary>GLFW_FOCUSED</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_FOCUSED</secondary></indexterm>
<para><computeroutput>#define GLFW_FOCUSED   0x00020001</computeroutput></para><para>

<para>Input focus window hint and attribute. </para>
</para>

<para>Input focus <link linkend="_window_guide_1GLFW_FOCUSED_hint">window hint</link> or <link linkend="_window_guide_1GLFW_FOCUSED_attrib">window attribute</link>. </para>
<para>
Definition at line 858 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gafba3b72638c914e5fb8a237dd4c50d4d"/>    <section>
    <title>GLFW_GREEN_BITS</title>
<indexterm><primary>GLFW_GREEN_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_GREEN_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_GREEN_BITS   0x00021002</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_GREEN_BITS">hint</link>. </para>
<para>
Definition at line 940 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga8665c71c6fa3d22425c6a0e8a3f89d8a"/>    <section>
    <title>GLFW_HOVERED</title>
<indexterm><primary>GLFW_HOVERED</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_HOVERED</secondary></indexterm>
<para><computeroutput>#define GLFW_HOVERED   0x0002000B</computeroutput></para><para>

<para>Mouse cursor hover window attribute. </para>
</para>

<para>Mouse cursor hover <link linkend="_window_guide_1GLFW_HOVERED_attrib">window attribute</link>. </para>
<para>
Definition at line 916 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga39d44b7c056e55e581355a92d240b58a"/>    <section>
    <title>GLFW_ICONIFIED</title>
<indexterm><primary>GLFW_ICONIFIED</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_ICONIFIED</secondary></indexterm>
<para><computeroutput>#define GLFW_ICONIFIED   0x00020002</computeroutput></para><para>

<para>Window iconification window attribute. </para>
</para>

<para>Window iconification <link linkend="_window_guide_1GLFW_ICONIFIED_attrib">window attribute</link>. </para>
<para>
Definition at line 863 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gad8ccb396253ad0b72c6d4c917eb38a03"/>    <section>
    <title>GLFW_MAXIMIZED</title>
<indexterm><primary>GLFW_MAXIMIZED</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_MAXIMIZED</secondary></indexterm>
<para><computeroutput>#define GLFW_MAXIMIZED   0x00020008</computeroutput></para><para>

<para>Window maximization window hint and attribute. </para>
</para>

<para>Window maximization <link linkend="_window_guide_1GLFW_MAXIMIZED_hint">window hint</link> and <link linkend="_window_guide_1GLFW_MAXIMIZED_attrib">window attribute</link>. </para>
<para>
Definition at line 899 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga88981797d29800808ec242274ab5c03a"/>    <section>
    <title>GLFW_MOUSE_PASSTHROUGH</title>
<indexterm><primary>GLFW_MOUSE_PASSTHROUGH</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_MOUSE_PASSTHROUGH</secondary></indexterm>
<para><computeroutput>#define GLFW_MOUSE_PASSTHROUGH   0x0002000D</computeroutput></para><para>

<para>Mouse input transparency window hint and attribute. </para>
</para>

<para>Mouse input transparency <link linkend="_window_guide_1GLFW_MOUSE_PASSTHROUGH_hint">window hint</link> or <link linkend="_window_guide_1GLFW_MOUSE_PASSTHROUGH_attrib">window attribute</link>. </para>
<para>
Definition at line 929 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga87ec2df0b915201e950ca42d5d0831e1"/>    <section>
    <title>GLFW_OPENGL_DEBUG_CONTEXT</title>
<indexterm><primary>GLFW_OPENGL_DEBUG_CONTEXT</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_OPENGL_DEBUG_CONTEXT</secondary></indexterm>
<para><computeroutput>#define GLFW_OPENGL_DEBUG_CONTEXT   <link linkend="_group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f">GLFW_CONTEXT_DEBUG</link></computeroutput></para><para>

<para>Legacy name for compatibility. </para>
</para>

<para>This is an alias for compatibility with earlier versions. </para>
<para>
Definition at line 1059 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga13d24b12465da8b28985f46c8557925b"/>    <section>
    <title>GLFW_OPENGL_FORWARD_COMPAT</title>
<indexterm><primary>GLFW_OPENGL_FORWARD_COMPAT</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_OPENGL_FORWARD_COMPAT</secondary></indexterm>
<para><computeroutput>#define GLFW_OPENGL_FORWARD_COMPAT   0x00022006</computeroutput></para><para>

<para>OpenGL forward-compatibility hint and attribute. </para>
</para>

<para>OpenGL forward-compatibility <link linkend="_window_guide_1GLFW_OPENGL_FORWARD_COMPAT_hint">hint</link> and <link linkend="_window_guide_1GLFW_OPENGL_FORWARD_COMPAT_attrib">attribute</link>. </para>
<para>
Definition at line 1048 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga44f3a6b4261fbe351e0b950b0f372e12"/>    <section>
    <title>GLFW_OPENGL_PROFILE</title>
<indexterm><primary>GLFW_OPENGL_PROFILE</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_OPENGL_PROFILE</secondary></indexterm>
<para><computeroutput>#define GLFW_OPENGL_PROFILE   0x00022008</computeroutput></para><para>

<para>OpenGL profile hint and attribute. </para>
</para>

<para>OpenGL profile <link linkend="_window_guide_1GLFW_OPENGL_PROFILE_hint">hint</link> and <link linkend="_window_guide_1GLFW_OPENGL_PROFILE_attrib">attribute</link>. </para>
<para>
Definition at line 1065 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gaf78ed8e417dbcc1e354906cc2708c982"/>    <section>
    <title>GLFW_RED_BITS</title>
<indexterm><primary>GLFW_RED_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_RED_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_RED_BITS   0x00021001</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_RED_BITS">hint</link>. </para>
<para>
Definition at line 935 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga0f20825e6e47ee8ba389024519682212"/>    <section>
    <title>GLFW_REFRESH_RATE</title>
<indexterm><primary>GLFW_REFRESH_RATE</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_REFRESH_RATE</secondary></indexterm>
<para><computeroutput>#define GLFW_REFRESH_RATE   0x0002100F</computeroutput></para><para>

<para>Monitor refresh rate hint. </para>
</para>

<para>Monitor refresh rate <link linkend="_window_guide_1GLFW_REFRESH_RATE">hint</link>. </para>
<para>
Definition at line 1005 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d"/>    <section>
    <title>GLFW_RESIZABLE</title>
<indexterm><primary>GLFW_RESIZABLE</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_RESIZABLE</secondary></indexterm>
<para><computeroutput>#define GLFW_RESIZABLE   0x00020003</computeroutput></para><para>

<para>Window resize-ability window hint and attribute. </para>
</para>

<para>Window resize-ability <link linkend="_window_guide_1GLFW_RESIZABLE_hint">window hint</link> and <link linkend="_window_guide_1GLFW_RESIZABLE_attrib">window attribute</link>. </para>
<para>
Definition at line 869 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga2cdf86fdcb7722fb8829c4e201607535"/>    <section>
    <title>GLFW_SAMPLES</title>
<indexterm><primary>GLFW_SAMPLES</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_SAMPLES</secondary></indexterm>
<para><computeroutput>#define GLFW_SAMPLES   0x0002100D</computeroutput></para><para>

<para>Framebuffer MSAA samples hint. </para>
</para>

<para>Framebuffer MSAA samples <link linkend="_window_guide_1GLFW_SAMPLES">hint</link>. </para>
<para>
Definition at line 995 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga620bc4280c7eab81ac9f02204500ed47"/>    <section>
    <title>GLFW_SCALE_TO_MONITOR</title>
<indexterm><primary>GLFW_SCALE_TO_MONITOR</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_SCALE_TO_MONITOR</secondary></indexterm>
<para><computeroutput>#define GLFW_SCALE_TO_MONITOR   0x0002200C</computeroutput></para><para>

<para>Window content area scaling window <link linkend="_window_guide_1GLFW_SCALE_TO_MONITOR">window hint</link>. </para>
</para>
<para>
Definition at line 1087 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga444a8f00414a63220591f9fdb7b5642b"/>    <section>
    <title>GLFW_SRGB_CAPABLE</title>
<indexterm><primary>GLFW_SRGB_CAPABLE</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_SRGB_CAPABLE</secondary></indexterm>
<para><computeroutput>#define GLFW_SRGB_CAPABLE   0x0002100E</computeroutput></para><para>

<para>Framebuffer sRGB hint. </para>
</para>

<para>Framebuffer sRGB <link linkend="_window_guide_1GLFW_SRGB_CAPABLE">hint</link>. </para>
<para>
Definition at line 1000 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga5339890a45a1fb38e93cb9fcc5fd069d"/>    <section>
    <title>GLFW_STENCIL_BITS</title>
<indexterm><primary>GLFW_STENCIL_BITS</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_STENCIL_BITS</secondary></indexterm>
<para><computeroutput>#define GLFW_STENCIL_BITS   0x00021006</computeroutput></para><para>

<para>Framebuffer bit depth hint. </para>
</para>

<para>Framebuffer bit depth <link linkend="_window_guide_1GLFW_STENCIL_BITS">hint</link>. </para>
<para>
Definition at line 960 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga83d991efca02537e2d69969135b77b03"/>    <section>
    <title>GLFW_STEREO</title>
<indexterm><primary>GLFW_STEREO</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_STEREO</secondary></indexterm>
<para><computeroutput>#define GLFW_STEREO   0x0002100C</computeroutput></para><para>

<para>OpenGL stereoscopic rendering hint. </para>
</para>

<para>OpenGL stereoscopic rendering <link linkend="_window_guide_1GLFW_STEREO">hint</link>. </para>
<para>
Definition at line 990 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga60a0578c3b9449027d683a9c6abb9f14"/>    <section>
    <title>GLFW_TRANSPARENT_FRAMEBUFFER</title>
<indexterm><primary>GLFW_TRANSPARENT_FRAMEBUFFER</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_TRANSPARENT_FRAMEBUFFER</secondary></indexterm>
<para><computeroutput>#define GLFW_TRANSPARENT_FRAMEBUFFER   0x0002000A</computeroutput></para><para>

<para>Window framebuffer transparency hint and attribute. </para>
</para>

<para>Window framebuffer transparency <link linkend="_window_guide_1GLFW_TRANSPARENT_FRAMEBUFFER_hint">window hint</link> and <link linkend="_window_guide_1GLFW_TRANSPARENT_FRAMEBUFFER_attrib">window attribute</link>. </para>
<para>
Definition at line 911 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4"/>    <section>
    <title>GLFW_VISIBLE</title>
<indexterm><primary>GLFW_VISIBLE</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_VISIBLE</secondary></indexterm>
<para><computeroutput>#define GLFW_VISIBLE   0x00020004</computeroutput></para><para>

<para>Window visibility window hint and attribute. </para>
</para>

<para>Window visibility <link linkend="_window_guide_1GLFW_VISIBLE_hint">window hint</link> and <link linkend="_window_guide_1GLFW_VISIBLE_attrib">window attribute</link>. </para>
<para>
Definition at line 875 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gaf65ea8dafdc0edb07b821b9a336d5043"/>    <section>
    <title>GLFW_WIN32_KEYBOARD_MENU</title>
<indexterm><primary>GLFW_WIN32_KEYBOARD_MENU</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_WIN32_KEYBOARD_MENU</secondary></indexterm>
<para><computeroutput>#define GLFW_WIN32_KEYBOARD_MENU   0x00025001</computeroutput></para><para>
Definition at line 1108 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gae5a9ea2fccccd92edbd343fc56461114"/>    <section>
    <title>GLFW_X11_CLASS_NAME</title>
<indexterm><primary>GLFW_X11_CLASS_NAME</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_X11_CLASS_NAME</secondary></indexterm>
<para><computeroutput>#define GLFW_X11_CLASS_NAME   0x00024001</computeroutput></para><para>

<para>X11 specific <link linkend="_window_guide_1GLFW_X11_CLASS_NAME_hint">window hint</link>. </para>
</para>
<para>
Definition at line 1103 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga494c3c0d911e4b860b946530a3e389e8"/>    <section>
    <title>GLFW_X11_INSTANCE_NAME</title>
<indexterm><primary>GLFW_X11_INSTANCE_NAME</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFW_X11_INSTANCE_NAME</secondary></indexterm>
<para><computeroutput>#define GLFW_X11_INSTANCE_NAME   0x00024002</computeroutput></para><para>

<para>X11 specific <link linkend="_window_guide_1GLFW_X11_CLASS_NAME_hint">window hint</link>. </para>
</para>
<para>
Definition at line 1107 of file glfw3.h.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__window_1gae18026e294dde685ed2e5f759533144d"/>    <section>
    <title>GLFWframebuffersizefun</title>
<indexterm><primary>GLFWframebuffersizefun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWframebuffersizefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWframebuffersizefun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int <link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</computeroutput></para><para>

<para>The function pointer type for framebuffer size callbacks. </para>
</para>

<para>This is the function pointer type for framebuffer size callbacks. A framebuffer size callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;width,&#32;int&#32;height)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose framebuffer was resized. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>width</entry>
                                <entry>
<para>The new width, in pixels, of the framebuffer. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>height</entry>
                                <entry>
<para>The new height, in pixels, of the framebuffer.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_fbsize">Framebuffer size</link> </para>

<para><link linkend="_group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0">glfwSetFramebufferSizeCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1693 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga7cc0a09de172fa7250872046f8c4d2ca"/>    <section>
    <title>GLFWimage</title>
<indexterm><primary>GLFWimage</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWimage</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_g_l_f_wimage">GLFWimage</link> <link linkend="_struct_g_l_f_wimage">GLFWimage</link></computeroutput></para><para>

<para>Image data. </para>
</para>

<para>This describes a single 2D image. See the documentation for each related function what the expected pixel format is.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_custom">Custom cursor creation</link> </para>

<para><link linkend="_window_guide_1window_icon">Window icon</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.1. @glfw3 Removed format and bytes-per-pixel members. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242"/>    <section>
    <title>GLFWwindow</title>
<indexterm><primary>GLFWwindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindow</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link></computeroutput></para><para>

<para>Opaque window object. </para>
</para>

<para>Opaque window object.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_object">Window objects</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1363 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gabf859b936d80961b7d39013a9694cc3e"/>    <section>
    <title>GLFWwindowclosefun</title>
<indexterm><primary>GLFWwindowclosefun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowclosefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowclosefun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</computeroutput></para><para>

<para>The function pointer type for window close callbacks. </para>
</para>

<para>This is the function pointer type for window close callbacks. A window close callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that the user attempted to close.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_close">Window closing and close flag</link> </para>

<para><link linkend="_group__window_1ga693d778815971a06e1a5a7bcdeff3d36">glfwSetWindowCloseCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.5. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 1589 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e"/>    <section>
    <title>GLFWwindowcontentscalefun</title>
<indexterm><primary>GLFWwindowcontentscalefun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowcontentscalefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowcontentscalefun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, float xscale, float yscale)</computeroutput></para><para>

<para>The function pointer type for window content scale callbacks. </para>
</para>

<para>This is the function pointer type for window content scale callbacks. A window content scale callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;float&#32;xscale,&#32;float&#32;yscale)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose content scale changed. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xscale</entry>
                                <entry>
<para>The new x-axis content scale of the window. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>yscale</entry>
                                <entry>
<para>The new y-axis content scale of the window.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_scale">Window content scale</link> </para>

<para><link linkend="_group__window_1gac6edcddbe785445d0d2b7b7be500836e">glfwSetWindowContentScaleCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1714 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46"/>    <section>
    <title>GLFWwindowfocusfun</title>
<indexterm><primary>GLFWwindowfocusfun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowfocusfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowfocusfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int focused)</computeroutput></para><para>

<para>The function pointer type for window focus callbacks. </para>
</para>

<para>This is the function pointer type for window focus callbacks. A window focus callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;focused)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that gained or lost input focus. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>focused</entry>
                                <entry>
<para><computeroutput>GLFW_TRUE</computeroutput> if the window was given input focus, or <computeroutput>GLFW_FALSE</computeroutput> if it lost it.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_focus">Window input focus</link> </para>

<para><link linkend="_group__window_1gacce1c4dd273b5c4c60b05599f8725b4e">glfwSetWindowFocusCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1630 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f"/>    <section>
    <title>GLFWwindowiconifyfun</title>
<indexterm><primary>GLFWwindowiconifyfun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowiconifyfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowiconifyfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int iconified)</computeroutput></para><para>

<para>The function pointer type for window iconify callbacks. </para>
</para>

<para>This is the function pointer type for window iconify callbacks. A window iconify callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;iconified)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that was iconified or restored. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>iconified</entry>
                                <entry>
<para><computeroutput>GLFW_TRUE</computeroutput> if the window was iconified, or <computeroutput>GLFW_FALSE</computeroutput> if it was restored.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_iconify">Window iconification</link> </para>

<para><link linkend="_group__window_1ga3e9f355edb6b9247149ddea2335eda69">glfwSetWindowIconifyCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1651 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga3017196fdaec33ac3e095765176c2a90"/>    <section>
    <title>GLFWwindowmaximizefun</title>
<indexterm><primary>GLFWwindowmaximizefun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowmaximizefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowmaximizefun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int maximized)</computeroutput></para><para>

<para>The function pointer type for window maximize callbacks. </para>
</para>

<para>This is the function pointer type for window maximize callbacks. A window maximize callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;maximized)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that was maximized or restored. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>maximized</entry>
                                <entry>
<para><computeroutput>GLFW_TRUE</computeroutput> if the window was maximized, or <computeroutput>GLFW_FALSE</computeroutput> if it was restored.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_maximize">Window maximization</link> </para>

<para><link linkend="_group__window_1gae77b3960dcd40514fb7b2b8a6eb98137">glfwSetWindowMaximizeCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1672 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9"/>    <section>
    <title>GLFWwindowposfun</title>
<indexterm><primary>GLFWwindowposfun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowposfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowposfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int xpos, int ypos)</computeroutput></para><para>

<para>The function pointer type for window position callbacks. </para>
</para>

<para>This is the function pointer type for window position callbacks. A window position callback function has the following signature: <literallayout><computeroutput>void&#32;callback_name(GLFWwindow*&#32;window,&#32;int&#32;xpos,&#32;int&#32;ypos)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that was moved. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>The new x-coordinate, in screen coordinates, of the upper-left corner of the content area of the window. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>The new y-coordinate, in screen coordinates, of the upper-left corner of the content area of the window.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_pos">Window position</link> </para>

<para><link linkend="_group__window_1ga517b6e80b982efa06e9b8ca89d4a75a6">glfwSetWindowPosCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1547 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1ga431663a1427d2eb3a273bc398b6737b5"/>    <section>
    <title>GLFWwindowrefreshfun</title>
<indexterm><primary>GLFWwindowrefreshfun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowrefreshfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowrefreshfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</computeroutput></para><para>

<para>The function pointer type for window content refresh callbacks. </para>
</para>

<para>This is the function pointer type for window content refresh callbacks. A window content refresh callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window);
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose content needs to be refreshed.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_refresh">Window damage and refresh</link> </para>

<para><link linkend="_group__window_1ga62bfa902c07a03b8ad9be37da31a4be7">glfwSetWindowRefreshCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.5. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 1609 of file glfw3.h.</para>
    </section><anchor xml:id="_group__window_1gaec0282944bb810f6f3163ec02da90350"/>    <section>
    <title>GLFWwindowsizefun</title>
<indexterm><primary>GLFWwindowsizefun</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>GLFWwindowsizefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWwindowsizefun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int <link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</computeroutput></para><para>

<para>The function pointer type for window size callbacks. </para>
</para>

<para>This is the function pointer type for window size callbacks. A window size callback function has the following signature: <literallayout><computeroutput>void&#32;callback_name(GLFWwindow*&#32;window,&#32;int&#32;width,&#32;int&#32;height)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that was resized. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>width</entry>
                                <entry>
<para>The new width, in screen coordinates, of the window. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>height</entry>
                                <entry>
<para>The new height, in screen coordinates, of the window.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_size">Window size</link> </para>

<para><link linkend="_group__window_1gab0754f8d5c7c4d5cae2a9937a0e00bc5">glfwSetWindowSizeCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 1569 of file glfw3.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__window_1ga680a02abe0e4494b6759d5703240713e"/>    <section>
    <title>glfwCreateWindow()</title>
<indexterm><primary>glfwCreateWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwCreateWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link>* glfwCreateWindow (int width, int height, const char * title, <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * share)</computeroutput></para><para>

<para>Creates a window and its associated context. </para>
</para>

<para>This function creates a window and its associated OpenGL or OpenGL ES context. Most of the options controlling how the window and its context should be created are specified with <link linkend="_window_guide_1window_hints">window hints</link>.</para>

<para>Successful creation does not change which context is current. Before you can use the newly created context, you need to <link linkend="_context_guide_1context_current">make it current</link>. For information about the <computeroutput>share</computeroutput> parameter, see <link linkend="_context_guide_1context_sharing">Context object sharing</link>.</para>

<para>The created window, framebuffer and context may differ from what you requested, as not all parameters and hints are <link linkend="_window_guide_1window_hints_hard">hard constraints</link>. This includes the size of the window, especially for full screen windows. To query the actual attributes of the created window, framebuffer and context, see <link linkend="_group__window_1ga1bb0c7e100418e284dbb800789c63d40">glfwGetWindowAttrib</link>, <link linkend="_group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e">glfwGetWindowSize</link> and <link linkend="_group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e">glfwGetFramebufferSize</link>.</para>

<para>To create a full screen window, you need to specify the monitor the window will cover. If no monitor is specified, the window will be windowed mode. Unless you have a way for the user to choose a specific monitor, it is recommended that you pick the primary monitor. For more information on how to query connected monitors, see <link linkend="_monitor_guide_1monitor_monitors">Retrieving monitors</link>.</para>

<para>For full screen windows, the specified size becomes the resolution of the window&apos;s <emphasis>desired video mode</emphasis>. As long as a full screen window is not iconified, the supported video mode most closely matching the desired video mode is set for the specified monitor. For more information about full screen windows, including the creation of so called <emphasis>windowed full screen</emphasis> or <emphasis>borderless full screen</emphasis> windows, see <link linkend="_window_guide_1window_windowed_full_screen">&quot;Windowed full screen&quot; windows</link>.</para>

<para>Once you have created the window, you can switch it between windowed and full screen mode with <link linkend="_group__window_1ga12fabf78575e59c00f822f323ae0b6ae">glfwSetWindowMonitor</link>. This will not affect its OpenGL or OpenGL ES context.</para>

<para>By default, newly created windows use the placement recommended by the window system. To create the window at a specific position, make it initially invisible using the <link linkend="_window_guide_1GLFW_VISIBLE_hint">GLFW_VISIBLE</link> window hint, set its <link linkend="_window_guide_1window_pos">position</link> and then <link linkend="_window_guide_1window_hide">show</link> it.</para>

<para>As long as at least one full screen window is not iconified, the screensaver is prohibited from starting.</para>

<para>Window systems put limits on window sizes. Very large or very small window dimensions may be overridden by the window system on creation. Check the actual <link linkend="_window_guide_1window_size">size</link> after creation.</para>

<para>The <link linkend="_window_guide_1buffer_swap">swap interval</link> is not set during window creation and the initial value may vary depending on driver settings and defaults.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>width</entry>
                                <entry>
<para>The desired width, in screen coordinates, of the window. This must be greater than zero. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>height</entry>
                                <entry>
<para>The desired height, in screen coordinates, of the window. This must be greater than zero. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>title</entry>
                                <entry>
<para>The initial, UTF-8 encoded window title. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to use for full screen mode, or <computeroutput>NULL</computeroutput> for windowed mode. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>share</entry>
                                <entry>
<para>The window whose context to share resources with, or <computeroutput>NULL</computeroutput> to not share resources. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The handle of the created window, or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>, <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>, <link linkend="_group__errors_1ga56882b290db23261cc6c053c40c2d08e">GLFW_API_UNAVAILABLE</link>, <link linkend="_group__errors_1gad16c5565b4a69f9c2a9ac2c0dbc89462">GLFW_VERSION_UNAVAILABLE</link>, <link linkend="_group__errors_1ga196e125ef261d94184e2b55c05762f14">GLFW_FORMAT_UNAVAILABLE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@win32 Window creation will fail if the Microsoft GDI software OpenGL implementation is the only one available.</para>

<para>@win32 If the executable has an icon resource named <computeroutput>GLFW_ICON,</computeroutput> it will be set as the initial icon for the window. If no such icon is present, the <computeroutput>IDI_APPLICATION</computeroutput> icon will be used instead. To set a different icon, see <link linkend="_group__window_1ga182987a1a62a41a924842b9473d560df">glfwSetWindowIcon</link>.</para>

<para>@win32 The context to share resources with must not be current on any other thread.</para>

<para>@macos The OS only supports core profile contexts for OpenGL versions 3.2 and later. Before creating an OpenGL context of version 3.2 or later you must set the <link linkend="_window_guide_1GLFW_OPENGL_PROFILE_hint">GLFW_OPENGL_PROFILE</link> hint accordingly. OpenGL 3.0 and 3.1 contexts are not supported at all on macOS.</para>

<para>@macos The GLFW window has no icon, as it is not a document window, but the dock icon will be the same as the application bundle&apos;s icon. For more information on bundles, see the <link xlink:href="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">Bundle Programming Guide</link> in the Mac Developer Library.</para>

<para>@macos On OS X 10.10 and later the window frame will not be rendered at full resolution on Retina displays unless the <link linkend="_window_guide_1GLFW_COCOA_RETINA_FRAMEBUFFER_hint">GLFW_COCOA_RETINA_FRAMEBUFFER</link> hint is <computeroutput>GLFW_TRUE</computeroutput> and the <computeroutput>NSHighResolutionCapable</computeroutput> key is enabled in the application bundle&apos;s <computeroutput>Info.plist</computeroutput>. For more information, see <link xlink:href="https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Explained/Explained.html">High Resolution Guidelines for OS X</link> in the Mac Developer Library. The GLFW test and example programs use a custom <computeroutput>Info.plist</computeroutput> template for this, which can be found as <computeroutput>CMake/Info.plist.in</computeroutput> in the source tree.</para>

<para>@macos When activating frame autosaving with <link linkend="_window_guide_1GLFW_COCOA_FRAME_NAME_hint">GLFW_COCOA_FRAME_NAME</link>, the specified window size and position may be overridden by previously saved values.</para>

<para>@x11 Some window managers will not respect the placement of initially hidden windows.</para>

<para>@x11 Due to the asynchronous nature of X11, it may take a moment for a window to reach its requested state. This means you may not be able to query the final size, position or other attributes directly after window creation.</para>

<para>@x11 The class part of the <computeroutput>WM_CLASS</computeroutput> window property will by default be set to the window title passed to this function. The instance part will use the contents of the <computeroutput>RESOURCE_NAME</computeroutput> environment variable, if present and not empty, or fall back to the window title. Set the <link linkend="_window_guide_1GLFW_X11_CLASS_NAME_hint">GLFW_X11_CLASS_NAME</link> and <link linkend="_window_guide_1GLFW_X11_INSTANCE_NAME_hint">GLFW_X11_INSTANCE_NAME</link> window hints to override this.</para>

<para>@wayland Compositors should implement the xdg-decoration protocol for GLFW to decorate the window properly. If this protocol isn&apos;t supported, or if the compositor prefers client-side decorations, a very simple fallback frame will be drawn using the wp_viewporter protocol. A compositor can still emit close, maximize or fullscreen events, using for instance a keybind mechanism. If neither of these protocols is supported, the window won&apos;t be decorated.</para>

<para>@wayland A full screen window will not attempt to change the mode, no matter what the requested size or refresh rate.</para>

<para>@wayland Screensaver inhibition requires the idle-inhibit protocol to be implemented in the user&apos;s compositor.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_creation">Window creation</link> </para>

<para><link linkend="_group__window_1ga806747476b7247d292be3711c323ea10">glfwDestroyWindow</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwOpenWindow</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 152 of file window.c.</para>
<programlisting>156 {
157 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wfbconfig">_GLFWfbconfig</link>&#32;fbconfig;
158 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wctxconfig">_GLFWctxconfig</link>&#32;ctxconfig;
159 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwndconfig">_GLFWwndconfig</link>&#32;wndconfig;
160 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>;
161 
162 &#32;&#32;&#32;&#32;assert(title&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
163 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;&gt;=&#32;0);
164 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;&gt;=&#32;0);
165 
166 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
167 
168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;&lt;=&#32;0&#32;||&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;&lt;=&#32;0)
169 &#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;size&#32;%ix%i&quot;</emphasis>,
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>,&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>);
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
175 &#32;&#32;&#32;&#32;}
176 
177 &#32;&#32;&#32;&#32;fbconfig&#32;&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>;
178 &#32;&#32;&#32;&#32;ctxconfig&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>;
179 &#32;&#32;&#32;&#32;wndconfig&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>;
180 
181 &#32;&#32;&#32;&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1ab53d90df4a7f5fd67a232501c36ac921">width</link>&#32;&#32;&#32;=&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>;
182 &#32;&#32;&#32;&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1ae1fcd89a1c47ac1a5174636667265154">height</link>&#32;&#32;=&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>;
183 &#32;&#32;&#32;&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a1b3475dec1fd6198da30c822d8d17e32">title</link>&#32;&#32;&#32;=&#32;title;
184 &#32;&#32;&#32;&#32;ctxconfig.<link linkend="_struct___g_l_f_wctxconfig_1ae2de5454bfc052ffa9c27f300fcc0425">share</link>&#32;&#32;&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;share;
185 
186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_context_8c_1a659c5d5b0cd359304004700d16a76954">_glfwIsValidContextConfig</link>(&amp;ctxconfig))
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
188 
189 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;<link linkend="_init_8c_1afdf24e4f0665535fd3d012b810ffb18f">_glfw_calloc</link>(1,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>));
190 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;next&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7859e386c1ff4ed65e13e6ba1e189cfe">windowListHead</link>;
191 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7859e386c1ff4ed65e13e6ba1e189cfe">windowListHead</link>&#32;=&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>;
192 
193 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.width&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>;
194 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.height&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>;
195 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.redBits&#32;&#32;&#32;&#32;&#32;=&#32;fbconfig.<link linkend="_struct___g_l_f_wfbconfig_1ab9a8f50cbc9b0c6e1ad230e411797f44">redBits</link>;
196 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.greenBits&#32;&#32;&#32;=&#32;fbconfig.<link linkend="_struct___g_l_f_wfbconfig_1af19c4a4e81f5e852ebfbfdc5986610ab">greenBits</link>;
197 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.blueBits&#32;&#32;&#32;&#32;=&#32;fbconfig.<link linkend="_struct___g_l_f_wfbconfig_1aff797f80ccb99126ce88f696f745f6e5">blueBits</link>;
198 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.refreshRate&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1aa6897931acebf196791bc65c82461110">refreshRate</link>;
199 
200 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;monitor;
201 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;resizable&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a720d7078ba5509a2f900ee1820683757">resizable</link>;
202 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;decorated&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a02d04b1fd5957f637c572719ffbfb322">decorated</link>;
203 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;autoIconify&#32;&#32;&#32;&#32;&#32;&#32;=&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1adfada5e8fba13ad11042f7e76c34e84d">autoIconify</link>;
204 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;floating&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a97083e8d9143830dff2cb819762fa042">floating</link>;
205 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;focusOnShow&#32;&#32;&#32;&#32;&#32;&#32;=&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a52d82b17771f31cd65202715f5ccaa41">focusOnShow</link>;
206 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mousePassthrough&#32;=&#32;wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a957f693bf16d99d5217922331b3f96c0">mousePassthrough</link>;
207 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursorMode&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_glfw3_8h_1ae04dd25c8577e19fa8c97368561f6c68">GLFW_CURSOR_NORMAL</link>;
208 
209 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;doublebuffer&#32;=&#32;fbconfig.<link linkend="_struct___g_l_f_wfbconfig_1afd48b37171d567f9893bd8a660c4621b">doublebuffer</link>;
210 
211 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;minwidth&#32;&#32;&#32;&#32;=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>;
212 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;minheight&#32;&#32;&#32;=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>;
213 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;maxwidth&#32;&#32;&#32;&#32;=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>;
214 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;maxheight&#32;&#32;&#32;=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>;
215 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;numer&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>;
216 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;denom&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>;
217 
218 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Open&#32;the&#32;actual&#32;window&#32;and&#32;create&#32;its&#32;context</emphasis>
219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a133d7bf1900eb7f01130b84f5d8514dc">createWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;&amp;wndconfig,&#32;&amp;ctxconfig,&#32;&amp;fbconfig))
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__window_1ga806747476b7247d292be3711c323ea10">glfwDestroyWindow</link>((<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link>*)&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
223 &#32;&#32;&#32;&#32;}
224 
225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ctxconfig.<link linkend="_struct___g_l_f_wctxconfig_1a9d54584dc156b04e39d7567a70e13ef8">client</link>&#32;!=&#32;<link linkend="_glfw3_8h_1a8f6dcdc968d214ff14779564f1389264">GLFW_NO_API</link>)
226 &#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_context_8c_1ad31e31c6a588d6770188033eed87305b">_glfwRefreshContextAttribs</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;&amp;ctxconfig))
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__window_1ga806747476b7247d292be3711c323ea10">glfwDestroyWindow</link>((<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link>*)&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
232 &#32;&#32;&#32;&#32;}
233 
234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a957f693bf16d99d5217922331b3f96c0">mousePassthrough</link>)
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a7d6d01a90ce3f4b04ba0954aedc9ab9f">setWindowMousePassthrough</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>);
236 
237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
238 &#32;&#32;&#32;&#32;{
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a083f02ce71ee3bd7f5eb2bb5fe1e840b">centerCursor</link>)
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_deps_2glfw_2src_2input_8c_1acf1fbc03e8d658a35f70544df858fe6c">_glfwCenterCursorInContentArea</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
241 &#32;&#32;&#32;&#32;}
242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1a308144d2d6df19c1d655231b48985b14">visible</link>)
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1acf0479b2c98868d61b54087b4b6de1cd">showWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wndconfig.<link linkend="_struct___g_l_f_wwndconfig_1ac56d67a9031b7fba4620f7e756ea86d1">focused</link>)
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a371fdd823fe2e2c448627ec8ac8d00c9">focusWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
250 &#32;&#32;&#32;&#32;}
251 
252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link>*)&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>;
253 }
</programlisting>    </section><anchor xml:id="_group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4"/>    <section>
    <title>glfwDefaultWindowHints()</title>
<indexterm><primary>glfwDefaultWindowHints</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwDefaultWindowHints</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwDefaultWindowHints (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Resets all window hints to their default values. </para>
</para>

<para>This function resets all window hints to their <link linkend="_window_guide_1window_hints_values">default values</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_hints">Window creation hints</link> </para>

<para><link linkend="_group__window_1ga69c40728499720bef8a49aa925ea0efa">glfwWindowHint</link> </para>

<para><link linkend="_group__window_1ga3c2270562d7ba13d92680ba1090adafe">glfwWindowHintString</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 255 of file window.c.</para>
<programlisting>256 {
257 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
258 
259 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;is&#32;OpenGL&#32;with&#32;minimum&#32;version&#32;1.0</emphasis>
260 &#32;&#32;&#32;&#32;memset(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>));
261 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a9d54584dc156b04e39d7567a70e13ef8">client</link>&#32;=&#32;<link linkend="_glfw3_8h_1a01b3f66db266341425e9abee6b257db2">GLFW_OPENGL_API</link>;
262 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a725120317549aa1eef2b88af5ac4c409">source</link>&#32;=&#32;<link linkend="_glfw3_8h_1a0494c9bfd3f584ab41e6dbeeaa0e6a19">GLFW_NATIVE_CONTEXT_API</link>;
263 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a51a8fa315dccf7f6217098cf0413a7a9">major</link>&#32;&#32;=&#32;1;
264 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a250a475c8d778778bb8fb4ab942eddd9">minor</link>&#32;&#32;=&#32;0;
265 
266 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;is&#32;a&#32;focused,&#32;visible,&#32;resizable&#32;window&#32;with&#32;decorations</emphasis>
267 &#32;&#32;&#32;&#32;memset(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>));
268 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a720d7078ba5509a2f900ee1820683757">resizable</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
269 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a308144d2d6df19c1d655231b48985b14">visible</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
270 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a02d04b1fd5957f637c572719ffbfb322">decorated</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
271 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1ac56d67a9031b7fba4620f7e756ea86d1">focused</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
272 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1adfada5e8fba13ad11042f7e76c34e84d">autoIconify</link>&#32;&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
273 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a083f02ce71ee3bd7f5eb2bb5fe1e840b">centerCursor</link>&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
274 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a52d82b17771f31cd65202715f5ccaa41">focusOnShow</link>&#32;&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
275 
276 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;is&#32;24&#32;bits&#32;of&#32;color,&#32;24&#32;bits&#32;of&#32;depth&#32;and&#32;8&#32;bits&#32;of&#32;stencil,</emphasis>
277 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;double&#32;buffered</emphasis>
278 &#32;&#32;&#32;&#32;memset(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>));
279 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1ab9a8f50cbc9b0c6e1ad230e411797f44">redBits</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;8;
280 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1af19c4a4e81f5e852ebfbfdc5986610ab">greenBits</link>&#32;&#32;&#32;&#32;=&#32;8;
281 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1aff797f80ccb99126ce88f696f745f6e5">blueBits</link>&#32;&#32;&#32;&#32;&#32;=&#32;8;
282 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a9945d1191aaa94d92f326382027a43a0">alphaBits</link>&#32;&#32;&#32;&#32;=&#32;8;
283 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a0e7baeca6ea2e4146236f38bc1df870f">depthBits</link>&#32;&#32;&#32;&#32;=&#32;24;
284 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a202a6343c817e5f6e9597a02559273b9">stencilBits</link>&#32;&#32;=&#32;8;
285 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1afd48b37171d567f9893bd8a660c4621b">doublebuffer</link>&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
286 
287 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;is&#32;to&#32;select&#32;the&#32;highest&#32;available&#32;refresh&#32;rate</emphasis>
288 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1aa6897931acebf196791bc65c82461110">refreshRate</link>&#32;=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>;
289 
290 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;is&#32;to&#32;use&#32;full&#32;Retina&#32;resolution&#32;framebuffers</emphasis>
291 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a36a70f7ee298a1cdcadf676ee545f825">ns</link>.<link linkend="_struct___g_l_f_wwndconfig_1a7da9c35c04d11628f15d848eca27ebde">retina</link>&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
292 }
</programlisting>    </section><anchor xml:id="_group__window_1ga806747476b7247d292be3711c323ea10"/>    <section>
    <title>glfwDestroyWindow()</title>
<indexterm><primary>glfwDestroyWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwDestroyWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwDestroyWindow (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Destroys the specified window and its context. </para>
</para>

<para>This function destroys the specified window and its context. On calling this function, no further callbacks will be called for that window.</para>

<para>If the context of the specified window is current on the main thread, it is detached before being destroyed.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to destroy.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><note><title>Note</title>

<para>The context of the specified window must not be current on any other thread when this function is called.</para>
</note>
@reentrancy This function must not be called from a callback.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_creation">Window creation</link> </para>

<para><link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwCloseWindow</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 453 of file window.c.</para>
<programlisting>454 {
455 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
456 
457 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
458 
459 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;closing&#32;of&#32;NULL&#32;(to&#32;match&#32;the&#32;behavior&#32;of&#32;free)</emphasis>
460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;==&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
462 
463 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;all&#32;callbacks&#32;to&#32;avoid&#32;exposing&#32;a&#32;half&#32;torn-down&#32;window&#32;object</emphasis>
464 &#32;&#32;&#32;&#32;memset(&amp;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks));
465 
466 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;window&apos;s&#32;context&#32;must&#32;not&#32;be&#32;current&#32;on&#32;another&#32;thread&#32;when&#32;the</emphasis>
467 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;window&#32;is&#32;destroyed</emphasis>
468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;==&#32;<link linkend="_internal_8h_1a0a0787a86bb4e04f17a8d24e70e1f013">_glfwPlatformGetTls</link>(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aa267e959a6f2dae405c0c15220e0cfb2">contextSlot</link>))
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__context_1gafd76c93e15ec8b0b90506a9936a46185">glfwMakeContextCurrent</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
470 
471 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ad333e998d6a22e17ee71d821beae6e7d">destroyWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
472 
473 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unlink&#32;window&#32;from&#32;global&#32;linked&#32;list</emphasis>
474 &#32;&#32;&#32;&#32;{
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>**&#32;prev&#32;=&#32;&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7859e386c1ff4ed65e13e6ba1e189cfe">windowListHead</link>;
476 
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*prev&#32;!=&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;&amp;((*prev)-&gt;next);
479 
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*prev&#32;=&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;next;
481 &#32;&#32;&#32;&#32;}
482 
483 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1abcf72962b101a8a5c539da1a278b0e9e">_glfw_free</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
484 }
</programlisting>    </section><anchor xml:id="_group__window_1ga0da0e3daaa2d100f44a115c09077b510"/>    <section>
    <title>glfwFocusWindow()</title>
<indexterm><primary>glfwFocusWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwFocusWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwFocusWindow (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Brings the specified window to front and sets input focus. </para>
</para>

<para>This function brings the specified window to front and sets input focus. The window should already be visible and not iconified.</para>

<para>By default, both windowed and full screen mode windows are focused when initially created. Set the <link linkend="_window_guide_1GLFW_FOCUSED_hint">GLFW_FOCUSED</link> to disable this behavior.</para>

<para>Also by default, windowed mode windows are focused when shown with <link linkend="_group__window_1ga7945bcdff9e5e058cf36505d6873ed8c">glfwShowWindow</link>. Set the <link linkend="_window_guide_1GLFW_FOCUS_ON_SHOW_hint">GLFW_FOCUS_ON_SHOW</link> to disable this behavior.</para>

<para><emphasis role="bold">Do not use this function</emphasis> to steal focus from other applications unless you are certain that is what the user wants. Focus stealing can be extremely disruptive.</para>

<para>For a less disruptive way of getting the user&apos;s attention, see <link linkend="_window_guide_1window_attention">attention requests</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to give input focus.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> and <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link> (see remarks).</para>

<para><formalpara><title>Remarks</title>

<para>@wayland It is not possible for an application to set the input focus. This function will emit <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_focus">Window input focus</link> </para>

<para><link linkend="_window_guide_1window_attention">Window attention request</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 803 of file window.c.</para>
<programlisting>804 {
805 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
806 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
807 
808 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
809 
810 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a371fdd823fe2e2c448627ec8ac8d00c9">focusWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
811 }
</programlisting>    </section><anchor xml:id="_group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e"/>    <section>
    <title>glfwGetFramebufferSize()</title>
<indexterm><primary>glfwGetFramebufferSize</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetFramebufferSize</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetFramebufferSize (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int * width, int * height)</computeroutput></para><para>

<para>Retrieves the size of the framebuffer of the specified window. </para>
</para>

<para>This function retrieves the size, in pixels, of the framebuffer of the specified window. If you wish to retrieve the size of the window in screen coordinates, see <link linkend="_group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e">glfwGetWindowSize</link>.</para>

<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose framebuffer to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>width</entry>
                                <entry>
<para>Where to store the width, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>height</entry>
                                <entry>
<para>Where to store the height, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_fbsize">Framebuffer size</link> </para>

<para><link linkend="_group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0">glfwSetFramebufferSizeCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 656 of file window.c.</para>
<programlisting>657 {
658 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
659 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
660 
661 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>)
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;=&#32;0;
663 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;=&#32;0;
665 
666 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
667 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1afd5d50a47dc102ecc01c1b3d3bd31cd8">getFramebufferSize</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>,&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>);
668 }
</programlisting>    </section><anchor xml:id="_group__window_1ga1bb0c7e100418e284dbb800789c63d40"/>    <section>
    <title>glfwGetWindowAttrib()</title>
<indexterm><primary>glfwGetWindowAttrib</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowAttrib</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetWindowAttrib (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int attrib)</computeroutput></para><para>

<para>Returns an attribute of the specified window. </para>
</para>

<para>This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>attrib</entry>
                                <entry>
<para>The <link linkend="_window_guide_1window_attribs">window attribute</link> whose value to return. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The value of the attribute, or zero if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>Framebuffer related hints are not window attributes. See <link linkend="_window_guide_1window_attribs_fb">Framebuffer related attributes</link> for more information.</para>

<para>Zero is a valid value for many window and context related attributes so you cannot use a return value of zero as an indication of errors. However, this function should not fail as long as it is passed valid arguments and the library has been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_attribs">Window attributes</link> </para>

<para><link linkend="_group__window_1gad39f43f07856efcf3d656426a9284c75">glfwSetWindowAttrib</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwGetWindowParam</computeroutput> and <computeroutput>glfwGetGLVersion</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 813 of file window.c.</para>
<programlisting>814 {
815 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
816 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
817 
818 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(0);
819 
820 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(attrib)
821 &#32;&#32;&#32;&#32;{
822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga54ddb14825a1541a56e22afb5f832a9e">GLFW_FOCUSED</link>:
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a4f8164c43b16635c985a41ff9056a5fe">windowFocused</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga39d44b7c056e55e581355a92d240b58a">GLFW_ICONIFIED</link>:
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a27a04313e233695eb8b45fa76278c806">windowIconified</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4">GLFW_VISIBLE</link>:
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a328c34c59fa3460fd39f4f476f947cdb">windowVisible</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gad8ccb396253ad0b72c6d4c917eb38a03">GLFW_MAXIMIZED</link>:
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a37c3a24d8896b9338aa894de310bf969">windowMaximized</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga8665c71c6fa3d22425c6a0e8a3f89d8a">GLFW_HOVERED</link>:
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1adcafb8fd05f3f7c9bdab36d70e578c10">windowHovered</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafa94b1da34bfd6488c0d709761504dfc">GLFW_FOCUS_ON_SHOW</link>:
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;focusOnShow;
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga88981797d29800808ec242274ab5c03a">GLFW_MOUSE_PASSTHROUGH</link>:
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mousePassthrough;
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga60a0578c3b9449027d683a9c6abb9f14">GLFW_TRANSPARENT_FRAMEBUFFER</link>:
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ad5f1ad265f2ffd23d898a70cf1931667">framebufferTransparent</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d">GLFW_RESIZABLE</link>:
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;resizable;
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga21b854d36314c94d65aed84405b2f25e">GLFW_DECORATED</link>:
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;decorated;
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga7fb0be51407783b41adbf5bec0b09d80">GLFW_FLOATING</link>:
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;floating;
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga9d9874fc928200136a6dcdad726aa252">GLFW_AUTO_ICONIFY</link>:
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;autoIconify;
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga714a5d569e8a274ea58fdfa020955339">GLFW_DOUBLEBUFFER</link>:
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;doublebuffer;
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga649309cf72a3d3de5b1348ca7936c95b">GLFW_CLIENT_API</link>:
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.client;
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga5154cebfcd831c1cc63a4d5ac9bb4486">GLFW_CONTEXT_CREATION_API</link>:
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.source;
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafe5e4922de1f9932d7e9849bb053b0c0">GLFW_CONTEXT_VERSION_MAJOR</link>:
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.major;
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga31aca791e4b538c4e4a771eb95cc2d07">GLFW_CONTEXT_VERSION_MINOR</link>:
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.minor;
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafb9475071aa77c6fb05ca5a5c8678a08">GLFW_CONTEXT_REVISION</link>:
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.revision;
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gade3593916b4c507900aa2d6844810e00">GLFW_CONTEXT_ROBUSTNESS</link>:
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.robustness;
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga13d24b12465da8b28985f46c8557925b">GLFW_OPENGL_FORWARD_COMPAT</link>:
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.forward;
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f">GLFW_CONTEXT_DEBUG</link>:
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.debug;
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga44f3a6b4261fbe351e0b950b0f372e12">GLFW_OPENGL_PROFILE</link>:
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.profile;
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga72b648a8378fe3310c7c7bbecc0f7be6">GLFW_CONTEXT_RELEASE_BEHAVIOR</link>:
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.release;
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga5a52fdfd46d8249c211f923675728082">GLFW_CONTEXT_NO_ERROR</link>:
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.noerror;
870 &#32;&#32;&#32;&#32;}
871 
872 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;attribute&#32;0x%08X&quot;</emphasis>,&#32;attrib);
873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
874 }
</programlisting>    </section><anchor xml:id="_group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee"/>    <section>
    <title>glfwGetWindowContentScale()</title>
<indexterm><primary>glfwGetWindowContentScale</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowContentScale</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetWindowContentScale (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, float * xscale, float * yscale)</computeroutput></para><para>

<para>Retrieves the content scale for the specified window. </para>
</para>

<para>This function retrieves the content scale for the specified window. The content scale is the ratio between the current DPI and the platform&apos;s default DPI. This is especially important for text and any UI elements. If the pixel dimensions of your UI scaled by this look appropriate on your machine then it should appear at a reasonable size on other machines regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being somewhat correct.</para>

<para>On platforms where each monitors can have its own content scale, the window content scale will depend on which monitor the system considers the window to be on.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>xscale</entry>
                                <entry>
<para>Where to store the x-axis content scale, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>yscale</entry>
                                <entry>
<para>Where to store the y-axis content scale, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_scale">Window content scale</link> </para>

<para><link linkend="_group__window_1gac6edcddbe785445d0d2b7b7be500836e">glfwSetWindowContentScaleCallback</link> </para>

<para><link linkend="_group__monitor_1ga28d856d94bea2ce8f09a67bb0346aaff">glfwGetMonitorContentScale</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 690 of file window.c.</para>
<programlisting>692 {
693 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
694 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
695 
696 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xscale)
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*xscale&#32;=&#32;0.f;
698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(yscale)
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*yscale&#32;=&#32;0.f;
700 
701 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
702 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a6e6af82d7d64d018f4ae62d9c15fc6ee">getWindowContentScale</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;xscale,&#32;yscale);
703 }
</programlisting>    </section><anchor xml:id="_group__window_1gaad46cdaae2eb732f68d3a1499a7c5409"/>    <section>
    <title>glfwGetWindowFrameSize()</title>
<indexterm><primary>glfwGetWindowFrameSize</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowFrameSize</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetWindowFrameSize (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int * left, int * top, int * right, int * bottom)</computeroutput></para><para>

<para>Retrieves the size of the frame of the window. </para>
</para>

<para>This function retrieves the size, in screen coordinates, of each edge of the frame of the specified window. This size includes the title bar, if the window has one. The size of the frame may vary depending on the <link linkend="_window_guide_1window_hints_wnd">window-related hints</link> used to create it.</para>

<para>Because this function retrieves the size of each window frame edge and not the offset along a particular coordinate axis, the retrieved values will always be zero or positive.</para>

<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose frame size to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>left</entry>
                                <entry>
<para>Where to store the size, in screen coordinates, of the left edge of the window frame, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>top</entry>
                                <entry>
<para>Where to store the size, in screen coordinates, of the top edge of the window frame, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>right</entry>
                                <entry>
<para>Where to store the size, in screen coordinates, of the right edge of the window frame, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>bottom</entry>
                                <entry>
<para>Where to store the size, in screen coordinates, of the bottom edge of the window frame, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_size">Window size</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 670 of file window.c.</para>
<programlisting>673 {
674 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
675 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
676 
677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a85b8f6c07fbc1fb5d77c2ae090f21995">left</link>)
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a85b8f6c07fbc1fb5d77c2ae090f21995">left</link>&#32;=&#32;0;
679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glext_8h_1a5ab323daeacf8dfdb8f91132fecdca23">top</link>)
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glext_8h_1a5ab323daeacf8dfdb8f91132fecdca23">top</link>&#32;=&#32;0;
681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glext_8h_1a5ffadbbacc6b89cf6218bc43b384d3fe">right</link>)
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glext_8h_1a5ffadbbacc6b89cf6218bc43b384d3fe">right</link>&#32;=&#32;0;
683 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a95fc257e5ddf46f7db9d5e898cdf1991">bottom</link>)
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a95fc257e5ddf46f7db9d5e898cdf1991">bottom</link>&#32;=&#32;0;
685 
686 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
687 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a6d45026146c463123ad8c00c5c94d9e5">getWindowFrameSize</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a85b8f6c07fbc1fb5d77c2ae090f21995">left</link>,&#32;<link linkend="_glext_8h_1a5ab323daeacf8dfdb8f91132fecdca23">top</link>,&#32;<link linkend="_glext_8h_1a5ffadbbacc6b89cf6218bc43b384d3fe">right</link>,&#32;<link linkend="_glad_8h_1a95fc257e5ddf46f7db9d5e898cdf1991">bottom</link>);
688 }
</programlisting>    </section><anchor xml:id="_group__window_1gaf1525cb3bccd5789c702cc9676ef3403"/>    <section>
    <title>glfwGetWindowMonitor()</title>
<indexterm><primary>glfwGetWindowMonitor</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowMonitor</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link>* glfwGetWindowMonitor (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Returns the monitor that the window uses for full screen mode. </para>
</para>

<para>This function returns the handle of the monitor that the specified window is in full screen on.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The monitor, or <computeroutput>NULL</computeroutput> if the window is in windowed mode or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_monitor">Window monitor</link> </para>

<para><link linkend="_group__window_1ga12fabf78575e59c00f822f323ae0b6ae">glfwSetWindowMonitor</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 922 of file window.c.</para>
<programlisting>923 {
924 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
925 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
926 
927 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link>*)&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor;
929 }
</programlisting>    </section><anchor xml:id="_group__window_1gad124d57a1c1c519f60c9765cd0c2a89c"/>    <section>
    <title>glfwGetWindowOpacity()</title>
<indexterm><primary>glfwGetWindowOpacity</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowOpacity</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> float glfwGetWindowOpacity (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Returns the opacity of the whole window. </para>
</para>

<para>This function returns the opacity of the window, including any decorations.</para>

<para>The opacity (or alpha) value is a positive finite number between zero and one, where zero is fully transparent and one is fully opaque. If the system does not support whole window transparency, this function always returns one.</para>

<para>The initial opacity value for newly created windows is one.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The opacity value of the specified window.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_transparency">Window transparency</link> </para>

<para><link linkend="_group__window_1ga62a784fe328f227727cbcd0d07480ff3">glfwSetWindowOpacity</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 705 of file window.c.</para>
<programlisting>706 {
707 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
708 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
709 
710 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(1.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>);
711 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a39aafbfbabc1ce37f3d5fa5ac7a8e1aa">getWindowOpacity</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
712 }
</programlisting>    </section><anchor xml:id="_group__window_1ga0076a8591ef7494d359730cf2250b45b"/>    <section>
    <title>glfwGetWindowPos()</title>
<indexterm><primary>glfwGetWindowPos</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowPos</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetWindowPos (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int * xpos, int * ypos)</computeroutput></para><para>

<para>Retrieves the position of the content area of the specified window. </para>
</para>

<para>This function retrieves the position, in screen coordinates, of the upper-left corner of the content area of the specified window.</para>

<para>Any or all of the position arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> position arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>Where to store the x-coordinate of the upper-left corner of the content area, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>Where to store the y-coordinate of the upper-left corner of the content area, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> and <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link> (see remarks).</para>

<para><formalpara><title>Remarks</title>

<para>@wayland There is no way for an application to retrieve the global position of its windows. This function will emit <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_pos">Window position</link> </para>

<para><link linkend="_group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0">glfwSetWindowPos</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 526 of file window.c.</para>
<programlisting>527 {
528 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
529 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
530 
531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xpos)
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*xpos&#32;=&#32;0;
533 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ypos)
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ypos&#32;=&#32;0;
535 
536 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
537 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a16500819e4a60a2593e59ec285c09c0b">getWindowPos</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;xpos,&#32;ypos);
538 }
</programlisting>    </section><anchor xml:id="_group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e"/>    <section>
    <title>glfwGetWindowSize()</title>
<indexterm><primary>glfwGetWindowSize</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowSize</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetWindowSize (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int * width, int * height)</computeroutput></para><para>

<para>Retrieves the size of the content area of the specified window. </para>
</para>

<para>This function retrieves the size, in screen coordinates, of the content area of the specified window. If you wish to retrieve the size of the framebuffer of the window in pixels, see <link linkend="_group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e">glfwGetFramebufferSize</link>.</para>

<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose size to retrieve. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>width</entry>
                                <entry>
<para>Where to store the width, in screen coordinates, of the content area, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>height</entry>
                                <entry>
<para>Where to store the height, in screen coordinates, of the content area, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_size">Window size</link> </para>

<para><link linkend="_group__window_1gae54d1f4915ded15e267ddd3f41496cd2">glfwSetWindowSize</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 553 of file window.c.</para>
<programlisting>554 {
555 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
556 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
557 
558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>)
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;=&#32;0;
560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;=&#32;0;
562 
563 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
564 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1abb483c8d581cba5199ac0f8bbd4776d5">getWindowSize</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>,&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>);
565 }
</programlisting>    </section><anchor xml:id="_group__window_1ga0a9ff3b4bf8589e9518e8816d06a8f50"/>    <section>
    <title>glfwGetWindowUserPointer()</title>
<indexterm><primary>glfwGetWindowUserPointer</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwGetWindowUserPointer</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>* glfwGetWindowUserPointer (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Returns the user pointer of the specified window. </para>
</para>

<para>This function returns the current value of the user-defined pointer of the specified window. The initial value is <computeroutput>NULL</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose pointer to return.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_userptr">User pointer</link> </para>

<para><link linkend="_group__window_1gacc9e68faee3c1763b54cd9bc405cf43e">glfwSetWindowUserPointer</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 979 of file window.c.</para>
<programlisting>980 {
981 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
982 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
983 
984 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;userPointer;
986 }
</programlisting>    </section><anchor xml:id="_group__window_1gaa17e287d521544bdeceafa09ac036e20"/>    <section>
    <title>glfwHideWindow()</title>
<indexterm><primary>glfwHideWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwHideWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwHideWindow (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Hides the specified window. </para>
</para>

<para>This function hides the specified window if it was previously visible. If the window is already hidden or is in full screen mode, this function does nothing.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to hide.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_hide">Window visibility</link> </para>

<para><link linkend="_group__window_1ga7945bcdff9e5e058cf36505d6873ed8c">glfwShowWindow</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 790 of file window.c.</para>
<programlisting>791 {
792 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
793 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
794 
795 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
796 
797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
799 
800 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3696989d7bf67837e6c4b742e4671bd1">hideWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
801 }
</programlisting>    </section><anchor xml:id="_group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3"/>    <section>
    <title>glfwIconifyWindow()</title>
<indexterm><primary>glfwIconifyWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwIconifyWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwIconifyWindow (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Iconifies the specified window. </para>
</para>

<para>This function iconifies (minimizes) the specified window if it was previously restored. If the window is already iconified, this function does nothing.</para>

<para>If the specified window is a full screen window, the original monitor resolution is restored until the window is restored.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to iconify.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland Once a window is iconified, <link linkend="_group__window_1ga1e29caf0b819f578b04db52fff17256c">glfwRestoreWindow</link> won’t be able to restore it. This is a design decision of the xdg-shell protocol.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_iconify">Window iconification</link> </para>

<para><link linkend="_group__window_1ga1e29caf0b819f578b04db52fff17256c">glfwRestoreWindow</link> </para>

<para><link linkend="_group__window_1ga4f825a55367d3fabde3d06e7f30128e8">glfwMaximizeWindow</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.1. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 733 of file window.c.</para>
<programlisting>734 {
735 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
736 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
737 
738 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
739 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aeaa84ce4827b8592d9d6cbc193de8b36">iconifyWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
740 }
</programlisting>    </section><anchor xml:id="_group__window_1ga4f825a55367d3fabde3d06e7f30128e8"/>    <section>
    <title>glfwMaximizeWindow()</title>
<indexterm><primary>glfwMaximizeWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwMaximizeWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwMaximizeWindow (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Maximizes the specified window. </para>
</para>

<para>This function maximizes the specified window if it was previously not maximized. If the window is already maximized, this function does nothing.</para>

<para>If the specified window is a full screen window, this function does nothing.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to maximize.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara>
<title>Thread Safety</title>
<para>This function may only be called from the main thread.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_iconify">Window iconification</link> </para>

<para><link linkend="_group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3">glfwIconifyWindow</link> </para>

<para><link linkend="_group__window_1ga1e29caf0b819f578b04db52fff17256c">glfwRestoreWindow</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in GLFW 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 751 of file window.c.</para>
<programlisting>752 {
753 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
754 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
755 
756 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
757 
758 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
760 
761 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a29de307aafa943d887e3dc6cc03b2197">maximizeWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
762 }
</programlisting>    </section><anchor xml:id="_group__window_1ga872d16e4c77f58c0436f356255920cfc"/>    <section>
    <title>glfwPollEvents()</title>
<indexterm><primary>glfwPollEvents</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwPollEvents</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwPollEvents (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Processes all pending events. </para>
</para>

<para>This function processes only those events that are already in the event queue and then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>

<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <link linkend="_window_guide_1window_refresh">window refresh callback</link> to redraw the contents of your window when necessary during such operations.</para>

<para>Do not assume that callbacks you set will <emphasis>only</emphasis> be called in response to event processing functions like this one. While it is necessary to poll for events, window systems that require GLFW to register callbacks of its own can pass events to GLFW in response to many window system function calls. GLFW will pass those events on to the application callbacks before returning.</para>

<para>Event processing is not required for joystick input to work.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@reentrancy This function must not be called from a callback.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1events">Event processing</link> </para>

<para><link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link> </para>

<para><link linkend="_group__window_1ga05223a0a4c5e50f10f289e60398153aa">glfwWaitEventsTimeout</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
<para>
Definition at line 1087 of file window.c.</para>
<programlisting>1088 {
1089 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
1090 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a437ced6fc51898b408498c6d4084a387">pollEvents</link>();
1091 }
</programlisting>    </section><anchor xml:id="_group__window_1gad6f6b997278c91c43b35970eb9713d7e"/>    <section>
    <title>glfwPostEmptyEvent()</title>
<indexterm><primary>glfwPostEmptyEvent</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwPostEmptyEvent</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwPostEmptyEvent (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Posts an empty event to the event queue. </para>
</para>

<para>This function posts an empty event from the current thread to the event queue, causing <link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link> or <link linkend="_group__window_1ga05223a0a4c5e50f10f289e60398153aa">glfwWaitEventsTimeout</link> to return.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1events">Event processing</link> </para>

<para><link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link> </para>

<para><link linkend="_group__window_1ga05223a0a4c5e50f10f289e60398153aa">glfwWaitEventsTimeout</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 1115 of file window.c.</para>
<programlisting>1116 {
1117 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
1118 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aa13bfe77a85ba1164cd2c32a67ccd242">postEmptyEvent</link>();
1119 }
</programlisting>    </section><anchor xml:id="_group__window_1gad0c9629abb49447bedd28080642b8538"/>    <section>
    <title>glfwRequestWindowAttention()</title>
<indexterm><primary>glfwRequestWindowAttention</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwRequestWindowAttention</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwRequestWindowAttention (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Requests user attention to the specified window. </para>
</para>

<para>This function requests user attention to the specified window. On platforms where this is not supported, attention is requested to the application as a whole.</para>

<para>Once the user has given attention, usually by focusing the window or application, the system will end the request automatically.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to request attention to.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@macos Attention is requested to the application as a whole, not the specific window.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_attention">Window attention request</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 780 of file window.c.</para>
<programlisting>781 {
782 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
783 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
784 
785 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
786 
787 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ac676cf1cf722269148c02a2f409dd678">requestWindowAttention</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
788 }
</programlisting>    </section><anchor xml:id="_group__window_1ga1e29caf0b819f578b04db52fff17256c"/>    <section>
    <title>glfwRestoreWindow()</title>
<indexterm><primary>glfwRestoreWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwRestoreWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwRestoreWindow (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Restores the specified window. </para>
</para>

<para>This function restores the specified window if it was previously iconified (minimized) or maximized. If the window is already restored, this function does nothing.</para>

<para>If the specified window is a full screen window, the resolution chosen for the window is restored on the selected monitor.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to restore.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_iconify">Window iconification</link> </para>

<para><link linkend="_group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3">glfwIconifyWindow</link> </para>

<para><link linkend="_group__window_1ga4f825a55367d3fabde3d06e7f30128e8">glfwMaximizeWindow</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.1. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 742 of file window.c.</para>
<programlisting>743 {
744 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
745 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
746 
747 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
748 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a47373deb086f784832dd62275015be8e">restoreWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
749 }
</programlisting>    </section><anchor xml:id="_group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0"/>    <section>
    <title>glfwSetFramebufferSizeCallback()</title>
<indexterm><primary>glfwSetFramebufferSizeCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetFramebufferSizeCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gae18026e294dde685ed2e5f759533144d">GLFWframebuffersizefun</link> glfwSetFramebufferSizeCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1gae18026e294dde685ed2e5f759533144d">GLFWframebuffersizefun</link> callback)</computeroutput></para><para>

<para>Sets the framebuffer resize callback for the specified window. </para>
</para>

<para>This function sets the framebuffer resize callback of the specified window, which is called when the framebuffer of the specified window is resized.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;width,&#32;int&#32;height)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1gae18026e294dde685ed2e5f759533144d">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_fbsize">Framebuffer size</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1065 of file window.c.</para>
<programlisting>1067 {
1068 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1069 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1070 
1071 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1072 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1gae18026e294dde685ed2e5f759533144d">GLFWframebuffersizefun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.fbsize,&#32;cbfun);
1073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1074 }
</programlisting>    </section><anchor xml:id="_group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac"/>    <section>
    <title>glfwSetWindowAspectRatio()</title>
<indexterm><primary>glfwSetWindowAspectRatio</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowAspectRatio</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowAspectRatio (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int numer, int denom)</computeroutput></para><para>

<para>Sets the aspect ratio of the specified window. </para>
</para>

<para>This function sets the required aspect ratio of the content area of the specified window. If the window is full screen, the aspect ratio only takes effect once it is made windowed. If the window is not resizable, this function does nothing.</para>

<para>The aspect ratio is specified as a numerator and a denominator and both values must be greater than zero. For example, the common 16:9 aspect ratio is specified as 16 and 9, respectively.</para>

<para>If the numerator and denominator is set to <computeroutput>GLFW_DONT_CARE</computeroutput> then the aspect ratio limit is disabled.</para>

<para>The aspect ratio is applied immediately to a windowed mode window and may cause it to be resized.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to set limits for. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>numer</entry>
                                <entry>
<para>The numerator of the desired aspect ratio, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>denom</entry>
                                <entry>
<para>The denominator of the desired aspect ratio, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>If you set size limits and an aspect ratio that conflict, the results are undefined.</para>

<para>@wayland The aspect ratio will not be applied until the window is actually resized, either by the user or by the compositor.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_sizelimits">Window size limits</link> </para>

<para><link linkend="_group__window_1ga8af814fc98d786d1de2505b40b707de8">glfwSetWindowSizeLimits</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 627 of file window.c.</para>
<programlisting>628 {
629 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
630 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
631 &#32;&#32;&#32;&#32;assert(numer&#32;!=&#32;0);
632 &#32;&#32;&#32;&#32;assert(denom&#32;!=&#32;0);
633 
634 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
635 
636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numer&#32;!=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>&#32;&amp;&amp;&#32;denom&#32;!=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>)
637 &#32;&#32;&#32;&#32;{
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numer&#32;&lt;=&#32;0&#32;||&#32;denom&#32;&lt;=&#32;0)
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;aspect&#32;ratio&#32;%i:%i&quot;</emphasis>,
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numer,&#32;denom);
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
645 &#32;&#32;&#32;&#32;}
646 
647 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;numer&#32;=&#32;numer;
648 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;denom&#32;=&#32;denom;
649 
650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor&#32;||&#32;!<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;resizable)
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
652 
653 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a1a5ae87518953ed9a5e18ff7511a55a8">setWindowAspectRatio</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;numer,&#32;denom);
654 }
</programlisting>    </section><anchor xml:id="_group__window_1gad39f43f07856efcf3d656426a9284c75"/>    <section>
    <title>glfwSetWindowAttrib()</title>
<indexterm><primary>glfwSetWindowAttrib</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowAttrib</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowAttrib (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int attrib, int value)</computeroutput></para><para>

<para>Sets an attribute of the specified window. </para>
</para>

<para>This function sets the value of an attribute of the specified window.</para>

<para>The supported attributes are <link linkend="_window_guide_1GLFW_DECORATED_attrib">GLFW_DECORATED</link>, <link linkend="_window_guide_1GLFW_RESIZABLE_attrib">GLFW_RESIZABLE</link>, <link linkend="_window_guide_1GLFW_FLOATING_attrib">GLFW_FLOATING</link>, <link linkend="_window_guide_1GLFW_AUTO_ICONIFY_attrib">GLFW_AUTO_ICONIFY</link> and <link linkend="_window_guide_1GLFW_FOCUS_ON_SHOW_attrib">GLFW_FOCUS_ON_SHOW</link>. <link linkend="_window_guide_1GLFW_MOUSE_PASSTHROUGH_attrib">GLFW_MOUSE_PASSTHROUGH</link></para>

<para>Some of these attributes are ignored for full screen windows. The new value will take effect if the window is later made windowed.</para>

<para>Some of these attributes are ignored for windowed mode windows. The new value will take effect if the window is later made full screen.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to set the attribute for. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>attrib</entry>
                                <entry>
<para>A supported window attribute. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>, <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>Calling <link linkend="_group__window_1ga1bb0c7e100418e284dbb800789c63d40">glfwGetWindowAttrib</link> will always return the latest value, even if that value is ignored by the current mode of the window.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_attribs">Window attributes</link> </para>

<para><link linkend="_group__window_1ga1bb0c7e100418e284dbb800789c63d40">glfwGetWindowAttrib</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 876 of file window.c.</para>
<programlisting>877 {
878 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
879 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
880 
881 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
882 
883 &#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
884 
885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(attrib)
886 &#32;&#32;&#32;&#32;{
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga9d9874fc928200136a6dcdad726aa252">GLFW_AUTO_ICONIFY</link>:
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;autoIconify&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
890 
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d">GLFW_RESIZABLE</link>:
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;resizable&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ac7bb2317058895df521f707da74a9d78">setWindowResizable</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
896 
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga21b854d36314c94d65aed84405b2f25e">GLFW_DECORATED</link>:
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;decorated&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ad399bfea6a8bda52b011fa5ad1e4b75b">setWindowDecorated</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
902 
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga7fb0be51407783b41adbf5bec0b09d80">GLFW_FLOATING</link>:
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;floating&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a6c7c9d5ca7c1a50229de8550e129b44d">setWindowFloating</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
908 
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafa94b1da34bfd6488c0d709761504dfc">GLFW_FOCUS_ON_SHOW</link>:
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;focusOnShow&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
912 
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga88981797d29800808ec242274ab5c03a">GLFW_MOUSE_PASSTHROUGH</link>:
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mousePassthrough&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a7d6d01a90ce3f4b04ba0954aedc9ab9f">setWindowMousePassthrough</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
917 &#32;&#32;&#32;&#32;}
918 
919 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;attribute&#32;0x%08X&quot;</emphasis>,&#32;attrib);
920 }
</programlisting>    </section><anchor xml:id="_group__window_1ga693d778815971a06e1a5a7bcdeff3d36"/>    <section>
    <title>glfwSetWindowCloseCallback()</title>
<indexterm><primary>glfwSetWindowCloseCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowCloseCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gabf859b936d80961b7d39013a9694cc3e">GLFWwindowclosefun</link> glfwSetWindowCloseCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1gabf859b936d80961b7d39013a9694cc3e">GLFWwindowclosefun</link> callback)</computeroutput></para><para>

<para>Sets the close callback for the specified window. </para>
</para>

<para>This function sets the close callback of the specified window, which is called when the user attempts to close the window, for example by clicking the close widget in the title bar.</para>

<para>The close flag is set before this callback is called, but you can modify it at any time with <link linkend="_group__window_1ga1cadeda7a1e2f224e06a8415d30741aa">glfwSetWindowShouldClose</link>.</para>

<para>The close callback is not triggered by <link linkend="_group__window_1ga806747476b7247d292be3711c323ea10">glfwDestroyWindow</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1gabf859b936d80961b7d39013a9694cc3e">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@macos Selecting Quit from the application menu will trigger the close callback for all windows.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_close">Window closing and close flag</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.5. @glfw3 Added window handle parameter and return value. </para>
</formalpara>
</para>
<para>
Definition at line 1010 of file window.c.</para>
<programlisting>1012 {
1013 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1014 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1015 
1016 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1017 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1gabf859b936d80961b7d39013a9694cc3e">GLFWwindowclosefun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.close,&#32;cbfun);
1018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1019 }
</programlisting>    </section><anchor xml:id="_group__window_1gac6edcddbe785445d0d2b7b7be500836e"/>    <section>
    <title>glfwSetWindowContentScaleCallback()</title>
<indexterm><primary>glfwSetWindowContentScaleCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowContentScaleCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e">GLFWwindowcontentscalefun</link> glfwSetWindowContentScaleCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e">GLFWwindowcontentscalefun</link> callback)</computeroutput></para><para>

<para>Sets the window content scale callback for the specified window. </para>
</para>

<para>This function sets the window content scale callback of the specified window, which is called when the content scale of the specified window changes.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;float&#32;xscale,&#32;float&#32;yscale)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_scale">Window content scale</link> </para>

<para><link linkend="_group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee">glfwGetWindowContentScale</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1076 of file window.c.</para>
<programlisting>1078 {
1079 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1080 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1081 
1082 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1083 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1ga77f288a2d04bb3c77c7d9615d08cf70e">GLFWwindowcontentscalefun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.scale,&#32;cbfun);
1084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1085 }
</programlisting>    </section><anchor xml:id="_group__window_1gacce1c4dd273b5c4c60b05599f8725b4e"/>    <section>
    <title>glfwSetWindowFocusCallback()</title>
<indexterm><primary>glfwSetWindowFocusCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowFocusCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46">GLFWwindowfocusfun</link> glfwSetWindowFocusCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46">GLFWwindowfocusfun</link> callback)</computeroutput></para><para>

<para>Sets the focus callback for the specified window. </para>
</para>

<para>This function sets the focus callback of the specified window, which is called when the window gains or loses input focus.</para>

<para>After the focus callback is called for a window that lost input focus, synthetic key and mouse button release events will be generated for all such that had been pressed. For more information, see <link linkend="_group__input_1gaa4cbcb81b939b8800e44cea971ddae47">glfwSetKeyCallback</link> and <link linkend="_group__input_1gab8f17646f43cdca14e5095512618fdf6">glfwSetMouseButtonCallback</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;focused)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_focus">Window input focus</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1032 of file window.c.</para>
<programlisting>1034 {
1035 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1036 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1037 
1038 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1039 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1gabc58c47e9d93f6eb1862d615c3680f46">GLFWwindowfocusfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.focus,&#32;cbfun);
1040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1041 }
</programlisting>    </section><anchor xml:id="_group__window_1ga182987a1a62a41a924842b9473d560df"/>    <section>
    <title>glfwSetWindowIcon()</title>
<indexterm><primary>glfwSetWindowIcon</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowIcon</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowIcon (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int count, const <link linkend="_struct_g_l_f_wimage">GLFWimage</link> * images)</computeroutput></para><para>

<para>Sets the icon for the specified window. </para>
</para>

<para>This function sets the icon of the specified window. If passed an array of candidate images, those of or closest to the sizes desired by the system are selected. If no images are specified, the window reverts to its default icon.</para>

<para>The pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight bits per channel with the red channel first. They are arranged canonically as packed sequential rows, starting from the top-left corner.</para>

<para>The desired image sizes varies depending on platform and system settings. The selected images will be rescaled as needed. Good sizes include 16x16, 32x32 and 48x48.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose icon to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>count</entry>
                                <entry>
<para>The number of images in the specified array, or zero to revert to the default window icon. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>images</entry>
                                <entry>
<para>The images to create the icon from. This is ignored if count is zero.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> and <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link> (see remarks).</para>

<para>@pointer_lifetime The specified image data is copied before this function returns.</para>

<para><formalpara><title>Remarks</title>

<para>@macos Regular windows do not have icons on macOS. This function will emit <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link>. The dock icon will be the same as the application bundle&apos;s icon. For more information on bundles, see the <link xlink:href="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">Bundle Programming Guide</link> in the Mac Developer Library.</para>

<para>@wayland There is no existing protocol to change an icon, the window will thus inherit the one defined in the application&apos;s desktop file. This function will emit <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_icon">Window icon</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 514 of file window.c.</para>
<programlisting>516 {
517 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
518 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
519 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;&gt;=&#32;0);
520 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;==&#32;0&#32;||&#32;images&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
521 
522 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
523 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a270451a8675f9d950a3871ca8d5fe06e">setWindowIcon</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>,&#32;images);
524 }
</programlisting>    </section><anchor xml:id="_group__window_1ga3e9f355edb6b9247149ddea2335eda69"/>    <section>
    <title>glfwSetWindowIconifyCallback()</title>
<indexterm><primary>glfwSetWindowIconifyCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowIconifyCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f">GLFWwindowiconifyfun</link> glfwSetWindowIconifyCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f">GLFWwindowiconifyfun</link> callback)</computeroutput></para><para>

<para>Sets the iconify callback for the specified window. </para>
</para>

<para>This function sets the iconification callback of the specified window, which is called when the window is iconified or restored.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;iconified)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_iconify">Window iconification</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1043 of file window.c.</para>
<programlisting>1045 {
1046 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1047 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1048 
1049 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1050 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1ga35c658cccba236f26e7adee0e25f6a4f">GLFWwindowiconifyfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.iconify,&#32;cbfun);
1051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1052 }
</programlisting>    </section><anchor xml:id="_group__window_1gae77b3960dcd40514fb7b2b8a6eb98137"/>    <section>
    <title>glfwSetWindowMaximizeCallback()</title>
<indexterm><primary>glfwSetWindowMaximizeCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowMaximizeCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga3017196fdaec33ac3e095765176c2a90">GLFWwindowmaximizefun</link> glfwSetWindowMaximizeCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1ga3017196fdaec33ac3e095765176c2a90">GLFWwindowmaximizefun</link> callback)</computeroutput></para><para>

<para>Sets the maximize callback for the specified window. </para>
</para>

<para>This function sets the maximization callback of the specified window, which is called when the window is maximized or restored.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;maximized)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1ga3017196fdaec33ac3e095765176c2a90">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_maximize">Window maximization</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1054 of file window.c.</para>
<programlisting>1056 {
1057 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1058 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1059 
1060 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1061 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1ga3017196fdaec33ac3e095765176c2a90">GLFWwindowmaximizefun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.maximize,&#32;cbfun);
1062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1063 }
</programlisting>    </section><anchor xml:id="_group__window_1ga12fabf78575e59c00f822f323ae0b6ae"/>    <section>
    <title>glfwSetWindowMonitor()</title>
<indexterm><primary>glfwSetWindowMonitor</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowMonitor</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowMonitor (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, int xpos, int ypos, int width, int height, int refreshRate)</computeroutput></para><para>

<para>Sets the mode, monitor, video mode and placement of a window. </para>
</para>

<para>This function sets the monitor that the window uses for full screen mode or, if the monitor is <computeroutput>NULL</computeroutput>, makes it windowed mode.</para>

<para>When setting a monitor, this function updates the width, height and refresh rate of the desired video mode and switches to the video mode closest to it. The window position is ignored when setting a monitor.</para>

<para>When the monitor is <computeroutput>NULL</computeroutput>, the position, width and height are used to place the window content area. The refresh rate is ignored when no monitor is specified.</para>

<para>If you only wish to update the resolution of a full screen window or the size of a windowed mode window, see <link linkend="_group__window_1gae54d1f4915ded15e267ddd3f41496cd2">glfwSetWindowSize</link>.</para>

<para>When a window transitions from full screen to windowed mode, this function restores any previous window settings such as whether it is decorated, floating, resizable, has size or aspect ratio limits, etc.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose monitor, size or video mode to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The desired monitor, or <computeroutput>NULL</computeroutput> to set windowed mode. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>The desired x-coordinate of the upper-left corner of the content area. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>The desired y-coordinate of the upper-left corner of the content area. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>width</entry>
                                <entry>
<para>The desired with, in screen coordinates, of the content area or video mode. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>height</entry>
                                <entry>
<para>The desired height, in screen coordinates, of the content area or video mode. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>refreshRate</entry>
                                <entry>
<para>The desired refresh rate, in Hz, of the video mode, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>The OpenGL or OpenGL ES context will not be destroyed or otherwise affected by any resizing or mode switching, although you may need to update your viewport if the framebuffer size has changed.</para>

<para>@wayland The desired window position is ignored, as there is no way for an application to set this property.</para>

<para>@wayland Setting the window to full screen will not attempt to change the mode, no matter what the requested size or refresh rate.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_monitor">Window monitor</link> </para>

<para><link linkend="_window_guide_1window_full_screen">Full screen windows</link> </para>

<para><link linkend="_group__window_1gaf1525cb3bccd5789c702cc9676ef3403">glfwGetWindowMonitor</link> </para>

<para><link linkend="_group__window_1gae54d1f4915ded15e267ddd3f41496cd2">glfwSetWindowSize</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 931 of file window.c.</para>
<programlisting>936 {
937 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;wh;
938 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;mh;
939 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
940 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;&gt;=&#32;0);
941 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;&gt;=&#32;0);
942 
943 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
944 
945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;&lt;=&#32;0&#32;||&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;&lt;=&#32;0)
946 &#32;&#32;&#32;&#32;{
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;size&#32;%ix%i&quot;</emphasis>,
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>,&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>);
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
951 &#32;&#32;&#32;&#32;}
952 
953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(refreshRate&#32;&lt;&#32;0&#32;&amp;&amp;&#32;refreshRate&#32;!=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>)
954 &#32;&#32;&#32;&#32;{
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;refresh&#32;rate&#32;%i&quot;</emphasis>,
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refreshRate);
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
959 &#32;&#32;&#32;&#32;}
960 
961 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.width&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>;
962 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.height&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>;
963 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.refreshRate&#32;=&#32;refreshRate;
964 
965 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a004d98bc2e1f6fa105c09f63d42850cb">setWindowMonitor</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;monitor,
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xpos,&#32;ypos,&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>,&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>,
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refreshRate);
968 }
</programlisting>    </section><anchor xml:id="_group__window_1ga62a784fe328f227727cbcd0d07480ff3"/>    <section>
    <title>glfwSetWindowOpacity()</title>
<indexterm><primary>glfwSetWindowOpacity</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowOpacity</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowOpacity (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, float opacity)</computeroutput></para><para>

<para>Sets the opacity of the whole window. </para>
</para>

<para>This function sets the opacity of the window, including any decorations.</para>

<para>The opacity (or alpha) value is a positive finite number between zero and one, where zero is fully transparent and one is fully opaque.</para>

<para>The initial opacity value for newly created windows is one.</para>

<para>A window created with framebuffer transparency may not use whole window transparency. The results of doing this are undefined.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to set the opacity for. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>opacity</entry>
                                <entry>
<para>The desired opacity of the specified window.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> and <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link> (see remarks).</para>

<para><formalpara><title>Remarks</title>

<para>@wayland There is no way to set an opacity factor for a window. This function will emit <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_transparency">Window transparency</link> </para>

<para><link linkend="_group__window_1gad124d57a1c1c519f60c9765cd0c2a89c">glfwGetWindowOpacity</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 714 of file window.c.</para>
<programlisting>715 {
716 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
717 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
718 &#32;&#32;&#32;&#32;assert(opacity&#32;==&#32;opacity);
719 &#32;&#32;&#32;&#32;assert(opacity&#32;&gt;=&#32;0.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>);
720 &#32;&#32;&#32;&#32;assert(opacity&#32;&lt;=&#32;1.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>);
721 
722 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
723 
724 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opacity&#32;!=&#32;opacity&#32;||&#32;opacity&#32;&lt;&#32;0.f&#32;||&#32;opacity&#32;&gt;&#32;1.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>)
725 &#32;&#32;&#32;&#32;{
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;opacity&#32;%f&quot;</emphasis>,&#32;opacity);
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
728 &#32;&#32;&#32;&#32;}
729 
730 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aa1f9a2b435369d52e9fb7bef0c255fbe">setWindowOpacity</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;opacity);
731 }
</programlisting>    </section><anchor xml:id="_group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0"/>    <section>
    <title>glfwSetWindowPos()</title>
<indexterm><primary>glfwSetWindowPos</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowPos</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowPos (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int xpos, int ypos)</computeroutput></para><para>

<para>Sets the position of the content area of the specified window. </para>
</para>

<para>This function sets the position, in screen coordinates, of the upper-left corner of the content area of the specified windowed mode window. If the window is a full screen window, this function does nothing.</para>

<para><emphasis role="bold">Do not use this function</emphasis> to move an already visible window unless you have very good reasons for doing so, as it will confuse and annoy the user.</para>

<para>The window manager may put limits on what positions are allowed. GLFW cannot and should not override these limits.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>The x-coordinate of the upper-left corner of the content area. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>The y-coordinate of the upper-left corner of the content area.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> and <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link> (see remarks).</para>

<para><formalpara><title>Remarks</title>

<para>@wayland There is no way for an application to set the global position of its windows. This function will emit <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_pos">Window position</link> </para>

<para><link linkend="_group__window_1ga0076a8591ef7494d359730cf2250b45b">glfwGetWindowPos</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 540 of file window.c.</para>
<programlisting>541 {
542 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
543 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
544 
545 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
546 
547 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
549 
550 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a420f62d3b13da1fba49e60f2be197fb9">setWindowPos</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;xpos,&#32;ypos);
551 }
</programlisting>    </section><anchor xml:id="_group__window_1ga517b6e80b982efa06e9b8ca89d4a75a6"/>    <section>
    <title>glfwSetWindowPosCallback()</title>
<indexterm><primary>glfwSetWindowPosCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowPosCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9">GLFWwindowposfun</link> glfwSetWindowPosCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9">GLFWwindowposfun</link> callback)</computeroutput></para><para>

<para>Sets the position callback for the specified window. </para>
</para>

<para>This function sets the position callback of the specified window, which is called when the window is moved. The callback is provided with the position, in screen coordinates, of the upper-left corner of the content area of the window.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;xpos,&#32;int&#32;ypos)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland This callback will never be called, as there is no way for an application to know its global position.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_pos">Window position</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 988 of file window.c.</para>
<programlisting>990 {
991 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
992 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
993 
994 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
995 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1gabe287973a21a8f927cde4db06b8dcbe9">GLFWwindowposfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.pos,&#32;cbfun);
996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
997 }
</programlisting>    </section><anchor xml:id="_group__window_1ga62bfa902c07a03b8ad9be37da31a4be7"/>    <section>
    <title>glfwSetWindowRefreshCallback()</title>
<indexterm><primary>glfwSetWindowRefreshCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowRefreshCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga431663a1427d2eb3a273bc398b6737b5">GLFWwindowrefreshfun</link> glfwSetWindowRefreshCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1ga431663a1427d2eb3a273bc398b6737b5">GLFWwindowrefreshfun</link> callback)</computeroutput></para><para>

<para>Sets the refresh callback for the specified window. </para>
</para>

<para>This function sets the refresh callback of the specified window, which is called when the content area of the window needs to be redrawn, for example if the window has been exposed after having been covered by another window.</para>

<para>On compositing window systems such as Aero, Compiz, Aqua or Wayland, where the window contents are saved off-screen, this callback may be called only very infrequently or never at all.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window);
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1ga431663a1427d2eb3a273bc398b6737b5">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_refresh">Window damage and refresh</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.5. @glfw3 Added window handle parameter and return value. </para>
</formalpara>
</para>
<para>
Definition at line 1021 of file window.c.</para>
<programlisting>1023 {
1024 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1025 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1026 
1027 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1028 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1ga431663a1427d2eb3a273bc398b6737b5">GLFWwindowrefreshfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.refresh,&#32;cbfun);
1029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1030 }
</programlisting>    </section><anchor xml:id="_group__window_1ga1cadeda7a1e2f224e06a8415d30741aa"/>    <section>
    <title>glfwSetWindowShouldClose()</title>
<indexterm><primary>glfwSetWindowShouldClose</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowShouldClose</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowShouldClose (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int value)</computeroutput></para><para>

<para>Sets the close flag of the specified window. </para>
</para>

<para>This function sets the value of the close flag of the specified window. This can be used to override the user&apos;s attempt to close the window, or to signal that it should be closed.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose flag to change. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>The new value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_close">Window closing and close flag</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 495 of file window.c.</para>
<programlisting>496 {
497 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
498 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
499 
500 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
501 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;shouldClose&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
502 }
</programlisting>    </section><anchor xml:id="_group__window_1gae54d1f4915ded15e267ddd3f41496cd2"/>    <section>
    <title>glfwSetWindowSize()</title>
<indexterm><primary>glfwSetWindowSize</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowSize</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowSize (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int width, int height)</computeroutput></para><para>

<para>Sets the size of the content area of the specified window. </para>
</para>

<para>This function sets the size, in screen coordinates, of the content area of the specified window.</para>

<para>For full screen windows, this function updates the resolution of its desired video mode and switches to the video mode closest to it, without affecting the window&apos;s context. As the context is unaffected, the bit depths of the framebuffer remain unchanged.</para>

<para>If you wish to update the refresh rate of the desired video mode in addition to its resolution, see <link linkend="_group__window_1ga12fabf78575e59c00f822f323ae0b6ae">glfwSetWindowMonitor</link>.</para>

<para>The window manager may put limits on what sizes are allowed. GLFW cannot and should not override these limits.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to resize. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>width</entry>
                                <entry>
<para>The desired width, in screen coordinates, of the window content area. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>height</entry>
                                <entry>
<para>The desired height, in screen coordinates, of the window content area.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland A full screen window will not attempt to change the mode, no matter what the requested size.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_size">Window size</link> </para>

<para><link linkend="_group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e">glfwGetWindowSize</link> </para>

<para><link linkend="_group__window_1ga12fabf78575e59c00f822f323ae0b6ae">glfwSetWindowMonitor</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 567 of file window.c.</para>
<programlisting>568 {
569 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
570 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
571 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;&gt;=&#32;0);
572 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;&gt;=&#32;0);
573 
574 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
575 
576 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.width&#32;&#32;=&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>;
577 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;videoMode.height&#32;=&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>;
578 
579 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a89251f3731226c32d4d0b6d62d0471ad">setWindowSize</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>,&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>);
580 }
</programlisting>    </section><anchor xml:id="_group__window_1gab0754f8d5c7c4d5cae2a9937a0e00bc5"/>    <section>
    <title>glfwSetWindowSizeCallback()</title>
<indexterm><primary>glfwSetWindowSizeCallback</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowSizeCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1gaec0282944bb810f6f3163ec02da90350">GLFWwindowsizefun</link> glfwSetWindowSizeCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__window_1gaec0282944bb810f6f3163ec02da90350">GLFWwindowsizefun</link> callback)</computeroutput></para><para>

<para>Sets the size callback for the specified window. </para>
</para>

<para>This function sets the size callback of the specified window, which is called when the window is resized. The callback is provided with the size, in screen coordinates, of the content area of the window.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;width,&#32;int&#32;height)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__window_1gaec0282944bb810f6f3163ec02da90350">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_size">Window size</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter and return value. </para>
</formalpara>
</para>
<para>
Definition at line 999 of file window.c.</para>
<programlisting>1001 {
1002 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
1003 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1004 
1005 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1006 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__window_1gaec0282944bb810f6f3163ec02da90350">GLFWwindowsizefun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.size,&#32;cbfun);
1007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1008 }
</programlisting>    </section><anchor xml:id="_group__window_1ga8af814fc98d786d1de2505b40b707de8"/>    <section>
    <title>glfwSetWindowSizeLimits()</title>
<indexterm><primary>glfwSetWindowSizeLimits</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowSizeLimits</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowSizeLimits (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int minwidth, int minheight, int maxwidth, int maxheight)</computeroutput></para><para>

<para>Sets the size limits of the specified window. </para>
</para>

<para>This function sets the size limits of the content area of the specified window. If the window is full screen, the size limits only take effect once it is made windowed. If the window is not resizable, this function does nothing.</para>

<para>The size limits are applied immediately to a windowed mode window and may cause it to be resized.</para>

<para>The maximum dimensions must be greater than or equal to the minimum dimensions and all must be greater than or equal to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to set limits for. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>minwidth</entry>
                                <entry>
<para>The minimum width, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>minheight</entry>
                                <entry>
<para>The minimum height, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>maxwidth</entry>
                                <entry>
<para>The maximum width, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>maxheight</entry>
                                <entry>
<para>The maximum height, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>If you set size limits and an aspect ratio that conflict, the results are undefined.</para>

<para>@wayland The size limits will not be applied until the window is actually resized, either by the user or by the compositor.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_sizelimits">Window size limits</link> </para>

<para><link linkend="_group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac">glfwSetWindowAspectRatio</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 582 of file window.c.</para>
<programlisting>585 {
586 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
587 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
588 
589 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
590 
591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minwidth&#32;!=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>&#32;&amp;&amp;&#32;minheight&#32;!=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>)
592 &#32;&#32;&#32;&#32;{
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minwidth&#32;&lt;&#32;0&#32;||&#32;minheight&#32;&lt;&#32;0)
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;minimum&#32;size&#32;%ix%i&quot;</emphasis>,
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minwidth,&#32;minheight);
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
600 &#32;&#32;&#32;&#32;}
601 
602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(maxwidth&#32;!=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>&#32;&amp;&amp;&#32;maxheight&#32;!=&#32;<link linkend="_glfw3_8h_1a7a2edf2c18446833d27d07f1b7f3d571">GLFW_DONT_CARE</link>)
603 &#32;&#32;&#32;&#32;{
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(maxwidth&#32;&lt;&#32;0&#32;||&#32;maxheight&#32;&lt;&#32;0&#32;||
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxwidth&#32;&lt;&#32;minwidth&#32;||&#32;maxheight&#32;&lt;&#32;minheight)
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;maximum&#32;size&#32;%ix%i&quot;</emphasis>,
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxwidth,&#32;maxheight);
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
612 &#32;&#32;&#32;&#32;}
613 
614 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;minwidth&#32;&#32;=&#32;minwidth;
615 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;minheight&#32;=&#32;minheight;
616 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;maxwidth&#32;&#32;=&#32;maxwidth;
617 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;maxheight&#32;=&#32;maxheight;
618 
619 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor&#32;||&#32;!<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;resizable)
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
621 
622 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1af60c261088283957e87fba951a443a7a">setWindowSizeLimits</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minwidth,&#32;minheight,
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxwidth,&#32;maxheight);
625 }
</programlisting>    </section><anchor xml:id="_group__window_1ga861ed3414ab8120e2f74151a666ed1dc"/>    <section>
    <title>glfwSetWindowTitle()</title>
<indexterm><primary>glfwSetWindowTitle</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowTitle</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowTitle (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, const char * title)</computeroutput></para><para>

<para>Sets the title of the specified window. </para>
</para>

<para>This function sets the window title, encoded as UTF-8, of the specified window.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose title to change. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>title</entry>
                                <entry>
<para>The UTF-8 encoded window title.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@macos The window title will not be updated until the next time you process events.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_title">Window title</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 504 of file window.c.</para>
<programlisting>505 {
506 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
507 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
508 &#32;&#32;&#32;&#32;assert(title&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
509 
510 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
511 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a0d9563fe0ccc454b6137d7915daf7811">setWindowTitle</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;title);
512 }
</programlisting>    </section><anchor xml:id="_group__window_1gacc9e68faee3c1763b54cd9bc405cf43e"/>    <section>
    <title>glfwSetWindowUserPointer()</title>
<indexterm><primary>glfwSetWindowUserPointer</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSetWindowUserPointer</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetWindowUserPointer (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * pointer)</computeroutput></para><para>

<para>Sets the user pointer of the specified window. </para>
</para>

<para>This function sets the user-defined pointer of the specified window. The current value is retained until the window is destroyed. The initial value is <computeroutput>NULL</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose pointer to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pointer</entry>
                                <entry>
<para>The new value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_userptr">User pointer</link> </para>

<para><link linkend="_group__window_1ga0a9ff3b4bf8589e9518e8816d06a8f50">glfwGetWindowUserPointer</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 970 of file window.c.</para>
<programlisting>971 {
972 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
973 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
974 
975 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
976 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;userPointer&#32;=&#32;<link linkend="_glad_8h_1a8e06a460fd89ba3a95ce49119ef7aab2">pointer</link>;
977 }
</programlisting>    </section><anchor xml:id="_group__window_1ga7945bcdff9e5e058cf36505d6873ed8c"/>    <section>
    <title>glfwShowWindow()</title>
<indexterm><primary>glfwShowWindow</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwShowWindow</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwShowWindow (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Makes the specified window visible. </para>
</para>

<para>This function makes the specified window visible if it was previously hidden. If the window is already visible or is in full screen mode, this function does nothing.</para>

<para>By default, windowed mode windows are focused when shown Set the <link linkend="_window_guide_1GLFW_FOCUS_ON_SHOW_hint">GLFW_FOCUS_ON_SHOW</link> window hint to change this behavior for all newly created windows, or change the behavior for an existing window with <link linkend="_group__window_1gad39f43f07856efcf3d656426a9284c75">glfwSetWindowAttrib</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to make visible.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland Because Wayland wants every frame of the desktop to be complete, this function does not immediately make the window visible. Instead it will become visible the next time the window framebuffer is updated after this call.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_hide">Window visibility</link> </para>

<para><link linkend="_group__window_1gaa17e287d521544bdeceafa09ac036e20">glfwHideWindow</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 764 of file window.c.</para>
<programlisting>765 {
766 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
767 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
768 
769 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
770 
771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;monitor)
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
773 
774 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1acf0479b2c98868d61b54087b4b6de1cd">showWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
775 
776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;focusOnShow)
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a371fdd823fe2e2c448627ec8ac8d00c9">focusWindow</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
778 }
</programlisting>    </section><anchor xml:id="_group__window_1gafb827800eedbfcbc97b1e5408df668d7"/>    <section>
    <title>glfwSwapBuffers()</title>
<indexterm><primary>glfwSwapBuffers</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwSwapBuffers</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSwapBuffers (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Swaps the front and back buffers of the specified window. </para>
</para>

<para>This function swaps the front and back buffers of the specified window when rendering with OpenGL or OpenGL ES. If the swap interval is greater than zero, the GPU driver waits the specified number of screen updates before swapping the buffers.</para>

<para>The specified window must have an OpenGL or OpenGL ES context. Specifying a window without a context will generate a <link linkend="_group__errors_1gacff24d2757da752ae4c80bf452356487">GLFW_NO_WINDOW_CONTEXT</link> error.</para>

<para>This function does not apply to Vulkan. If you are rendering with Vulkan, see <computeroutput>vkQueuePresentKHR</computeroutput> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose buffers to swap.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gacff24d2757da752ae4c80bf452356487">GLFW_NO_WINDOW_CONTEXT</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para><emphasis role="bold">EGL:</emphasis> The context of the specified window must be current on the calling thread.</para>
</formalpara>
@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1buffer_swap">Buffer swapping</link> </para>

<para><link linkend="_group__context_1ga12a595c06947cec4967c6e1f14210a8a">glfwSwapInterval</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 639 of file context.c.</para>
<programlisting>640 {
641 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
642 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
643 
644 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
645 
646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.client&#32;==&#32;<link linkend="_glfw3_8h_1a8f6dcdc968d214ff14779564f1389264">GLFW_NO_API</link>)
647 &#32;&#32;&#32;&#32;{
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gacff24d2757da752ae4c80bf452356487">GLFW_NO_WINDOW_CONTEXT</link>,
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;swap&#32;buffers&#32;of&#32;a&#32;window&#32;that&#32;has&#32;no&#32;OpenGL&#32;or&#32;OpenGL&#32;ES&#32;context&quot;</emphasis>);
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
651 &#32;&#32;&#32;&#32;}
652 
653 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;context.swapBuffers(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
654 }
</programlisting>    </section><anchor xml:id="_group__window_1ga6e042d05823c11e11c7339b81a237738"/>    <section>
    <title>glfwWaitEvents()</title>
<indexterm><primary>glfwWaitEvents</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwWaitEvents</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwWaitEvents (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Waits until events are queued and processes them. </para>
</para>

<para>This function puts the calling thread to sleep until at least one event is available in the event queue. Once one or more events are available, it behaves exactly like <link linkend="_group__window_1ga872d16e4c77f58c0436f356255920cfc">glfwPollEvents</link>, i.e. the events in the queue are processed and the function then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>

<para>Since not all events are associated with callbacks, this function may return without a callback having been called even if you are monitoring all callbacks.</para>

<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <link linkend="_window_guide_1window_refresh">window refresh callback</link> to redraw the contents of your window when necessary during such operations.</para>

<para>Do not assume that callbacks you set will <emphasis>only</emphasis> be called in response to event processing functions like this one. While it is necessary to poll for events, window systems that require GLFW to register callbacks of its own can pass events to GLFW in response to many window system function calls. GLFW will pass those events on to the application callbacks before returning.</para>

<para>Event processing is not required for joystick input to work.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@reentrancy This function must not be called from a callback.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1events">Event processing</link> </para>

<para><link linkend="_group__window_1ga872d16e4c77f58c0436f356255920cfc">glfwPollEvents</link> </para>

<para><link linkend="_group__window_1ga05223a0a4c5e50f10f289e60398153aa">glfwWaitEventsTimeout</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.5. </para>
</formalpara>
</para>
<para>
Definition at line 1093 of file window.c.</para>
<programlisting>1094 {
1095 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
1096 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ac1099f96777ccbf10196956606d6a95f">waitEvents</link>();
1097 }
</programlisting>    </section><anchor xml:id="_group__window_1ga05223a0a4c5e50f10f289e60398153aa"/>    <section>
    <title>glfwWaitEventsTimeout()</title>
<indexterm><primary>glfwWaitEventsTimeout</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwWaitEventsTimeout</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwWaitEventsTimeout (double timeout)</computeroutput></para><para>

<para>Waits with timeout until events are queued and processes them. </para>
</para>

<para>This function puts the calling thread to sleep until at least one event is available in the event queue, or until the specified timeout is reached. If one or more events are available, it behaves exactly like <link linkend="_group__window_1ga872d16e4c77f58c0436f356255920cfc">glfwPollEvents</link>, i.e. the events in the queue are processed and the function then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>

<para>The timeout value must be a positive finite number.</para>

<para>Since not all events are associated with callbacks, this function may return without a callback having been called even if you are monitoring all callbacks.</para>

<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <link linkend="_window_guide_1window_refresh">window refresh callback</link> to redraw the contents of your window when necessary during such operations.</para>

<para>Do not assume that callbacks you set will <emphasis>only</emphasis> be called in response to event processing functions like this one. While it is necessary to poll for events, window systems that require GLFW to register callbacks of its own can pass events to GLFW in response to many window system function calls. GLFW will pass those events on to the application callbacks before returning.</para>

<para>Event processing is not required for joystick input to work.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>timeout</entry>
                                <entry>
<para>The maximum amount of time, in seconds, to wait.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@reentrancy This function must not be called from a callback.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1events">Event processing</link> </para>

<para><link linkend="_group__window_1ga872d16e4c77f58c0436f356255920cfc">glfwPollEvents</link> </para>

<para><link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 1099 of file window.c.</para>
<programlisting>1100 {
1101 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
1102 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;==&#32;<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>);
1103 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;&gt;=&#32;0.0);
1104 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;&lt;=&#32;DBL_MAX);
1105 
1106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;!=&#32;<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;||&#32;<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout &lt; 0.0 || timeout &gt;</link>&#32;DBL_MAX)
1107 &#32;&#32;&#32;&#32;{
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;time&#32;%f&quot;</emphasis>,&#32;<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>);
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1110 &#32;&#32;&#32;&#32;}
1111 
1112 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a6152f4bedbf597c9e9a0aa3d7a828270">waitEventsTimeout</link>(<link linkend="_glad_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>);
1113 }
</programlisting>    </section><anchor xml:id="_group__window_1ga69c40728499720bef8a49aa925ea0efa"/>    <section>
    <title>glfwWindowHint()</title>
<indexterm><primary>glfwWindowHint</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwWindowHint</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwWindowHint (int hint, int value)</computeroutput></para><para>

<para>Sets the specified window hint to the desired value. </para>
</para>

<para>This function sets hints for the next call to <link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link>. The hints, once set, retain their values until changed by a call to this function or <link linkend="_group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4">glfwDefaultWindowHints</link>, or until the library is terminated.</para>

<para>Only integer value hints can be set with this function. String value hints are set with <link linkend="_group__window_1ga3c2270562d7ba13d92680ba1090adafe">glfwWindowHintString</link>.</para>

<para>This function does not check whether the specified hint values are valid. If you set hints to invalid values this will instead be reported by the next call to <link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link>.</para>

<para>Some hints are platform specific. These may be set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>hint</entry>
                                <entry>
<para>The <link linkend="_window_guide_1window_hints">window hint</link> to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>The new value of the window hint.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_hints">Window creation hints</link> </para>

<para><link linkend="_group__window_1ga3c2270562d7ba13d92680ba1090adafe">glfwWindowHintString</link> </para>

<para><link linkend="_group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4">glfwDefaultWindowHints</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwOpenWindowHint</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 294 of file window.c.</para>
<programlisting>295 {
296 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
297 
298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(hint)
299 &#32;&#32;&#32;&#32;{
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gaf78ed8e417dbcc1e354906cc2708c982">GLFW_RED_BITS</link>:
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1ab9a8f50cbc9b0c6e1ad230e411797f44">redBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafba3b72638c914e5fb8a237dd4c50d4d">GLFW_GREEN_BITS</link>:
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1af19c4a4e81f5e852ebfbfdc5986610ab">greenBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gab292ea403db6d514537b515311bf9ae3">GLFW_BLUE_BITS</link>:
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1aff797f80ccb99126ce88f696f745f6e5">blueBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafed79a3f468997877da86c449bd43e8c">GLFW_ALPHA_BITS</link>:
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a9945d1191aaa94d92f326382027a43a0">alphaBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga318a55eac1fee57dfe593b6d38149d07">GLFW_DEPTH_BITS</link>:
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a0e7baeca6ea2e4146236f38bc1df870f">depthBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga5339890a45a1fb38e93cb9fcc5fd069d">GLFW_STENCIL_BITS</link>:
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a202a6343c817e5f6e9597a02559273b9">stencilBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gaead34a9a683b2bc20eecf30ba738bfc6">GLFW_ACCUM_RED_BITS</link>:
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a90657631c2de9e7e45ae16b836c6cf4a">accumRedBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga65713cee1326f8e9d806fdf93187b471">GLFW_ACCUM_GREEN_BITS</link>:
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a5207821bf6a7cf5625bb350b448c1ab9">accumGreenBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga22bbe9104a8ce1f8b88fb4f186aa36ce">GLFW_ACCUM_BLUE_BITS</link>:
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a1628cb7857d3fd6d4967ddbc16f57445">accumBlueBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gae829b55591c18169a40ab4067a041b1f">GLFW_ACCUM_ALPHA_BITS</link>:
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a88d9b62bc1c4c4fb411ff2d980ef08e2">accumAlphaBits</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gab05108c5029443b371112b031d1fa174">GLFW_AUX_BUFFERS</link>:
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a1ad8a70d25f8c39ee51365fdae9de7ff">auxBuffers</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga83d991efca02537e2d69969135b77b03">GLFW_STEREO</link>:
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a25b8332a9aa5828345fdac1be790e135">stereo</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga714a5d569e8a274ea58fdfa020955339">GLFW_DOUBLEBUFFER</link>:
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1afd48b37171d567f9893bd8a660c4621b">doublebuffer</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga60a0578c3b9449027d683a9c6abb9f14">GLFW_TRANSPARENT_FRAMEBUFFER</link>:
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a5b19082325a56470e0770d08698a8965">transparent</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga2cdf86fdcb7722fb8829c4e201607535">GLFW_SAMPLES</link>:
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1aa6a57ca77268a4851f5c2be7e330cf5d">samples</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga444a8f00414a63220591f9fdb7b5642b">GLFW_SRGB_CAPABLE</link>:
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a4acbf6d9f23083704b5bfbab28aa3d9a">framebuffer</link>.<link linkend="_struct___g_l_f_wfbconfig_1a964edb36c54dec04c9a48ba5ff333297">sRGB</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d">GLFW_RESIZABLE</link>:
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a720d7078ba5509a2f900ee1820683757">resizable</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga21b854d36314c94d65aed84405b2f25e">GLFW_DECORATED</link>:
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a02d04b1fd5957f637c572719ffbfb322">decorated</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga54ddb14825a1541a56e22afb5f832a9e">GLFW_FOCUSED</link>:
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1ac56d67a9031b7fba4620f7e756ea86d1">focused</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga9d9874fc928200136a6dcdad726aa252">GLFW_AUTO_ICONIFY</link>:
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1adfada5e8fba13ad11042f7e76c34e84d">autoIconify</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga7fb0be51407783b41adbf5bec0b09d80">GLFW_FLOATING</link>:
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a97083e8d9143830dff2cb819762fa042">floating</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gad8ccb396253ad0b72c6d4c917eb38a03">GLFW_MAXIMIZED</link>:
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1ae65c0ad11cc65512f55e886a56e7654e">maximized</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4">GLFW_VISIBLE</link>:
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a308144d2d6df19c1d655231b48985b14">visible</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gab6ef2d02eb55800d249ccf1af253c35e">GLFW_COCOA_RETINA_FRAMEBUFFER</link>:
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a36a70f7ee298a1cdcadf676ee545f825">ns</link>.<link linkend="_struct___g_l_f_wwndconfig_1a7da9c35c04d11628f15d848eca27ebde">retina</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gaf65ea8dafdc0edb07b821b9a336d5043">GLFW_WIN32_KEYBOARD_MENU</link>:
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1ae32909d6a7065a542f1eea7d506bcf0a">win32</link>.<link linkend="_struct___g_l_f_wwndconfig_1a191f1fe01001ac5dcbdbf189922b9af8">keymenu</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga53c84ed2ddd94e15bbd44b1f6f7feafc">GLFW_COCOA_GRAPHICS_SWITCHING</link>:
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1aca19ede48c6927259d9b2ca477888fd0">nsgl</link>.<link linkend="_struct___g_l_f_wctxconfig_1a34067b0d1e79da07f2cb8a8d402cd29b">offline</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga620bc4280c7eab81ac9f02204500ed47">GLFW_SCALE_TO_MONITOR</link>:
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a0ea675f3fa3e73dbb404c2302c76edc2">scaleToMonitor</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga5ac0847c0aa0b3619f2855707b8a7a77">GLFW_CENTER_CURSOR</link>:
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a083f02ce71ee3bd7f5eb2bb5fe1e840b">centerCursor</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafa94b1da34bfd6488c0d709761504dfc">GLFW_FOCUS_ON_SHOW</link>:
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a52d82b17771f31cd65202715f5ccaa41">focusOnShow</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga88981797d29800808ec242274ab5c03a">GLFW_MOUSE_PASSTHROUGH</link>:
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a957f693bf16d99d5217922331b3f96c0">mousePassthrough</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga649309cf72a3d3de5b1348ca7936c95b">GLFW_CLIENT_API</link>:
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a9d54584dc156b04e39d7567a70e13ef8">client</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga5154cebfcd831c1cc63a4d5ac9bb4486">GLFW_CONTEXT_CREATION_API</link>:
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a725120317549aa1eef2b88af5ac4c409">source</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gafe5e4922de1f9932d7e9849bb053b0c0">GLFW_CONTEXT_VERSION_MAJOR</link>:
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a51a8fa315dccf7f6217098cf0413a7a9">major</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga31aca791e4b538c4e4a771eb95cc2d07">GLFW_CONTEXT_VERSION_MINOR</link>:
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a250a475c8d778778bb8fb4ab942eddd9">minor</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gade3593916b4c507900aa2d6844810e00">GLFW_CONTEXT_ROBUSTNESS</link>:
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a5aaf92358c6be9ac0dac61cc916b968f">robustness</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga13d24b12465da8b28985f46c8557925b">GLFW_OPENGL_FORWARD_COMPAT</link>:
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1ae7a2859b35b0bf3692abd6bf076ef4c7">forward</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f">GLFW_CONTEXT_DEBUG</link>:
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a694b0434791f532ddf39bca57b94042e">debug</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga5a52fdfd46d8249c211f923675728082">GLFW_CONTEXT_NO_ERROR</link>:
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a7c97fb74d89b1666d0de89222551a2ee">noerror</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga44f3a6b4261fbe351e0b950b0f372e12">GLFW_OPENGL_PROFILE</link>:
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a0c56aeafa0f85b1b0ba3e9371a737770">profile</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga72b648a8378fe3310c7c7bbecc0f7be6">GLFW_CONTEXT_RELEASE_BEHAVIOR</link>:
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a681e7c0153724884070e9c94069693fb">context</link>.<link linkend="_struct___g_l_f_wctxconfig_1a70db828a89fe653b4efd5ec03419b46d">release</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga0f20825e6e47ee8ba389024519682212">GLFW_REFRESH_RATE</link>:
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1aa6897931acebf196791bc65c82461110">refreshRate</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
423 &#32;&#32;&#32;&#32;}
424 
425 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;hint&#32;0x%08X&quot;</emphasis>,&#32;hint);
426 }
</programlisting>    </section><anchor xml:id="_group__window_1ga3c2270562d7ba13d92680ba1090adafe"/>    <section>
    <title>glfwWindowHintString()</title>
<indexterm><primary>glfwWindowHintString</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwWindowHintString</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwWindowHintString (int hint, const char * value)</computeroutput></para><para>

<para>Sets the specified window hint to the desired value. </para>
</para>

<para>This function sets hints for the next call to <link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link>. The hints, once set, retain their values until changed by a call to this function or <link linkend="_group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4">glfwDefaultWindowHints</link>, or until the library is terminated.</para>

<para>Only string type hints can be set with this function. Integer value hints are set with <link linkend="_group__window_1ga69c40728499720bef8a49aa925ea0efa">glfwWindowHint</link>.</para>

<para>This function does not check whether the specified hint values are valid. If you set hints to invalid values this will instead be reported by the next call to <link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link>.</para>

<para>Some hints are platform specific. These may be set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>hint</entry>
                                <entry>
<para>The <link linkend="_window_guide_1window_hints">window hint</link> to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>The new value of the window hint.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@pointer_lifetime The specified string is copied before this function returns.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_hints">Window creation hints</link> </para>

<para><link linkend="_group__window_1ga69c40728499720bef8a49aa925ea0efa">glfwWindowHint</link> </para>

<para><link linkend="_group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4">glfwDefaultWindowHints</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 428 of file window.c.</para>
<programlisting>429 {
430 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
431 
432 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
433 
434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(hint)
435 &#32;&#32;&#32;&#32;{
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga70fa0fbc745de6aa824df79a580e84b5">GLFW_COCOA_FRAME_NAME</link>:
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strncpy(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a36a70f7ee298a1cdcadf676ee545f825">ns</link>.<link linkend="_struct___g_l_f_wwndconfig_1a4be4e141e8d676273afc0e827c8e96e0">frameName</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>,
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a36a70f7ee298a1cdcadf676ee545f825">ns</link>.<link linkend="_struct___g_l_f_wwndconfig_1a4be4e141e8d676273afc0e827c8e96e0">frameName</link>)&#32;-&#32;1);
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1gae5a9ea2fccccd92edbd343fc56461114">GLFW_X11_CLASS_NAME</link>:
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strncpy(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a4d349ffb409d2385568605085f47f3e5">x11</link>.<link linkend="_struct___g_l_f_wwndconfig_1a20d3fccecff9b1cf768ee10598de3c06">className</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>,
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a4d349ffb409d2385568605085f47f3e5">x11</link>.<link linkend="_struct___g_l_f_wwndconfig_1a20d3fccecff9b1cf768ee10598de3c06">className</link>)&#32;-&#32;1);
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__window_1ga494c3c0d911e4b860b946530a3e389e8">GLFW_X11_INSTANCE_NAME</link>:
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strncpy(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a4d349ffb409d2385568605085f47f3e5">x11</link>.<link linkend="_struct___g_l_f_wwndconfig_1a7bd05ebbc2d63f64ca73ccf763a3f3ad">instanceName</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>,
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a64464251b6f483f28ce17bdcbccc05cb">window</link>.<link linkend="_struct___g_l_f_wwndconfig_1a4d349ffb409d2385568605085f47f3e5">x11</link>.<link linkend="_struct___g_l_f_wwndconfig_1a7bd05ebbc2d63f64ca73ccf763a3f3ad">instanceName</link>)&#32;-&#32;1);
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
448 &#32;&#32;&#32;&#32;}
449 
450 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;window&#32;hint&#32;string&#32;0x%08X&quot;</emphasis>,&#32;hint);
451 }
</programlisting>    </section><anchor xml:id="_group__window_1gaa6162f67dfa38b8beda2fea623649332"/>    <section>
    <title>glfwWindowShouldClose()</title>
<indexterm><primary>glfwWindowShouldClose</primary><secondary>Window reference</secondary></indexterm>
<indexterm><primary>Window reference</primary><secondary>glfwWindowShouldClose</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwWindowShouldClose (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Checks the close flag of the specified window. </para>
</para>

<para>This function returns the value of the close flag of the specified window.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The value of the close flag.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_window_guide_1window_close">Window closing and close flag</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 486 of file window.c.</para>
<programlisting>487 {
488 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
489 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
490 
491 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(0);
492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;shouldClose;
493 }
</programlisting></section>
</section>
</section>
