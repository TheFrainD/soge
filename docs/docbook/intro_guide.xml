<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_intro_guide">

<para>This guide introduces the basic concepts of GLFW and describes initialization, error handling and API guarantees and limitations. For a broad but shallow tutorial, see <link linkend="_quick_guide">Getting started</link> instead. For details on a specific function in this category, see the <link linkend="_group__init">Initialization, version and error reference</link>.</para>

<para>There are also guides for the other areas of GLFW.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_window_guide">Window guide</link></para>
</listitem><listitem>
<para><link linkend="_context_guide">Context guide</link></para>
</listitem><listitem>
<para><link linkend="_vulkan_guide">Vulkan guide</link></para>
</listitem><listitem>
<para><link linkend="_monitor_guide">Monitor guide</link></para>
</listitem><listitem>
<para><link linkend="_input_guide">Input guide</link></para>
</listitem></itemizedlist>
</para>
<section xml:id="_intro_guide_1intro_init">
<title>Initialization and termination</title>

<para>Before most GLFW functions may be called, the library must be initialized. This initialization checks what features are available on the machine, enumerates monitors, initializes the timer and performs any required platform-specific initialization.</para>

<para>Only the following functions may be called before the library has been successfully initialized, and only from the main thread.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__init_1ga2402c7824ac0194c13722790ff9559ff">glfwGetVersion</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1ga7de7ba982c0cf66b35afdaa8bea071ae">glfwGetVersionString</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba">glfwPlatformSupported</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1ga746e2757d069eaea423349aca6ae097a">glfwSetErrorCallback</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f">glfwInitHint</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link></para>
</listitem><listitem>
<para><link linkend="_init_8c_1a1712210f34c339a05adda69e3587ec00">glfwInitVulkanLoader</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link></para>
</listitem></itemizedlist>
</para>

<para>Calling any other function before successful initialization will cause a <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> error.</para>
<section xml:id="_intro_guide_1intro_init_init">
<title>Initializing GLFW</title>

<para>The library is initialized with <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>, which returns <computeroutput>GLFW_FALSE</computeroutput> if an error occurred.</para>

<para><literallayout><computeroutput>if&#32;(!glfwInit())
{
&#32;&#32;&#32;&#32;//&#32;Handle&#32;initialization&#32;failure
}
</computeroutput></literallayout></para>

<para>If any part of initialization fails, any parts that succeeded are terminated as if <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link> had been called. The library only needs to be initialized once and additional calls to an already initialized library will return <computeroutput>GLFW_TRUE</computeroutput> immediately.</para>

<para>Once the library has been successfully initialized, it should be terminated before the application exits. Modern systems are very good at freeing resources allocated by programs that exit, but GLFW sometimes has to change global system settings and these might not be restored without termination.</para>

<para>@macos When the library is initialized the main menu and dock icon are created. These are not desirable for a command-line only program. The creation of the main menu and dock icon can be disabled with the <link linkend="_group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf">GLFW_COCOA_MENUBAR</link> init hint.</para>
</section>
<section xml:id="_intro_guide_1init_hints">
<title>Initialization hints</title>

<para>Initialization hints are set before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> and affect how the library behaves until termination. Hints are set with <link linkend="_group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f">glfwInitHint</link>.</para>

<para><literallayout><computeroutput>glfwInitHint(GLFW_JOYSTICK_HAT_BUTTONS,&#32;GLFW_FALSE);
</computeroutput></literallayout></para>

<para>The values you set hints to are never reset by GLFW, but they only take effect during initialization. Once GLFW has been initialized, any values you set will be ignored until the library is terminated and initialized again.</para>

<para>Some hints are platform specific. These may be set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.</para>
<section xml:id="_intro_guide_1init_hints_shared">
<title>Shared init hints</title>

<para><anchor xml:id="_intro_guide_1GLFW_PLATFORM"/><emphasis role="bold">GLFW_PLATFORM</emphasis> specifies the platform to use for windowing and input. Possible values are <computeroutput>GLFW_ANY_PLATFORM</computeroutput>, <computeroutput>GLFW_PLATFORM_WIN32</computeroutput>, <computeroutput>GLFW_PLATFORM_COCOA</computeroutput>, <computeroutput>GLFW_PLATFORM_X11</computeroutput>, <computeroutput>GLFW_PLATFORM_WAYLAND</computeroutput> and <computeroutput>GLFW_PLATFORM_NULL</computeroutput>. The default value is <computeroutput>GLFW_ANY_PLATFORM</computeroutput>, which will choose any platform the library includes support for except for the Null backend.</para>

<para><anchor xml:id="_intro_guide_1GLFW_JOYSTICK_HAT_BUTTONS"/><emphasis role="bold">GLFW_JOYSTICK_HAT_BUTTONS</emphasis> specifies whether to also expose joystick hats as buttons, for compatibility with earlier versions of GLFW that did not have <link linkend="_group__input_1gad415b53795a1aeced53b7b66c7943931">glfwGetJoystickHats</link>. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>

<para><anchor xml:id="_intro_guide_1GLFW_ANGLE_PLATFORM_TYPE_hint"/><emphasis role="bold">GLFW_ANGLE_PLATFORM_TYPE</emphasis> specifies the platform type (rendering backend) to request when using OpenGL ES and EGL via <link xlink:href="https://chromium.googlesource.com/angle/angle/">ANGLE</link>. If the requested platform type is unavailable, ANGLE will use its default. Possible values are one of <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_NONE</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_OPENGL</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_OPENGLES</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_D3D9</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_D3D11</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_VULKAN</computeroutput> and <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_METAL</computeroutput>.</para>

<para>The ANGLE platform type is specified via the <computeroutput>EGL_ANGLE_platform_angle</computeroutput> extension. This extension is not used if this hint is <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_NONE</computeroutput>, which is the default value.</para>
</section>
<section xml:id="_intro_guide_1init_hints_osx">
<title>macOS specific init hints</title>

<para><anchor xml:id="_intro_guide_1GLFW_COCOA_CHDIR_RESOURCES_hint"/><emphasis role="bold">GLFW_COCOA_CHDIR_RESOURCES</emphasis> specifies whether to set the current directory to the application to the <computeroutput>Contents/Resources</computeroutput> subdirectory of the application&apos;s bundle, if present. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This is ignored on other platforms.</para>

<para><anchor xml:id="_intro_guide_1GLFW_COCOA_MENUBAR_hint"/><emphasis role="bold">GLFW_COCOA_MENUBAR</emphasis> specifies whether to create the menu bar and dock icon when GLFW is initialized. This applies whether the menu bar is created from a nib or manually by GLFW. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This is ignored on other platforms.</para>
</section>
<section xml:id="_intro_guide_1init_hints_x11">
<title>X11 specific init hints</title>

<para><anchor xml:id="_intro_guide_1GLFW_X11_XCB_VULKAN_SURFACE_hint"/><emphasis role="bold">GLFW_X11_XCB_VULKAN_SURFACE</emphasis> specifies whether to prefer the <computeroutput>VK_KHR_xcb_surface</computeroutput> extension for creating Vulkan surfaces, or whether to use the <computeroutput>VK_KHR_xlib_surface</computeroutput> extension. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This is ignored on other platforms.</para>
</section>
<section xml:id="_intro_guide_1init_hints_values">
<title>Supported and default values</title>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>Initialization hint </para>
</entry><entry>
<para>Default value </para>
</entry><entry>
<para>Supported values  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para><link linkend="_intro_guide_1GLFW_PLATFORM">GLFW_PLATFORM</link> </para>
</entry><entry>
<para><computeroutput>GLFW_ANY_PLATFORM</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_ANY_PLATFORM</computeroutput>, <computeroutput>GLFW_PLATFORM_WIN32</computeroutput>, <computeroutput>GLFW_PLATFORM_COCOA</computeroutput>, <computeroutput>GLFW_PLATFORM_X11</computeroutput>, <computeroutput>GLFW_PLATFORM_WAYLAND</computeroutput> or <computeroutput>GLFW_PLATFORM_NULL</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_intro_guide_1GLFW_JOYSTICK_HAT_BUTTONS">GLFW_JOYSTICK_HAT_BUTTONS</link> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__init_1gaec269b24cf549ab46292c0125d8bbdce">GLFW_ANGLE_PLATFORM_TYPE</link> </para>
</entry><entry>
<para><computeroutput>GLFW_ANGLE_PLATFORM_TYPE_NONE</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_ANGLE_PLATFORM_TYPE_NONE</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_OPENGL</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_OPENGLES</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_D3D9</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_D3D11</computeroutput>, <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_VULKAN</computeroutput> or <computeroutput>GLFW_ANGLE_PLATFORM_TYPE_METAL</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__init_1gab937983147a3158d45f88fad7129d9f2">GLFW_COCOA_CHDIR_RESOURCES</link> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf">GLFW_COCOA_MENUBAR</link> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__init_1gaa341e303ebeb8e4199b8ab8be84351f6">GLFW_X11_XCB_VULKAN_SURFACE</link> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</section>
</section>
<section xml:id="_intro_guide_1platform">
<title>Runtime platform selection</title>

<para>GLFW can be compiled for more than one platform (window system) at once. This lets a single library binary support both X11 and Wayland on Linux and other Unix-like systems.</para>

<para>You can control platform selection via the <link linkend="_intro_guide_1GLFW_PLATFORM">GLFW_PLATFORM</link> initialization hint. By default this is set to <link linkend="_group__init_1ga18b2d37374d0dea28cd69194fa85b859">GLFW_ANY_PLATFORM</link>, which will look for supported window systems in order of priority and select the first one it finds. It can also be set to any specific platform to have GLFW only look for that one.</para>

<para><literallayout><computeroutput>glfwInitHint(GLFW_PLATFORM,&#32;GLFW_PLATFORM_X11);
</computeroutput></literallayout></para>

<para>This mechanism also provides the Null platform, which is always supported but needs to be explicitly requested. This platform is effectively a stub, emulating a window system on a single 1080p monitor, but will not interact with any actual window system.</para>

<para><literallayout><computeroutput>glfwInitHint(GLFW_PLATFORM,&#32;GLFW_PLATFORM_NULL);
</computeroutput></literallayout></para>

<para>You can test whether a library binary was compiled with support for a specific platform with <link linkend="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba">glfwPlatformSupported</link>.</para>

<para><literallayout><computeroutput>if&#32;(glfwPlatformSupported(GLFW_PLATFORM_WAYLAND))
&#32;&#32;&#32;&#32;glfwInitHint(GLFW_PLATFORM,&#32;GLFW_PLATFORM_WAYLAND);
</computeroutput></literallayout></para>

<para>Once GLFW has been initialized, you can query which platform was selected with <link linkend="_group__init_1gac2d1735162a981fcaa8fb386740aa5ce">glfwGetPlatform</link>.</para>

<para><literallayout><computeroutput>int&#32;platform&#32;=&#32;glfwGetPlatform();
</computeroutput></literallayout></para>

<para>If you are using any <link linkend="_group__native">native access functions</link>, especially on Linux and other Unix-like systems, then you may need to check that you are calling the ones matching the selected platform.</para>
</section>
<section xml:id="_intro_guide_1init_allocator">
<title>Custom heap memory allocator</title>

<para>The heap memory allocator can be customized before initialization with <link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link>.</para>

<para><literallayout><computeroutput>GLFWallocator&#32;allocator;
allocator.allocate&#32;=&#32;my_malloc;
allocator.reallocate&#32;=&#32;my_realloc;
allocator.deallocate&#32;=&#32;my_free;
allocator.user&#32;=&#32;NULL;

glfwInitAllocator(&amp;allocator);
</computeroutput></literallayout></para>

<para>The allocator will be picked up at the beginning of initialization and will be used until GLFW has been fully terminated. Any allocator set after initialization will be picked up only at the next initialization.</para>

<para>The allocator will only be used for allocations that would have been made with the C standard library. Memory allocations that must be made with platform specific APIs will still use those.</para>

<para>The allocation function must have a signature matching <link linkend="_group__init_1gad3ff6f19415d52fbdcf3f0b57d8802aa">GLFWallocatefun</link>. It receives the desired size, in bytes, and the user pointer passed to <link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link> and returns the address to the allocated memory block.</para>

<para><literallayout><computeroutput>void*&#32;my_malloc(size_t&#32;size,&#32;void*&#32;user)
{
&#32;&#32;&#32;&#32;...
}
</computeroutput></literallayout></para>

<para>The reallocation function must have a function signature matching <link linkend="_group__init_1gad17723fa35a481b6c8d438a000a8201f">GLFWreallocatefun</link>. It receives the memory block to be reallocated, the new desired size, in bytes, and the user pointer passed to <link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link> and returns the address to the resized memory block.</para>

<para><literallayout><computeroutput>void*&#32;my_realloc(void*&#32;block,&#32;size_t&#32;size,&#32;void*&#32;user)
{
&#32;&#32;&#32;&#32;...
}
</computeroutput></literallayout></para>

<para>The deallocation function must have a function signature matching <link linkend="_group__init_1ga7181615eda94c4b07bd72bdcee39fa28">GLFWdeallocatefun</link>. It receives the memory block to be deallocated and the user pointer passed to <link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link>.</para>

<para><literallayout><computeroutput>void&#32;my_free(void*&#32;block,&#32;void*&#32;user)
{
&#32;&#32;&#32;&#32;...
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_intro_guide_1intro_init_terminate">
<title>Terminating GLFW</title>

<para>Before your application exits, you should terminate the GLFW library if it has been initialized. This is done with <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link>.</para>

<para><literallayout><computeroutput>glfwTerminate();
</computeroutput></literallayout></para>

<para>This will destroy any remaining window, monitor and cursor objects, restore any modified gamma ramps, re-enable the screensaver if it had been disabled and free any other resources allocated by GLFW.</para>

<para>Once the library is terminated, it is as if it had never been initialized and you will need to initialize it again before being able to use GLFW. If the library was not initialized or had already been terminated, it return immediately.</para>
</section>
</section>
<section xml:id="_intro_guide_1error_handling">
<title>Error handling</title>

<para>Some GLFW functions have return values that indicate an error, but this is often not very helpful when trying to figure out what happened or why it occurred. Other functions have no return value reserved for errors, so error notification needs a separate channel. Finally, far from all GLFW functions have return values.</para>

<para>The last <link linkend="_group__errors">error code</link> for the calling thread can be queried at any time with <link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link>.</para>

<para><literallayout><computeroutput>int&#32;code&#32;=&#32;glfwGetError(NULL);

if&#32;(code&#32;!=&#32;GLFW_NO_ERROR)
&#32;&#32;&#32;&#32;handle_error(code);
</computeroutput></literallayout></para>

<para>If no error has occurred since the last call, <link linkend="_group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4">GLFW_NO_ERROR</link> (zero) is returned. The error is cleared before the function returns.</para>

<para>The error code indicates the general category of the error. Some error codes, such as <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> has only a single meaning, whereas others like <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> are used for many different errors.</para>

<para>GLFW often has more information about an error than its general category. You can retrieve a UTF-8 encoded human-readable description along with the error code. If no error has occurred since the last call, the description is set to <computeroutput>NULL</computeroutput>.</para>

<para><literallayout><computeroutput>const&#32;char*&#32;description;
int&#32;code&#32;=&#32;glfwGetError(&amp;description);

if&#32;(description)
&#32;&#32;&#32;&#32;display_error_message(code,&#32;description);
</computeroutput></literallayout></para>

<para>The retrieved description string is only valid until the next error occurs. This means you must make a copy of it if you want to keep it.</para>

<para>You can also set an error callback, which will be called each time an error occurs. It is set with <link linkend="_group__init_1ga746e2757d069eaea423349aca6ae097a">glfwSetErrorCallback</link>.</para>

<para><literallayout><computeroutput>glfwSetErrorCallback(error_callback);
</computeroutput></literallayout></para>

<para>The error callback receives the same error code and human-readable description returned by <link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link>.</para>

<para><literallayout><computeroutput>void&#32;error_callback(int&#32;code,&#32;const&#32;char*&#32;description)
{
&#32;&#32;&#32;&#32;display_error_message(code,&#32;description);
}
</computeroutput></literallayout></para>

<para>The error callback is called after the error is stored, so calling <link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link> from within the error callback returns the same values as the callback argument.</para>

<para>The description string passed to the callback is only valid until the error callback returns. This means you must make a copy of it if you want to keep it.</para>

<para><emphasis role="bold">Reported errors are never fatal.</emphasis> As long as GLFW was successfully initialized, it will remain initialized and in a safe state until terminated regardless of how many errors occur. If an error occurs during initialization that causes <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> to fail, any part of the library that was initialized will be safely terminated.</para>

<para>Do not rely on a currently invalid call to generate a specific error, as in the future that same call may generate a different error or become valid.</para>
</section>
<section xml:id="_intro_guide_1coordinate_systems">
<title>Coordinate systems</title>

<para>GLFW has two primary coordinate systems: the <emphasis>virtual screen</emphasis> and the window <emphasis>content area</emphasis> or <emphasis>content area</emphasis>. Both use the same unit: <emphasis>virtual screen coordinates</emphasis>, or just <emphasis>screen coordinates</emphasis>, which don&apos;t necessarily correspond to pixels.</para>

<para></para>

<para>Both the virtual screen and the content area coordinate systems have the X-axis pointing to the right and the Y-axis pointing down.</para>

<para>Window and monitor positions are specified as the position of the upper-left corners of their content areas relative to the virtual screen, while cursor positions are specified relative to a window&apos;s content area.</para>

<para>Because the origin of the window&apos;s content area coordinate system is also the point from which the window position is specified, you can translate content area coordinates to the virtual screen by adding the window position. The window frame, when present, extends out from the content area but does not affect the window position.</para>

<para>Almost all positions and sizes in GLFW are measured in screen coordinates relative to one of the two origins above. This includes cursor positions, window positions and sizes, window frame sizes, monitor positions and video mode resolutions.</para>

<para>Two exceptions are the <link linkend="_monitor_guide_1monitor_size">monitor physical size</link>, which is measured in millimetres, and <link linkend="_window_guide_1window_fbsize">framebuffer size</link>, which is measured in pixels.</para>

<para>Pixels and screen coordinates may map 1:1 on your machine, but they won&apos;t on every other machine, for example on a Mac with a Retina display. The ratio between screen coordinates and pixels may also change at run-time depending on which monitor the window is currently considered to be on.</para>
</section>
<section xml:id="_intro_guide_1guarantees_limitations">
<title>Guarantees and limitations</title>

<para>This section describes the conditions under which GLFW can be expected to function, barring bugs in the operating system or drivers. Use of GLFW outside of these limits may work on some platforms, or on some machines, or some of the time, or on some versions of GLFW, but it may break at any time and this will not be considered a bug.</para>
<section xml:id="_intro_guide_1lifetime">
<title>Pointer lifetimes</title>

<para>GLFW will never free any pointer you provide to it and you must never free any pointer it provides to you.</para>

<para>Many GLFW functions return pointers to dynamically allocated structures, strings or arrays, and some callbacks are provided with strings or arrays. These are always managed by GLFW and should never be freed by the application. The lifetime of these pointers is documented for each GLFW function and callback. If you need to keep this data, you must copy it before its lifetime expires.</para>

<para>Many GLFW functions accept pointers to structures or strings allocated by the application. These are never freed by GLFW and are always the responsibility of the application. If GLFW needs to keep the data in these structures or strings, it is copied before the function returns.</para>

<para>Pointer lifetimes are guaranteed not to be shortened in future minor or patch releases.</para>
</section>
<section xml:id="_intro_guide_1reentrancy">
<title>Reentrancy</title>

<para>GLFW event processing and object destruction are not reentrant. This means that the following functions must not be called from any callback function:</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__window_1ga806747476b7247d292be3711c323ea10">glfwDestroyWindow</link></para>
</listitem><listitem>
<para><link linkend="_group__input_1ga27556b7122117bc1bbb4bb3cc003ea43">glfwDestroyCursor</link></para>
</listitem><listitem>
<para><link linkend="_group__window_1ga872d16e4c77f58c0436f356255920cfc">glfwPollEvents</link></para>
</listitem><listitem>
<para><link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link></para>
</listitem><listitem>
<para><link linkend="_group__window_1ga05223a0a4c5e50f10f289e60398153aa">glfwWaitEventsTimeout</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link></para>
</listitem></itemizedlist>
</para>

<para>These functions may be made reentrant in future minor or patch releases, but functions not on this list will not be made non-reentrant.</para>
</section>
<section xml:id="_intro_guide_1thread_safety">
<title>Thread safety</title>

<para>Most GLFW functions must only be called from the main thread (the thread that calls main), but some may be called from any thread once the library has been initialized. Before initialization the whole library is thread-unsafe.</para>

<para>The reference documentation for every GLFW function states whether it is limited to the main thread.</para>

<para>Initialization, termination, event processing and the creation and destruction of windows, cursors and OpenGL and OpenGL ES contexts are all restricted to the main thread due to limitations of one or several platforms.</para>

<para>Because event processing must be performed on the main thread, all callbacks except for the error callback will only be called on that thread. The error callback may be called on any thread, as any GLFW function may generate errors.</para>

<para>The error code and description may be queried from any thread.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link></para>
</listitem></itemizedlist>
</para>

<para>Empty events may be posted from any thread.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__window_1gad6f6b997278c91c43b35970eb9713d7e">glfwPostEmptyEvent</link></para>
</listitem></itemizedlist>
</para>

<para>The window user pointer and close flag may be read and written from any thread, but this is not synchronized by GLFW.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__window_1ga0a9ff3b4bf8589e9518e8816d06a8f50">glfwGetWindowUserPointer</link></para>
</listitem><listitem>
<para><link linkend="_group__window_1gacc9e68faee3c1763b54cd9bc405cf43e">glfwSetWindowUserPointer</link></para>
</listitem><listitem>
<para><link linkend="_group__window_1gaa6162f67dfa38b8beda2fea623649332">glfwWindowShouldClose</link></para>
</listitem><listitem>
<para><link linkend="_group__window_1ga1cadeda7a1e2f224e06a8415d30741aa">glfwSetWindowShouldClose</link></para>
</listitem></itemizedlist>
</para>

<para>These functions for working with OpenGL and OpenGL ES contexts may be called from any thread, but the window object is not synchronized by GLFW.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__context_1gafd76c93e15ec8b0b90506a9936a46185">glfwMakeContextCurrent</link></para>
</listitem><listitem>
<para><link linkend="_group__context_1gac28d98c655377d81a516bf5ef90780c8">glfwGetCurrentContext</link></para>
</listitem><listitem>
<para><link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link></para>
</listitem><listitem>
<para><link linkend="_group__context_1ga12a595c06947cec4967c6e1f14210a8a">glfwSwapInterval</link></para>
</listitem><listitem>
<para><link linkend="_group__context_1ga9a28c712d35f9e43534e1d03b051c04c">glfwExtensionSupported</link></para>
</listitem><listitem>
<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</listitem></itemizedlist>
</para>

<para>The raw timer functions may be called from any thread.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__input_1gaa92d10b10013372778efbf6367714371">glfwGetTimerFrequency</link></para>
</listitem><listitem>
<para><link linkend="_group__input_1gaa00c3e32227eb70b3968fca0bfe4ae26">glfwGetTimerValue</link></para>
</listitem></itemizedlist>
</para>

<para>The regular timer may be used from any thread, but reading and writing the timer offset is not synchronized by GLFW.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__input_1ga03d4a1039b8662c71eeb40beea8cb622">glfwGetTime</link></para>
</listitem><listitem>
<para><link linkend="_group__input_1ga94360a3628a09f32708f83cc3fa48590">glfwSetTime</link></para>
</listitem></itemizedlist>
</para>

<para>Library version information may be queried from any thread.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__init_1ga2402c7824ac0194c13722790ff9559ff">glfwGetVersion</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1ga7de7ba982c0cf66b35afdaa8bea071ae">glfwGetVersionString</link></para>
</listitem></itemizedlist>
</para>

<para>Platform information may be queried from any thread.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba">glfwPlatformSupported</link></para>
</listitem><listitem>
<para><link linkend="_group__init_1gac2d1735162a981fcaa8fb386740aa5ce">glfwGetPlatform</link></para>
</listitem></itemizedlist>
</para>

<para>All Vulkan related functions may be called from any thread.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_group__vulkan_1ga72e7c3757d9ff2333181a5569bb7c403">glfwVulkanSupported</link></para>
</listitem><listitem>
<para><link linkend="_group__vulkan_1gac47c204c9c417fced07e25de8fce526a">glfwGetRequiredInstanceExtensions</link></para>
</listitem><listitem>
<para><link linkend="_vulkan_8c_1ab1fbd7c0ba5c40c91c6b85b897364039">glfwGetInstanceProcAddress</link></para>
</listitem><listitem>
<para><link linkend="_vulkan_8c_1a6a7033429666ac6b31d4250aeb5b37d1">glfwGetPhysicalDevicePresentationSupport</link></para>
</listitem><listitem>
<para><link linkend="_vulkan_8c_1a5a47c783767442b8b8e9ab3cf2e4959b">glfwCreateWindowSurface</link></para>
</listitem></itemizedlist>
</para>

<para>GLFW uses synchronization objects internally only to manage the per-thread context and error states. Additional synchronization is left to the application.</para>

<para>Functions that may currently be called from any thread will always remain so, but functions that are currently limited to the main thread may be updated to allow calls from any thread in future releases.</para>
</section>
<section xml:id="_intro_guide_1compatibility">
<title>Version compatibility</title>

<para>GLFW uses <link xlink:href="https://semver.org/">Semantic Versioning</link>. This guarantees source and binary backward compatibility with earlier minor versions of the API. This means that you can drop in a newer version of the library and existing programs will continue to compile and existing binaries will continue to run.</para>

<para>Once a function or constant has been added, the signature of that function or value of that constant will remain unchanged until the next major version of GLFW. No compatibility of any kind is guaranteed between major versions.</para>

<para>Undocumented behavior, i.e. behavior that is not described in the documentation, may change at any time until it is documented.</para>

<para>If the reference documentation and the implementation differ, the reference documentation will almost always take precedence and the implementation will be fixed in the next release. The reference documentation will also take precedence over anything stated in a guide.</para>
</section>
<section xml:id="_intro_guide_1event_order">
<title>Event order</title>

<para>The order of arrival of related events is not guaranteed to be consistent across platforms. The exception is synthetic key and mouse button release events, which are always delivered after the window defocus event.</para>
</section>
</section>
<section xml:id="_intro_guide_1intro_version">
<title>Version management</title>

<para>GLFW provides mechanisms for identifying what version of GLFW your application was compiled against as well as what version it is currently running against. If you are loading GLFW dynamically (not just linking dynamically), you can use this to verify that the library binary is compatible with your application.</para>
<section xml:id="_intro_guide_1intro_version_compile">
<title>Compile-time version</title>

<para>The compile-time version of GLFW is provided by the GLFW header with the <computeroutput>GLFW_VERSION_MAJOR</computeroutput>, <computeroutput>GLFW_VERSION_MINOR</computeroutput> and <computeroutput>GLFW_VERSION_REVISION</computeroutput> macros.</para>

<para><literallayout><computeroutput>printf(&quot;Compiled&#32;against&#32;GLFW&#32;%i.%i.%i\n&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLFW_VERSION_MAJOR,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLFW_VERSION_MINOR,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLFW_VERSION_REVISION);
</computeroutput></literallayout></para>
</section>
<section xml:id="_intro_guide_1intro_version_runtime">
<title>Run-time version</title>

<para>The run-time version can be retrieved with <link linkend="_group__init_1ga2402c7824ac0194c13722790ff9559ff">glfwGetVersion</link>, a function that may be called regardless of whether GLFW is initialized.</para>

<para><literallayout><computeroutput>int&#32;major,&#32;minor,&#32;revision;
glfwGetVersion(&amp;major,&#32;&amp;minor,&#32;&amp;revision);

printf(&quot;Running&#32;against&#32;GLFW&#32;%i.%i.%i\n&quot;,&#32;major,&#32;minor,&#32;revision);
</computeroutput></literallayout></para>
</section>
<section xml:id="_intro_guide_1intro_version_string">
<title>Version string</title>

<para>GLFW 3 also provides a compile-time generated version string that describes the version, platform, compiler and any platform-specific compile-time options. This is primarily intended for submitting bug reports, to allow developers to see which code paths are enabled in a binary.</para>

<para>The version string is returned by <link linkend="_group__init_1ga7de7ba982c0cf66b35afdaa8bea071ae">glfwGetVersionString</link>, a function that may be called regardless of whether GLFW is initialized.</para>

<para><emphasis role="bold">Do not use the version string</emphasis> to parse the GLFW library version. The <link linkend="_group__init_1ga2402c7824ac0194c13722790ff9559ff">glfwGetVersion</link> function already provides the version of the running library binary.</para>

<para><emphasis role="bold">Do not use the version string</emphasis> to parse what platforms are supported. The <link linkend="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba">glfwPlatformSupported</link> function lets you query platform support.</para>

<para><emphasis role="bold">GLFW 3.4:</emphasis> The format of this string was changed to support the addition of <link linkend="_intro_guide_1platform">runtime platform selection</link>.</para>

<para>The format of the string is as follows:<itemizedlist>
<listitem>
<para>The version of GLFW</para>
</listitem><listitem>
<para>For each supported platform:<itemizedlist>
<listitem>
<para>The name of the window system API</para>
</listitem><listitem>
<para>The name of the window system specific context creation API, if applicable</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>The names of the always supported context creation APIs EGL and OSMesa</para>
</listitem><listitem>
<para>Any additional compile-time options, APIs and (on Windows) what compiler was used</para>
</listitem></itemizedlist>
</para>

<para>For example, GLFW 3.4 compiled as a DLL for Windows with MinGW may have a version string like this:</para>

<para><literallayout><computeroutput>3.4.0&#32;Win32&#32;WGL&#32;Null&#32;EGL&#32;OSMesa&#32;MinGW&#32;DLL
</computeroutput></literallayout></para>

<para>While GLFW compiled as as static library for Linux with both Wayland and X11 enabled may have a version string like this:</para>

<para><literallayout><computeroutput>3.4.0&#32;Wayland&#32;X11&#32;GLX&#32;Null&#32;EGL&#32;OSMesa&#32;monotonic
</computeroutput></literallayout> </para>
</section>
</section>
</section>
