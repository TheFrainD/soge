<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__monitor">
<title>Monitor reference</title>
<indexterm><primary>Monitor reference</primary></indexterm>
<para>

<para>Functions and types related to monitors. </para>
 
</para>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link></para>

<para>Video mode type. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link></para>

<para>Gamma ramp. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link></para>

<para>Opaque monitor object. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249">GLFWmonitorfun</link>) (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, int <link linkend="_glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</para>

<para>The function pointer type for monitor configuration callbacks. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link> <link linkend="_group__monitor_1ga902c2816ac9b34b757282daab59b2565">GLFWvidmode</link></para>

<para>Video mode type. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link> <link linkend="_group__monitor_1ga939cf093cb0af0498b7b54dc2e181404">GLFWgammaramp</link></para>

<para>Gamma ramp. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> ** <link linkend="_group__monitor_1gab4d483284c57e28837bc2cd9639e9665">glfwGetMonitors</link> (int *<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>)</para>

<para>Returns the currently connected monitors. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * <link linkend="_group__monitor_1ga59ea49f377fe701dd76764183e64d9f4">glfwGetPrimaryMonitor</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Returns the primary monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__monitor_1ga45b5481a614ad7beb2aade9746d07563">glfwGetMonitorPos</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, int *xpos, int *ypos)</para>

<para>Returns the position of the monitor&apos;s viewport on the virtual screen. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__monitor_1ga5a3ac0f6e3786df47aabccfb5760b31d">glfwGetMonitorWorkarea</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, int *xpos, int *ypos, int *<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>, int *<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)</para>

<para>Retrieves the work area of the monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__monitor_1gad0e93a9e42b32394369cabbbdc1ab702">glfwGetMonitorPhysicalSize</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, int *widthMM, int *heightMM)</para>

<para>Returns the physical size of the monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__monitor_1ga28d856d94bea2ce8f09a67bb0346aaff">glfwGetMonitorContentScale</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, float *xscale, float *yscale)</para>

<para>Retrieves the content scale for the specified monitor. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char * <link linkend="_group__monitor_1ga9bb1b5712a5a4f1478ed74513e02d148">glfwGetMonitorName</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor)</para>

<para>Returns the name of the specified monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__monitor_1ga6d89c74c1c293f0ab78a00c3c6d1ae44">glfwSetMonitorUserPointer</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *<link linkend="_glad_8h_1a8e06a460fd89ba3a95ce49119ef7aab2">pointer</link>)</para>

<para>Sets the user pointer of the specified monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * <link linkend="_group__monitor_1ga11bc263d3967b86e2ec3e5e48762206d">glfwGetMonitorUserPointer</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor)</para>

<para>Returns the user pointer of the specified monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249">GLFWmonitorfun</link> <link linkend="_group__monitor_1ga9fa7cc37cd79216a7fc0b77af54109a1">glfwSetMonitorCallback</link> (<link linkend="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249">GLFWmonitorfun</link> callback)</para>

<para>Sets the monitor configuration callback. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link> * <link linkend="_group__monitor_1ga4fcbc9865c18acb7fbf60cb6c156cef7">glfwGetVideoModes</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, int *<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>)</para>

<para>Returns the available video modes for the specified monitor. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link> * <link linkend="_group__monitor_1ga27319d7f045c4cbbeae5651696cacd5f">glfwGetVideoMode</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor)</para>

<para>Returns the current mode of the specified monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__monitor_1ga3e4ab484476c935b4cd0bf49a5c429d6">glfwSetGamma</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, float gamma)</para>

<para>Generates a gamma ramp and sets it for the specified monitor. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link> * <link linkend="_group__monitor_1gab8c94ec5ac1d43f70ce03a3e845837b2">glfwGetGammaRamp</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor)</para>

<para>Returns the current gamma ramp for the specified monitor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__monitor_1gac9f36a1cfa10eab191d3029ea8bc9558">glfwSetGammaRamp</link> (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, const <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link> *ramp)</para>

<para>Sets the current gamma ramp for the specified monitor. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Functions and types related to monitors. </para>

<para>This is the reference documentation for monitor related functions and types. For more task-oriented information, see the <link linkend="_monitor_guide">Monitor guide</link>. </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__monitor_1ga939cf093cb0af0498b7b54dc2e181404"/>    <section>
    <title>GLFWgammaramp</title>
<indexterm><primary>GLFWgammaramp</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>GLFWgammaramp</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link> <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link></computeroutput></para><para>

<para>Gamma ramp. </para>
</para>

<para>This describes the gamma ramp for a monitor.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_gamma">Gamma ramp</link> </para>

<para><link linkend="_group__monitor_1gab8c94ec5ac1d43f70ce03a3e845837b2">glfwGetGammaRamp</link> </para>

<para><link linkend="_group__monitor_1gac9f36a1cfa10eab191d3029ea8bc9558">glfwSetGammaRamp</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3"/>    <section>
    <title>GLFWmonitor</title>
<indexterm><primary>GLFWmonitor</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>GLFWmonitor</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link></computeroutput></para><para>

<para>Opaque monitor object. </para>
</para>

<para>Opaque monitor object.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_object">Monitor objects</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1351 of file glfw3.h.</para>
    </section><anchor xml:id="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249"/>    <section>
    <title>GLFWmonitorfun</title>
<indexterm><primary>GLFWmonitorfun</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>GLFWmonitorfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWmonitorfun) (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> *monitor, int <link linkend="_glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</computeroutput></para><para>

<para>The function pointer type for monitor configuration callbacks. </para>
</para>

<para>This is the function pointer type for monitor configuration callbacks. A monitor callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWmonitor*&#32;monitor,&#32;int&#32;event)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor that was connected or disconnected. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>event</entry>
                                <entry>
<para>One of <computeroutput>GLFW_CONNECTED</computeroutput> or <computeroutput>GLFW_DISCONNECTED</computeroutput>. Future releases may add more events.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_event">Monitor configuration changes</link> </para>

<para><link linkend="_group__monitor_1ga9fa7cc37cd79216a7fc0b77af54109a1">glfwSetMonitorCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1924 of file glfw3.h.</para>
    </section><anchor xml:id="_group__monitor_1ga902c2816ac9b34b757282daab59b2565"/>    <section>
    <title>GLFWvidmode</title>
<indexterm><primary>GLFWvidmode</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>GLFWvidmode</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link> <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link></computeroutput></para><para>

<para>Video mode type. </para>
</para>

<para>This describes a single video mode.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_modes">Video modes</link> </para>

<para><link linkend="_group__monitor_1ga27319d7f045c4cbbeae5651696cacd5f">glfwGetVideoMode</link> </para>

<para><link linkend="_group__monitor_1ga4fcbc9865c18acb7fbf60cb6c156cef7">glfwGetVideoModes</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added refresh rate member. </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__monitor_1gab8c94ec5ac1d43f70ce03a3e845837b2"/>    <section>
    <title>glfwGetGammaRamp()</title>
<indexterm><primary>glfwGetGammaRamp</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetGammaRamp</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link>* glfwGetGammaRamp (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor)</computeroutput></para><para>

<para>Returns the current gamma ramp for the specified monitor. </para>
</para>

<para>This function returns the current gamma ramp of the specified monitor.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The current gamma ramp, or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland Gamma handling is a privileged protocol, this function will thus never be implemented and emits <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> while returning <computeroutput>NULL</computeroutput>.</para>
</formalpara>
@pointer_lifetime The returned structure and its arrays are allocated and freed by GLFW. You should not free them yourself. They are valid until the specified monitor is disconnected, this function is called again for that monitor or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_gamma">Gamma ramp</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 501 of file monitor.c.</para>
<programlisting>502 {
503 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
504 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
505 
506 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
507 
508 &#32;&#32;&#32;&#32;<link linkend="_monitor_8c_1a9ec7f45d75c8b6435f49b22b86672806">_glfwFreeGammaArrays</link>(&amp;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a6761d674e05aecaf0cadf7e127f96d85">currentRamp</link>);
509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ac68ce860b623cde57c067946050118f4">getGammaRamp</link>(monitor,&#32;&amp;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a6761d674e05aecaf0cadf7e127f96d85">currentRamp</link>))
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
511 
512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a6761d674e05aecaf0cadf7e127f96d85">currentRamp</link>;
513 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga28d856d94bea2ce8f09a67bb0346aaff"/>    <section>
    <title>glfwGetMonitorContentScale()</title>
<indexterm><primary>glfwGetMonitorContentScale</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetMonitorContentScale</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetMonitorContentScale (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, float * xscale, float * yscale)</computeroutput></para><para>

<para>Retrieves the content scale for the specified monitor. </para>
</para>

<para>This function retrieves the content scale for the specified monitor. The content scale is the ratio between the current DPI and the platform&apos;s default DPI. This is especially important for text and any UI elements. If the pixel dimensions of your UI scaled by this look appropriate on your machine then it should appear at a reasonable size on other machines regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being somewhat correct.</para>

<para>The content scale may depend on both the monitor resolution and pixel density and on user settings. It may be very different from the raw DPI calculated from the physical size and current resolution.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>xscale</entry>
                                <entry>
<para>Where to store the x-axis content scale, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>yscale</entry>
                                <entry>
<para>Where to store the y-axis content scale, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_scale">Content scale</link> </para>

<para><link linkend="_group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee">glfwGetWindowContentScale</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 377 of file monitor.c.</para>
<programlisting>379 {
380 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
381 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
382 
383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xscale)
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*xscale&#32;=&#32;0.f;
385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(yscale)
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*yscale&#32;=&#32;0.f;
387 
388 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
389 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a73ec0ba676acfc5e2de023bc525bea34">getMonitorContentScale</link>(monitor,&#32;xscale,&#32;yscale);
390 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga9bb1b5712a5a4f1478ed74513e02d148"/>    <section>
    <title>glfwGetMonitorName()</title>
<indexterm><primary>glfwGetMonitorName</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetMonitorName</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char* glfwGetMonitorName (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor)</computeroutput></para><para>

<para>Returns the name of the specified monitor. </para>
</para>

<para>This function returns a human-readable name, encoded as UTF-8, of the specified monitor. The name typically reflects the make and model of the monitor and is not guaranteed to be unique among the connected monitors.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The UTF-8 encoded name of the monitor, or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified monitor is disconnected or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_properties">Monitor properties</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 392 of file monitor.c.</para>
<programlisting>393 {
394 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
395 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
396 
397 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1ad497d3ab00f840ad99f62b3803755b12">name</link>;
399 }
</programlisting>    </section><anchor xml:id="_group__monitor_1gad0e93a9e42b32394369cabbbdc1ab702"/>    <section>
    <title>glfwGetMonitorPhysicalSize()</title>
<indexterm><primary>glfwGetMonitorPhysicalSize</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetMonitorPhysicalSize</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetMonitorPhysicalSize (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, int * widthMM, int * heightMM)</computeroutput></para><para>

<para>Returns the physical size of the monitor. </para>
</para>

<para>This function returns the size, in millimetres, of the display area of the specified monitor.</para>

<para>Some platforms do not provide accurate monitor size information, either because the monitor <link xlink:href="https://en.wikipedia.org/wiki/Extended_display_identification_data">EDID</link> data is incorrect or because the driver does not report it accurately.</para>

<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>widthMM</entry>
                                <entry>
<para>Where to store the width, in millimetres, of the monitor&apos;s display area, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>heightMM</entry>
                                <entry>
<para>Where to store the height, in millimetres, of the monitor&apos;s display area, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@win32 On Windows 8 and earlier the physical size is calculated from the current resolution and system DPI instead of querying the monitor EDID data.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_properties">Monitor properties</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 359 of file monitor.c.</para>
<programlisting>360 {
361 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
362 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
363 
364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(widthMM)
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*widthMM&#32;=&#32;0;
366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(heightMM)
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*heightMM&#32;=&#32;0;
368 
369 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
370 
371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(widthMM)
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*widthMM&#32;=&#32;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a4d0e40c8dc4d7913e5e78a81955a834f">widthMM</link>;
373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(heightMM)
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*heightMM&#32;=&#32;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1ae5f696ed8a038e0aba539cb52a04b887">heightMM</link>;
375 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga45b5481a614ad7beb2aade9746d07563"/>    <section>
    <title>glfwGetMonitorPos()</title>
<indexterm><primary>glfwGetMonitorPos</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetMonitorPos</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetMonitorPos (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, int * xpos, int * ypos)</computeroutput></para><para>

<para>Returns the position of the monitor&apos;s viewport on the virtual screen. </para>
</para>

<para>This function returns the position, in screen coordinates, of the upper-left corner of the specified monitor.</para>

<para>Any or all of the position arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> position arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>Where to store the monitor x-coordinate, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>Where to store the monitor y-coordinate, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_properties">Monitor properties</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 323 of file monitor.c.</para>
<programlisting>324 {
325 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
326 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
327 
328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xpos)
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*xpos&#32;=&#32;0;
330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ypos)
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ypos&#32;=&#32;0;
332 
333 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
334 
335 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a8c88c64d6038c709662d48512b8125ea">getMonitorPos</link>(monitor,&#32;xpos,&#32;ypos);
336 }
</programlisting>    </section><anchor xml:id="_group__monitor_1gab4d483284c57e28837bc2cd9639e9665"/>    <section>
    <title>glfwGetMonitors()</title>
<indexterm><primary>glfwGetMonitors</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetMonitors</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link>** glfwGetMonitors (int * count)</computeroutput></para><para>

<para>Returns the currently connected monitors. </para>
</para>

<para>This function returns an array of handles for all currently connected monitors. The primary monitor is always first in the returned array. If no monitors were found, this function returns <computeroutput>NULL</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out                                </entry>                                <entry>count</entry>
                                <entry>
<para>Where to store the number of monitors in the returned array. This is set to zero if an error occurred. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An array of monitor handles, or <computeroutput>NULL</computeroutput> if no monitors were found or if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@pointer_lifetime The returned array is allocated and freed by GLFW. You should not free it yourself. It is guaranteed to be valid only until the monitor configuration changes or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_monitors">Retrieving monitors</link> </para>

<para><link linkend="_monitor_guide_1monitor_event">Monitor configuration changes</link> </para>

<para><link linkend="_group__monitor_1ga59ea49f377fe701dd76764183e64d9f4">glfwGetPrimaryMonitor</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 301 of file monitor.c.</para>
<programlisting>302 {
303 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
304 
305 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;0;
306 
307 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
308 
309 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1ae3f408467579cb3fb517fcd39fa23568">monitorCount</link>;
310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link>**)&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1acb84371972f4d704deb0cdc649a1f1da">monitors</link>;
311 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga11bc263d3967b86e2ec3e5e48762206d"/>    <section>
    <title>glfwGetMonitorUserPointer()</title>
<indexterm><primary>glfwGetMonitorUserPointer</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetMonitorUserPointer</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>* glfwGetMonitorUserPointer (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor)</computeroutput></para><para>

<para>Returns the user pointer of the specified monitor. </para>
</para>

<para>This function returns the current value of the user-defined pointer of the specified monitor. The initial value is <computeroutput>NULL</computeroutput>.</para>

<para>This function may be called from the monitor callback, even for a monitor that is being disconnected.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor whose pointer to return.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_userptr">User pointer</link> </para>

<para><link linkend="_group__monitor_1ga6d89c74c1c293f0ab78a00c3c6d1ae44">glfwSetMonitorUserPointer</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 410 of file monitor.c.</para>
<programlisting>411 {
412 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
413 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
414 
415 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a948a7ba41f99a6f4a2727229f4854194">userPointer</link>;
417 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga5a3ac0f6e3786df47aabccfb5760b31d"/>    <section>
    <title>glfwGetMonitorWorkarea()</title>
<indexterm><primary>glfwGetMonitorWorkarea</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetMonitorWorkarea</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetMonitorWorkarea (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, int * xpos, int * ypos, int * width, int * height)</computeroutput></para><para>

<para>Retrieves the work area of the monitor. </para>
</para>

<para>This function returns the position, in screen coordinates, of the upper-left corner of the work area of the specified monitor along with the work area size in screen coordinates. The work area is defined as the area of the monitor not occluded by the window system task bar where present. If no task bar exists then the work area is the monitor resolution in screen coordinates.</para>

<para>Any or all of the position and size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> position and size arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>Where to store the monitor x-coordinate, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>Where to store the monitor y-coordinate, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>width</entry>
                                <entry>
<para>Where to store the monitor width, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>height</entry>
                                <entry>
<para>Where to store the monitor height, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_workarea">Work area</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 338 of file monitor.c.</para>
<programlisting>341 {
342 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
343 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
344 
345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xpos)
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*xpos&#32;=&#32;0;
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ypos)
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ypos&#32;=&#32;0;
349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>)
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>&#32;=&#32;0;
351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>)
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>&#32;=&#32;0;
353 
354 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
355 
356 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a1ffd16ce40ac9df77a3bdde2620a0ac7">getMonitorWorkarea</link>(monitor,&#32;xpos,&#32;ypos,&#32;<link linkend="_glad_8h_1a77a72419a6bb6d8b56f8d9db93a120d0">width</link>,&#32;<link linkend="_glad_8h_1a2e94a4956fa3fc42600a71518b6e6284">height</link>);
357 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga59ea49f377fe701dd76764183e64d9f4"/>    <section>
    <title>glfwGetPrimaryMonitor()</title>
<indexterm><primary>glfwGetPrimaryMonitor</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetPrimaryMonitor</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link>* glfwGetPrimaryMonitor (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Returns the primary monitor. </para>
</para>

<para>This function returns the primary monitor. This is usually the monitor where elements like the task bar or global menu bar are located.</para>

<para><formalpara><title>Returns</title>

<para>The primary monitor, or <computeroutput>NULL</computeroutput> if no monitors were found or if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>Remarks</title>

<para>The primary monitor is always first in the array returned by <link linkend="_group__monitor_1gab4d483284c57e28837bc2cd9639e9665">glfwGetMonitors</link>.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_monitors">Retrieving monitors</link> </para>

<para><link linkend="_group__monitor_1gab4d483284c57e28837bc2cd9639e9665">glfwGetMonitors</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 313 of file monitor.c.</para>
<programlisting>314 {
315 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
316 
317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1ae3f408467579cb3fb517fcd39fa23568">monitorCount</link>)
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
319 
320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link>*)&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1acb84371972f4d704deb0cdc649a1f1da">monitors</link>[0];
321 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga27319d7f045c4cbbeae5651696cacd5f"/>    <section>
    <title>glfwGetVideoMode()</title>
<indexterm><primary>glfwGetVideoMode</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetVideoMode</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link>* glfwGetVideoMode (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor)</computeroutput></para><para>

<para>Returns the current mode of the specified monitor. </para>
</para>

<para>This function returns the current video mode of the specified monitor. If you have created a full screen window for that monitor, the return value will depend on whether that window is iconified.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The current mode of the monitor, or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned array is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified monitor is disconnected or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_modes">Video modes</link> </para>

<para><link linkend="_group__monitor_1ga4fcbc9865c18acb7fbf60cb6c156cef7">glfwGetVideoModes</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwGetDesktopMode</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 443 of file monitor.c.</para>
<programlisting>444 {
445 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
446 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
447 
448 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
449 
450 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a6f5f1c76ec695558990c82251545fea2">getVideoMode</link>(monitor,&#32;&amp;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1ab2a33bceb848570cca7b213fcddb9e84">currentMode</link>);
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1ab2a33bceb848570cca7b213fcddb9e84">currentMode</link>;
452 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga4fcbc9865c18acb7fbf60cb6c156cef7"/>    <section>
    <title>glfwGetVideoModes()</title>
<indexterm><primary>glfwGetVideoModes</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwGetVideoModes</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_struct_g_l_f_wvidmode">GLFWvidmode</link>* glfwGetVideoModes (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, int * count)</computeroutput></para><para>

<para>Returns the available video modes for the specified monitor. </para>
</para>

<para>This function returns an array of all video modes supported by the specified monitor. The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths), then by resolution area (the product of width and height), then resolution width and finally by refresh rate.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>count</entry>
                                <entry>
<para>Where to store the number of video modes in the returned array. This is set to zero if an error occurred. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An array of video modes, or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned array is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified monitor is disconnected, this function is called again for that monitor or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_modes">Video modes</link> </para>

<para><link linkend="_group__monitor_1ga27319d7f045c4cbbeae5651696cacd5f">glfwGetVideoMode</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Changed to return an array of modes for a specific monitor. </para>
</formalpara>
</para>
<para>
Definition at line 426 of file monitor.c.</para>
<programlisting>427 {
428 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
429 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
430 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
431 
432 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;0;
433 
434 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
435 
436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!refreshVideoModes(monitor))
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
438 
439 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a49766384d467b40c9bb362459761418f">modeCount</link>;
440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a012dd72ff0ab06cf46bb78951adac67f">modes</link>;
441 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga3e4ab484476c935b4cd0bf49a5c429d6"/>    <section>
    <title>glfwSetGamma()</title>
<indexterm><primary>glfwSetGamma</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwSetGamma</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetGamma (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, float gamma)</computeroutput></para><para>

<para>Generates a gamma ramp and sets it for the specified monitor. </para>
</para>

<para>This function generates an appropriately sized gamma ramp from the specified exponent and then calls <link linkend="_group__monitor_1gac9f36a1cfa10eab191d3029ea8bc9558">glfwSetGammaRamp</link> with it. The value must be a finite number greater than zero.</para>

<para>The software controlled gamma ramp is applied <emphasis>in addition</emphasis> to the hardware gamma correction, which today is usually an approximation of sRGB gamma. This means that setting a perfectly linear ramp, or gamma 1.0, will produce the default (usually sRGB-like) behavior.</para>

<para>For gamma correct rendering with OpenGL or OpenGL ES, see the <link linkend="_window_guide_1GLFW_SRGB_CAPABLE">GLFW_SRGB_CAPABLE</link> hint.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor whose gamma ramp to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>gamma</entry>
                                <entry>
<para>The desired exponent.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland Gamma handling is a privileged protocol, this function will thus never be implemented and emits <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_gamma">Gamma ramp</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 454 of file monitor.c.</para>
<programlisting>455 {
456 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
457 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*&#32;<link linkend="_glad_8h_1a0aa8cf39c79d294b1d9f4daef5020bec">values</link>;
458 &#32;&#32;&#32;&#32;<link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link>&#32;ramp;
459 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link>*&#32;original;
460 &#32;&#32;&#32;&#32;assert(handle&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
461 &#32;&#32;&#32;&#32;assert(gamma&#32;&gt;&#32;0.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>);
462 &#32;&#32;&#32;&#32;assert(gamma&#32;&lt;=&#32;FLT_MAX);
463 
464 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
465 
466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(gamma&#32;!=&#32;gamma&#32;||&#32;gamma&#32;&lt;=&#32;0.f&#32;||&#32;gamma&#32;&gt;&#32;FLT_MAX)
467 &#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;gamma&#32;value&#32;%f&quot;</emphasis>,&#32;gamma);
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
470 &#32;&#32;&#32;&#32;}
471 
472 &#32;&#32;&#32;&#32;original&#32;=&#32;<link linkend="_group__monitor_1gab8c94ec5ac1d43f70ce03a3e845837b2">glfwGetGammaRamp</link>(handle);
473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!original)
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
475 
476 &#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a0aa8cf39c79d294b1d9f4daef5020bec">values</link>&#32;=&#32;<link linkend="_init_8c_1afdf24e4f0665535fd3d012b810ffb18f">_glfw_calloc</link>(original-&gt;<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>));
477 
478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;&#32;i&#32;&lt;&#32;original-&gt;<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>;&#32;&#32;i++)
479 &#32;&#32;&#32;&#32;{
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
481 
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;intensity</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;i&#32;/&#32;(float)&#32;(original-&gt;<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>&#32;-&#32;1);
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apply&#32;gamma&#32;curve</emphasis>
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;powf(<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>,&#32;1.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>&#32;/&#32;gamma)&#32;*&#32;65535.f&#32;+&#32;0.5f;
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clamp&#32;to&#32;value&#32;range</emphasis>
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;<link linkend="_init_8c_1af27e3c452fbb2a7133339f77b72fcf37">_glfw_fminf</link>(<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>,&#32;65535.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>);
488 
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a0aa8cf39c79d294b1d9f4daef5020bec">values</link>[i]&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;short)&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
490 &#32;&#32;&#32;&#32;}
491 
492 &#32;&#32;&#32;&#32;ramp.<link linkend="_struct_g_l_f_wgammaramp_1a2cce5d968734b685623eef913e635138">red</link>&#32;=&#32;<link linkend="_glad_8h_1a0aa8cf39c79d294b1d9f4daef5020bec">values</link>;
493 &#32;&#32;&#32;&#32;ramp.<link linkend="_struct_g_l_f_wgammaramp_1affccc6f5df47820b6562d709da3a5a3a">green</link>&#32;=&#32;<link linkend="_glad_8h_1a0aa8cf39c79d294b1d9f4daef5020bec">values</link>;
494 &#32;&#32;&#32;&#32;ramp.<link linkend="_struct_g_l_f_wgammaramp_1acf0c836d0efe29c392fe8d1a1042744b">blue</link>&#32;=&#32;<link linkend="_glad_8h_1a0aa8cf39c79d294b1d9f4daef5020bec">values</link>;
495 &#32;&#32;&#32;&#32;ramp.<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>&#32;=&#32;original-&gt;<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>;
496 
497 &#32;&#32;&#32;&#32;<link linkend="_group__monitor_1gac9f36a1cfa10eab191d3029ea8bc9558">glfwSetGammaRamp</link>(handle,&#32;&amp;ramp);
498 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1abcf72962b101a8a5c539da1a278b0e9e">_glfw_free</link>(<link linkend="_glad_8h_1a0aa8cf39c79d294b1d9f4daef5020bec">values</link>);
499 }
</programlisting>    </section><anchor xml:id="_group__monitor_1gac9f36a1cfa10eab191d3029ea8bc9558"/>    <section>
    <title>glfwSetGammaRamp()</title>
<indexterm><primary>glfwSetGammaRamp</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwSetGammaRamp</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetGammaRamp (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, const <link linkend="_struct_g_l_f_wgammaramp">GLFWgammaramp</link> * ramp)</computeroutput></para><para>

<para>Sets the current gamma ramp for the specified monitor. </para>
</para>

<para>This function sets the current gamma ramp for the specified monitor. The original gamma ramp for that monitor is saved by GLFW the first time this function is called and is restored by <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link>.</para>

<para>The software controlled gamma ramp is applied <emphasis>in addition</emphasis> to the hardware gamma correction, which today is usually an approximation of sRGB gamma. This means that setting a perfectly linear ramp, or gamma 1.0, will produce the default (usually sRGB-like) behavior.</para>

<para>For gamma correct rendering with OpenGL or OpenGL ES, see the <link linkend="_window_guide_1GLFW_SRGB_CAPABLE">GLFW_SRGB_CAPABLE</link> hint.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor whose gamma ramp to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ramp</entry>
                                <entry>
<para>The gamma ramp to use.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>The size of the specified gamma ramp should match the size of the current ramp for that monitor.</para>

<para>@win32 The gamma ramp size must be 256.</para>

<para>@wayland Gamma handling is a privileged protocol, this function will thus never be implemented and emits <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>
</formalpara>
@pointer_lifetime The specified gamma ramp is copied before this function returns.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_gamma">Gamma ramp</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 515 of file monitor.c.</para>
<programlisting>516 {
517 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
518 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
519 &#32;&#32;&#32;&#32;assert(ramp&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
520 &#32;&#32;&#32;&#32;assert(ramp-&gt;<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>&#32;&gt;&#32;0);
521 &#32;&#32;&#32;&#32;assert(ramp-&gt;<link linkend="_struct_g_l_f_wgammaramp_1a2cce5d968734b685623eef913e635138">red</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
522 &#32;&#32;&#32;&#32;assert(ramp-&gt;<link linkend="_struct_g_l_f_wgammaramp_1affccc6f5df47820b6562d709da3a5a3a">green</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
523 &#32;&#32;&#32;&#32;assert(ramp-&gt;<link linkend="_struct_g_l_f_wgammaramp_1acf0c836d0efe29c392fe8d1a1042744b">blue</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
524 
525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ramp-&gt;<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>&#32;&lt;=&#32;0)
526 &#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;gamma&#32;ramp&#32;size&#32;%i&quot;</emphasis>,
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ramp-&gt;<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>);
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
531 &#32;&#32;&#32;&#32;}
532 
533 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
534 
535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a64188202c44980245af7cb1ce9a24d44">originalRamp</link>.<link linkend="_struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5">size</link>)
536 &#32;&#32;&#32;&#32;{
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ac68ce860b623cde57c067946050118f4">getGammaRamp</link>(monitor,&#32;&amp;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a64188202c44980245af7cb1ce9a24d44">originalRamp</link>))
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
539 &#32;&#32;&#32;&#32;}
540 
541 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aad8bd2196751e5f652764e3810878b17">setGammaRamp</link>(monitor,&#32;ramp);
542 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga9fa7cc37cd79216a7fc0b77af54109a1"/>    <section>
    <title>glfwSetMonitorCallback()</title>
<indexterm><primary>glfwSetMonitorCallback</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwSetMonitorCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249">GLFWmonitorfun</link> glfwSetMonitorCallback (<link linkend="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249">GLFWmonitorfun</link> callback)</computeroutput></para><para>

<para>Sets the monitor configuration callback. </para>
</para>

<para>This function sets the monitor configuration callback, or removes the currently set callback. This is called when a monitor is connected to or disconnected from the system.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWmonitor*&#32;monitor,&#32;int&#32;event)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_event">Monitor configuration changes</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 419 of file monitor.c.</para>
<programlisting>420 {
421 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
422 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__monitor_1gaabe16caca8dea952504dfdebdf4cd249">GLFWmonitorfun</link>,&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a59fc977d623a780eb748aadcd1485d6c">callbacks</link>.<link linkend="_struct___g_l_f_wlibrary_1acea278bb2641c36a371e9e715b7a8f9a">monitor</link>,&#32;cbfun);
423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
424 }
</programlisting>    </section><anchor xml:id="_group__monitor_1ga6d89c74c1c293f0ab78a00c3c6d1ae44"/>    <section>
    <title>glfwSetMonitorUserPointer()</title>
<indexterm><primary>glfwSetMonitorUserPointer</primary><secondary>Monitor reference</secondary></indexterm>
<indexterm><primary>Monitor reference</primary><secondary>glfwSetMonitorUserPointer</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetMonitorUserPointer (<link linkend="_group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3">GLFWmonitor</link> * monitor, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * pointer)</computeroutput></para><para>

<para>Sets the user pointer of the specified monitor. </para>
</para>

<para>This function sets the user-defined pointer of the specified monitor. The current value is retained until the monitor is disconnected. The initial value is <computeroutput>NULL</computeroutput>.</para>

<para>This function may be called from the monitor callback, even for a monitor that is being disconnected.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>monitor</entry>
                                <entry>
<para>The monitor whose pointer to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pointer</entry>
                                <entry>
<para>The new value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_monitor_guide_1monitor_userptr">User pointer</link> </para>

<para><link linkend="_group__monitor_1ga11bc263d3967b86e2ec3e5e48762206d">glfwGetMonitorUserPointer</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 401 of file monitor.c.</para>
<programlisting>402 {
403 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*&#32;monitor&#32;=&#32;(<link linkend="_struct___g_l_f_wmonitor">_GLFWmonitor</link>*)&#32;handle;
404 &#32;&#32;&#32;&#32;assert(monitor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
405 
406 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
407 &#32;&#32;&#32;&#32;monitor-&gt;<link linkend="_struct___g_l_f_wmonitor_1a948a7ba41f99a6f4a2727229f4854194">userPointer</link>&#32;=&#32;<link linkend="_glad_8h_1a8e06a460fd89ba3a95ce49119ef7aab2">pointer</link>;
408 }
</programlisting></section>
</section>
</section>
