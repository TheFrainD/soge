<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_stb__cpp_8cpp">
<title>deps/stb/tests/stb_cpp.cpp File Reference</title>
<indexterm><primary>deps/stb/tests/stb_cpp.cpp</primary></indexterm>
<programlisting>#include &lt;conio.h&gt;
#include &quot;stb.h&quot;
</programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_stb__cpp_8cpp_1ae4242ca3cfe4bca010a56e1cbb6b9f27">WIN32_MEAN_AND_LEAN</link></para>
</listitem>
            <listitem><para>#define <link linkend="_stb__cpp_8cpp_1ac7bef5d85e3dcd73eef56ad39ffc84a9">WIN32_LEAN_AND_MEAN</link></para>
</listitem>
            <listitem><para>#define <link linkend="_stb__cpp_8cpp_1a5640e9acc84db268e2628d4c5dad308c">STB_DEFINE</link></para>
</listitem>
            <listitem><para>#define <link linkend="_stb__cpp_8cpp_1a27a83e7391798e636aaa87ae2f375fa5">STB_NPTR</link></para>
</listitem>
            <listitem><para>#define <link linkend="_stb__cpp_8cpp_1a8ac140009b858c701d41cb216a88b978">STB_ONLY</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link> (int truth, const char *<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>)</para>
</listitem>
            <listitem><para>char * <link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link> (<link linkend="_stb_8h_1aff315eaed92791e86f6755d20797561a">stb_matcher</link> *<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>, char *<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>, int <link linkend="_structresult">result</link>, int <link linkend="_glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>, const char *str)</para>
</listitem>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_stb__cpp_8cpp_1a2b359e8a6d55502a515bcdda622c6a8b">test_lex</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>
</listitem>
            <listitem><para>int <link linkend="_stb__cpp_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link> (int argc, char **argv)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_stb__cpp_8cpp_1ad43c3812e6d13e0518d9f8b8f463ffcf">count</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_stb__cpp_8cpp_1a5640e9acc84db268e2628d4c5dad308c"/>    <section>
    <title>STB_DEFINE</title>
<indexterm><primary>STB_DEFINE</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>STB_DEFINE</secondary></indexterm>
<para><computeroutput>#define STB_DEFINE</computeroutput></para><para>
Definition at line 5 of file stb_cpp.cpp.</para>
    </section><anchor xml:id="_stb__cpp_8cpp_1a27a83e7391798e636aaa87ae2f375fa5"/>    <section>
    <title>STB_NPTR</title>
<indexterm><primary>STB_NPTR</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>STB_NPTR</secondary></indexterm>
<para><computeroutput>#define STB_NPTR</computeroutput></para><para>
Definition at line 7 of file stb_cpp.cpp.</para>
    </section><anchor xml:id="_stb__cpp_8cpp_1a8ac140009b858c701d41cb216a88b978"/>    <section>
    <title>STB_ONLY</title>
<indexterm><primary>STB_ONLY</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>STB_ONLY</secondary></indexterm>
<para><computeroutput>#define STB_ONLY</computeroutput></para><para>
Definition at line 9 of file stb_cpp.cpp.</para>
    </section><anchor xml:id="_stb__cpp_8cpp_1ac7bef5d85e3dcd73eef56ad39ffc84a9"/>    <section>
    <title>WIN32_LEAN_AND_MEAN</title>
<indexterm><primary>WIN32_LEAN_AND_MEAN</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>WIN32_LEAN_AND_MEAN</secondary></indexterm>
<para><computeroutput>#define WIN32_LEAN_AND_MEAN</computeroutput></para><para>
Definition at line 2 of file stb_cpp.cpp.</para>
    </section><anchor xml:id="_stb__cpp_8cpp_1ae4242ca3cfe4bca010a56e1cbb6b9f27"/>    <section>
    <title>WIN32_MEAN_AND_LEAN</title>
<indexterm><primary>WIN32_MEAN_AND_LEAN</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>WIN32_MEAN_AND_LEAN</secondary></indexterm>
<para><computeroutput>#define WIN32_MEAN_AND_LEAN</computeroutput></para><para>
Definition at line 1 of file stb_cpp.cpp.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26"/>    <section>
    <title>c()</title>
<indexterm><primary>c</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>c</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link> (int truth, const char * error)</computeroutput></para><para>
Definition at line 14 of file stb_cpp.cpp.</para>
<programlisting>15 {
16 &#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!truth)&#32;{
17 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Test&#32;failed:&#32;%s\n&quot;</emphasis>,&#32;<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>);
18 &#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_stb__cpp_8cpp_1ad43c3812e6d13e0518d9f8b8f463ffcf">count</link>;
19 &#32;&#32;&#32;}
20 }
</programlisting>    </section><anchor xml:id="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63"/>    <section>
    <title>expects()</title>
<indexterm><primary>expects</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>expects</secondary></indexterm>
<para><computeroutput>char* expects (<link linkend="_stb_8h_1aff315eaed92791e86f6755d20797561a">stb_matcher</link> * m, char * s, int result, int len, const char * str)</computeroutput></para><para>
Definition at line 22 of file stb_cpp.cpp.</para>
<programlisting>23 {
24 &#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;res2,len2=0;
25 &#32;&#32;&#32;res2&#32;=&#32;<link linkend="_stb_8h_1aac39fef14dd3aafc7f11e834b14bface">stb_lex</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,&#32;&amp;len2);
26 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(<link linkend="_structresult">result</link>&#32;==&#32;res2&#32;&amp;&amp;&#32;<link linkend="_glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>&#32;==&#32;len2,&#32;str);
27 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>&#32;+&#32;<link linkend="_glext_8h_1a652168017ea9a8bbcead03d5c16269fb">len</link>;
28 }
</programlisting>    </section><anchor xml:id="_stb__cpp_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (int argc, char ** argv)</computeroutput></para><para>
Definition at line 53 of file stb_cpp.cpp.</para>
<programlisting>54 {
55 <emphasis role="preprocessor">#if&#32;0</emphasis>
56 &#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>;
57 &#32;&#32;&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)&#32;<emphasis role="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</emphasis>;
58 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(stb_ischar(<emphasis role="charliteral">&apos;c&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;1&quot;</emphasis>);
59 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(stb_ischar(<emphasis role="charliteral">&apos;x&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;2&quot;</emphasis>);
60 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;#&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;3&quot;</emphasis>);
61 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;X&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;4&quot;</emphasis>);
62 &#32;&#32;&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)&#32;<emphasis role="stringliteral">&quot;0123456789&quot;</emphasis>;
63 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;c&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;5&quot;</emphasis>);
64 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;x&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;6&quot;</emphasis>);
65 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;#&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;7&quot;</emphasis>);
66 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;X&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;8&quot;</emphasis>);
67 &#32;&#32;&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)&#32;<emphasis role="stringliteral">&quot;#####&quot;</emphasis>;
68 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;c&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;a&quot;</emphasis>);
69 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;x&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;b&quot;</emphasis>);
70 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(stb_ischar(<emphasis role="charliteral">&apos;#&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;c&quot;</emphasis>);
71 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;X&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;d&quot;</emphasis>);
72 &#32;&#32;&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)&#32;<emphasis role="stringliteral">&quot;xXyY&quot;</emphasis>;
73 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;c&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;e&quot;</emphasis>);
74 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(stb_ischar(<emphasis role="charliteral">&apos;x&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;f&quot;</emphasis>);
75 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(!stb_ischar(<emphasis role="charliteral">&apos;#&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;g&quot;</emphasis>);
76 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26">c</link>(stb_ischar(<emphasis role="charliteral">&apos;X&apos;</emphasis>,&#32;<link linkend="_glext_8h_1aa5367c14d90f462230c2611b81b41d23">p</link>),&#32;<emphasis role="stringliteral">&quot;stb_ischar&#32;h&quot;</emphasis>);
77 <emphasis role="preprocessor">#endif</emphasis>
78 
79 &#32;&#32;&#32;<link linkend="_stb__cpp_8cpp_1a2b359e8a6d55502a515bcdda622c6a8b">test_lex</link>();
80 
81 &#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>)&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;_getch();
83 &#32;&#32;&#32;}
84 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
85 }
</programlisting>    </section><anchor xml:id="_stb__cpp_8cpp_1a2b359e8a6d55502a515bcdda622c6a8b"/>    <section>
    <title>test_lex()</title>
<indexterm><primary>test_lex</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>test_lex</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> test_lex (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>
Definition at line 30 of file stb_cpp.cpp.</para>
<programlisting>31 {
32 &#32;&#32;&#32;<link linkend="_stb_8h_1aff315eaed92791e86f6755d20797561a">stb_matcher</link>&#32;*<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>&#32;=&#32;<link linkend="_stb_8h_1ae523d7a93458a5f1380b13da7cb124c8">stb_lex_matcher</link>();
33 &#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tok_en5&#32;.3&#32;20.1&#32;20.&#32;.20&#32;.1</emphasis>
34 &#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)&#32;<emphasis role="stringliteral">&quot;tok_en5.3&#32;20.1&#32;20.&#32;.20.1&quot;</emphasis>;
35 
36 &#32;&#32;&#32;<link linkend="_stb_8h_1af4bbe47cb2e97191f4c91a6f017df2c2">stb_lex_item</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,&#32;<emphasis role="stringliteral">&quot;[a-zA-Z_][a-zA-Z0-9_]*&quot;</emphasis>,&#32;1&#32;&#32;&#32;);
37 &#32;&#32;&#32;<link linkend="_stb_8h_1af4bbe47cb2e97191f4c91a6f017df2c2">stb_lex_item</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,&#32;<emphasis role="stringliteral">&quot;[0-9]*\\.?[0-9]*&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;,&#32;2&#32;&#32;&#32;);
38 &#32;&#32;&#32;<link linkend="_stb_8h_1af4bbe47cb2e97191f4c91a6f017df2c2">stb_lex_item</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,&#32;<emphasis role="stringliteral">&quot;[\r\n\t&#32;]+&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;3&#32;&#32;&#32;);
39 &#32;&#32;&#32;<link linkend="_stb_8h_1af4bbe47cb2e97191f4c91a6f017df2c2">stb_lex_item</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;-99&#32;);
40 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,1,7,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;1&quot;</emphasis>);
41 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,2,2,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;2&quot;</emphasis>);
42 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,3,1,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;3&quot;</emphasis>);
43 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,2,4,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;4&quot;</emphasis>);
44 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,3,1,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;5&quot;</emphasis>);
45 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,2,3,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;6&quot;</emphasis>);
46 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,3,1,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;7&quot;</emphasis>);
47 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,2,3,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;8&quot;</emphasis>);
48 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,2,2,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;9&quot;</emphasis>);
49 &#32;&#32;&#32;<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>=<link linkend="_stb__cpp_8cpp_1a240857d3d0fe992fda445155792e1d63">expects</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>,<link linkend="_glext_8h_1a4af680a6c683f88ed67b76f207f2e6e4">s</link>,0,0,&#32;<emphasis role="stringliteral">&quot;stb_lex&#32;10&quot;</emphasis>);
50 &#32;&#32;&#32;<link linkend="_stb_8h_1a5ab00480504f907a7a25fdff0bf0b60d">stb_matcher_free</link>(<link linkend="_glext_8h_1af593500c283bf1a787a6f947f503a5c2">m</link>);
51 }
</programlisting></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_stb__cpp_8cpp_1ad43c3812e6d13e0518d9f8b8f463ffcf"/>    <section>
    <title>count</title>
<indexterm><primary>count</primary><secondary>stb_cpp.cpp</secondary></indexterm>
<indexterm><primary>stb_cpp.cpp</primary><secondary>count</secondary></indexterm>
<para><computeroutput>int <link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link></computeroutput></para><para>
Definition at line 13 of file stb_cpp.cpp.</para>
</section>
</section>
</section>
