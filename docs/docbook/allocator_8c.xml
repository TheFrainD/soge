<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_allocator_8c">
<title>deps/glfw/tests/allocator.c File Reference</title>
<indexterm><primary>deps/glfw/tests/allocator.c</primary></indexterm>
<programlisting>#include &lt;glad/gl.h&gt;
#include &lt;GLFW/glfw3.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;assert.h&gt;
</programlisting><simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structallocator__stats">allocator_stats</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_allocator_8c_1a09f9c3bf094ecaf707c673924ffd615a">GLAD_GL_IMPLEMENTATION</link></para>
</listitem>
            <listitem><para>#define <link linkend="_allocator_8c_1a088324ad8995e3eb76024e3e79083d48">GLFW_INCLUDE_NONE</link></para>
</listitem>
            <listitem><para>#define <link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_glad_8h_1a1af10666aa42292f407f6acc2af11948">x</link>)   (function_name = #<link linkend="_glad_8h_1a1af10666aa42292f407f6acc2af11948">x</link>, <link linkend="_glad_8h_1a1af10666aa42292f407f6acc2af11948">x</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_allocator_8c_1a840291bc02cba5474a4cb46a9b9566fe">main</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_allocator_8c_1ac429ee1a62f55758474a0e5867760693"/>    <section>
    <title>CALL</title>
<indexterm><primary>CALL</primary><secondary>allocator.c</secondary></indexterm>
<indexterm><primary>allocator.c</primary><secondary>CALL</secondary></indexterm>
<para><computeroutput>#define CALL( <link linkend="_glad_8h_1a1af10666aa42292f407f6acc2af11948">x</link>)   (function_name = #<link linkend="_glad_8h_1a1af10666aa42292f407f6acc2af11948">x</link>, <link linkend="_glad_8h_1a1af10666aa42292f407f6acc2af11948">x</link>)</computeroutput></para><para>
Definition at line 35 of file allocator.c.</para>
    </section><anchor xml:id="_allocator_8c_1a09f9c3bf094ecaf707c673924ffd615a"/>    <section>
    <title>GLAD_GL_IMPLEMENTATION</title>
<indexterm><primary>GLAD_GL_IMPLEMENTATION</primary><secondary>allocator.c</secondary></indexterm>
<indexterm><primary>allocator.c</primary><secondary>GLAD_GL_IMPLEMENTATION</secondary></indexterm>
<para><computeroutput>#define GLAD_GL_IMPLEMENTATION</computeroutput></para><para>
Definition at line 26 of file allocator.c.</para>
    </section><anchor xml:id="_allocator_8c_1a088324ad8995e3eb76024e3e79083d48"/>    <section>
    <title>GLFW_INCLUDE_NONE</title>
<indexterm><primary>GLFW_INCLUDE_NONE</primary><secondary>allocator.c</secondary></indexterm>
<indexterm><primary>allocator.c</primary><secondary>GLFW_INCLUDE_NONE</secondary></indexterm>
<para><computeroutput>#define GLFW_INCLUDE_NONE</computeroutput></para><para>
Definition at line 28 of file allocator.c.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_allocator_8c_1a840291bc02cba5474a4cb46a9b9566fe"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>allocator.c</secondary></indexterm>
<indexterm><primary>allocator.c</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>
Definition at line 104 of file allocator.c.</para>
<programlisting>105 {
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structallocator__stats">allocator_stats</link>&#32;stats&#32;=&#32;{0};
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_g_l_f_wallocator">GLFWallocator</link>&#32;allocator&#32;=
108 &#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_struct_g_l_f_wallocator_1a18a798136f17a9cb105be18312193bf7">allocate</link>&#32;=&#32;allocate,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.deallocate&#32;=&#32;deallocate,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.reallocate&#32;=&#32;reallocate,
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.user&#32;=&#32;&amp;stats
113 &#32;&#32;&#32;&#32;};
114 
115 &#32;&#32;&#32;&#32;<link linkend="_group__init_1ga746e2757d069eaea423349aca6ae097a">glfwSetErrorCallback</link>(<link linkend="_inputlag_8c_1a4ee391c8bab624943c822faafb2c320e">error_callback</link>);
116 &#32;&#32;&#32;&#32;<link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link>(&amp;allocator);
117 
118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>)())
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(EXIT_FAILURE);
120 
121 &#32;&#32;&#32;&#32;<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link>)(400,&#32;400,&#32;<emphasis role="stringliteral">&quot;Custom&#32;allocator&#32;test&quot;</emphasis>,&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)
123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link>();
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(EXIT_FAILURE);
126 &#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;&#32;&#32;<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__context_1gafd76c93e15ec8b0b90506a9936a46185">glfwMakeContextCurrent</link>)(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
129 &#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a7e9e0ebe65864f5f2bcd289c5736041b">gladLoadGL</link>(<link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link>);
130 &#32;&#32;&#32;&#32;<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__context_1ga12a595c06947cec4967c6e1f14210a8a">glfwSwapInterval</link>)(1);
131 
132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__window_1gaa6162f67dfa38b8beda2fea623649332">glfwWindowShouldClose</link>)(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>))
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1afc250a2b6bf11f24bb73534a2f053c0d">glClear</link>(<link linkend="_glad_8h_1a947db9ff944c4b78e652144c3dd1060c">GL_COLOR_BUFFER_BIT</link>);
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link>)(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>);
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link>)();
137 &#32;&#32;&#32;&#32;}
138 
139 &#32;&#32;&#32;&#32;<link linkend="_allocator_8c_1ac429ee1a62f55758474a0e5867760693">CALL</link>(<link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link>)();
140 &#32;&#32;&#32;&#32;exit(EXIT_SUCCESS);
141 }
</programlisting></section>
</section>
</section>
