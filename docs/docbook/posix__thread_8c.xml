<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_posix__thread_8c">
<title>deps/glfw/src/posix_thread.c File Reference</title>
<indexterm><primary>deps/glfw/src/posix_thread.c</primary></indexterm>
<programlisting>#include &quot;internal.h&quot;
#include &lt;assert.h&gt;
#include &lt;string.h&gt;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_internal_8h_1ac5743c31bece872e24528b5a45e354c5">GLFWbool</link> <link linkend="_posix__thread_8c_1afad94d57290ac85fbece14f93c41754f">_glfwPlatformCreateTls</link> (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> *tls)</para>
</listitem>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_posix__thread_8c_1a36bee5cb6dd711c2278a0db7f5b81979">_glfwPlatformDestroyTls</link> (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> *tls)</para>
</listitem>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * <link linkend="_posix__thread_8c_1a0a0787a86bb4e04f17a8d24e70e1f013">_glfwPlatformGetTls</link> (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> *tls)</para>
</listitem>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_posix__thread_8c_1a302f48b6d4dba6b3579449d8a43cfae7">_glfwPlatformSetTls</link> (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> *tls, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)</para>
</listitem>
            <listitem><para><link linkend="_internal_8h_1ac5743c31bece872e24528b5a45e354c5">GLFWbool</link> <link linkend="_posix__thread_8c_1a6c5f30449fe62f561c9b01f839ec0438">_glfwPlatformCreateMutex</link> (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> *mutex)</para>
</listitem>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_posix__thread_8c_1a3731e795e959a80349337ee1e3887518">_glfwPlatformDestroyMutex</link> (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> *mutex)</para>
</listitem>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_posix__thread_8c_1a2677e4d211fbe9b2dc96d16e91c98930">_glfwPlatformLockMutex</link> (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> *mutex)</para>
</listitem>
            <listitem><para><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_posix__thread_8c_1a8b7744446237b1c292ba8a0b9d5e7f90">_glfwPlatformUnlockMutex</link> (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> *mutex)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_posix__thread_8c_1a6c5f30449fe62f561c9b01f839ec0438"/>    <section>
    <title>_glfwPlatformCreateMutex()</title>
<indexterm><primary>_glfwPlatformCreateMutex</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformCreateMutex</secondary></indexterm>
<para><computeroutput><link linkend="_internal_8h_1ac5743c31bece872e24528b5a45e354c5">GLFWbool</link> _glfwPlatformCreateMutex (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> * mutex)</computeroutput></para><para>
Definition at line 74 of file posix_thread.c.</para>
<programlisting>75 {
76 &#32;&#32;&#32;&#32;assert(mutex-&gt;posix.allocated&#32;==&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>);
77 
78 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pthread_mutex_init(&amp;mutex-&gt;posix.handle,&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;!=&#32;0)
79 &#32;&#32;&#32;&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>,&#32;<emphasis role="stringliteral">&quot;POSIX:&#32;Failed&#32;to&#32;create&#32;mutex&quot;</emphasis>);
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
82 &#32;&#32;&#32;&#32;}
83 
84 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mutex-&gt;posix.allocated&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
85 }
</programlisting>    </section><anchor xml:id="_posix__thread_8c_1afad94d57290ac85fbece14f93c41754f"/>    <section>
    <title>_glfwPlatformCreateTls()</title>
<indexterm><primary>_glfwPlatformCreateTls</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformCreateTls</secondary></indexterm>
<para><computeroutput><link linkend="_internal_8h_1ac5743c31bece872e24528b5a45e354c5">GLFWbool</link> _glfwPlatformCreateTls (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> * tls)</computeroutput></para><para>
Definition at line 40 of file posix_thread.c.</para>
<programlisting>41 {
42 &#32;&#32;&#32;&#32;assert(tls-&gt;posix.allocated&#32;==&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>);
43 
44 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pthread_key_create(&amp;tls-&gt;posix.key,&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;!=&#32;0)
45 &#32;&#32;&#32;&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;POSIX:&#32;Failed&#32;to&#32;create&#32;context&#32;TLS&quot;</emphasis>);
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
49 &#32;&#32;&#32;&#32;}
50 
51 &#32;&#32;&#32;&#32;tls-&gt;posix.allocated&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
52 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
53 }
</programlisting>    </section><anchor xml:id="_posix__thread_8c_1a3731e795e959a80349337ee1e3887518"/>    <section>
    <title>_glfwPlatformDestroyMutex()</title>
<indexterm><primary>_glfwPlatformDestroyMutex</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformDestroyMutex</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> _glfwPlatformDestroyMutex (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> * mutex)</computeroutput></para><para>
Definition at line 87 of file posix_thread.c.</para>
<programlisting>88 {
89 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mutex-&gt;posix.allocated)
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pthread_mutex_destroy(&amp;mutex-&gt;posix.handle);
91 &#32;&#32;&#32;&#32;memset(mutex,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link>));
92 }
</programlisting>    </section><anchor xml:id="_posix__thread_8c_1a36bee5cb6dd711c2278a0db7f5b81979"/>    <section>
    <title>_glfwPlatformDestroyTls()</title>
<indexterm><primary>_glfwPlatformDestroyTls</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformDestroyTls</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> _glfwPlatformDestroyTls (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> * tls)</computeroutput></para><para>
Definition at line 55 of file posix_thread.c.</para>
<programlisting>56 {
57 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tls-&gt;posix.allocated)
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pthread_key_delete(tls-&gt;posix.key);
59 &#32;&#32;&#32;&#32;memset(tls,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct___g_l_f_wtls">_GLFWtls</link>));
60 }
</programlisting>    </section><anchor xml:id="_posix__thread_8c_1a0a0787a86bb4e04f17a8d24e70e1f013"/>    <section>
    <title>_glfwPlatformGetTls()</title>
<indexterm><primary>_glfwPlatformGetTls</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformGetTls</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>* _glfwPlatformGetTls (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> * tls)</computeroutput></para><para>
Definition at line 62 of file posix_thread.c.</para>
<programlisting>63 {
64 &#32;&#32;&#32;&#32;assert(tls-&gt;posix.allocated&#32;==&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>);
65 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pthread_getspecific(tls-&gt;posix.key);
66 }
</programlisting>    </section><anchor xml:id="_posix__thread_8c_1a2677e4d211fbe9b2dc96d16e91c98930"/>    <section>
    <title>_glfwPlatformLockMutex()</title>
<indexterm><primary>_glfwPlatformLockMutex</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformLockMutex</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> _glfwPlatformLockMutex (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> * mutex)</computeroutput></para><para>
Definition at line 94 of file posix_thread.c.</para>
<programlisting>95 {
96 &#32;&#32;&#32;&#32;assert(mutex-&gt;posix.allocated&#32;==&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>);
97 &#32;&#32;&#32;&#32;pthread_mutex_lock(&amp;mutex-&gt;posix.handle);
98 }
</programlisting>    </section><anchor xml:id="_posix__thread_8c_1a302f48b6d4dba6b3579449d8a43cfae7"/>    <section>
    <title>_glfwPlatformSetTls()</title>
<indexterm><primary>_glfwPlatformSetTls</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformSetTls</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> _glfwPlatformSetTls (<link linkend="_struct___g_l_f_wtls">_GLFWtls</link> * tls, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * value)</computeroutput></para><para>
Definition at line 68 of file posix_thread.c.</para>
<programlisting>69 {
70 &#32;&#32;&#32;&#32;assert(tls-&gt;posix.allocated&#32;==&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>);
71 &#32;&#32;&#32;&#32;pthread_setspecific(tls-&gt;posix.key,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
72 }
</programlisting>    </section><anchor xml:id="_posix__thread_8c_1a8b7744446237b1c292ba8a0b9d5e7f90"/>    <section>
    <title>_glfwPlatformUnlockMutex()</title>
<indexterm><primary>_glfwPlatformUnlockMutex</primary><secondary>posix_thread.c</secondary></indexterm>
<indexterm><primary>posix_thread.c</primary><secondary>_glfwPlatformUnlockMutex</secondary></indexterm>
<para><computeroutput><link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> _glfwPlatformUnlockMutex (<link linkend="_struct___g_l_f_wmutex">_GLFWmutex</link> * mutex)</computeroutput></para><para>
Definition at line 100 of file posix_thread.c.</para>
<programlisting>101 {
102 &#32;&#32;&#32;&#32;assert(mutex-&gt;posix.allocated&#32;==&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>);
103 &#32;&#32;&#32;&#32;pthread_mutex_unlock(&amp;mutex-&gt;posix.handle);
104 }
</programlisting></section>
</section>
</section>
