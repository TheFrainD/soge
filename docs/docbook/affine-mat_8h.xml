<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_affine-mat_8h">
<title>deps/cglm/include/cglm/affine-mat.h File Reference</title>
<indexterm><primary>deps/cglm/include/cglm/affine-mat.h</primary></indexterm>
<programlisting>#include &quot;common.h&quot;
#include &quot;mat4.h&quot;
#include &quot;mat3.h&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_include_2cglm_2common_8h_1a132eda4e8b82a997831a6c857f7d26c1">CGLM_INLINE</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_affine-mat_8h_1a7b037f8a0cc9322c8e39e23d5aa5a678">glm_mul</link> (<link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m1, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m2, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> dest)</para>

<para>this is similar to glm_mat4_mul but specialized to affine transform </para>
</listitem>
            <listitem><para><link linkend="_include_2cglm_2common_8h_1a132eda4e8b82a997831a6c857f7d26c1">CGLM_INLINE</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_affine-mat_8h_1a2fb55157c4db3012b51795408e1b0561">glm_mul_rot</link> (<link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m1, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m2, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> dest)</para>

<para>this is similar to glm_mat4_mul but specialized to affine transform </para>
</listitem>
            <listitem><para><link linkend="_include_2cglm_2common_8h_1a132eda4e8b82a997831a6c857f7d26c1">CGLM_INLINE</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_affine-mat_8h_1a0690b48c1733e0f31a8e5e9f68ff6aa4">glm_inv_tr</link> (<link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> mat)</para>

<para>inverse orthonormal rotation + translation matrix (ridig-body) </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_affine-mat_8h_1a0690b48c1733e0f31a8e5e9f68ff6aa4"/>    <section>
    <title>glm_inv_tr()</title>
<indexterm><primary>glm_inv_tr</primary><secondary>affine-mat.h</secondary></indexterm>
<indexterm><primary>affine-mat.h</primary><secondary>glm_inv_tr</secondary></indexterm>
<para><computeroutput><link linkend="_include_2cglm_2common_8h_1a132eda4e8b82a997831a6c857f7d26c1">CGLM_INLINE</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glm_inv_tr (<link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> mat)</computeroutput></para><para>

<para>inverse orthonormal rotation + translation matrix (ridig-body) </para>
</para>

<para><literallayout><computeroutput>X&#32;=&#32;|&#32;R&#32;&#32;T&#32;|&#32;&#32;&#32;X&apos;&#32;=&#32;|&#32;R&apos;&#32;-R&apos;T&#32;|
&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;1&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;1&#32;|
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>mat</entry>
                                <entry>
<para>matrix </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 158 of file affine-mat.h.</para>
<programlisting>158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
159 <emphasis role="preprocessor">#if&#32;defined(&#32;__SSE__&#32;)&#32;||&#32;defined(&#32;__SSE2__&#32;)</emphasis>
160 &#32;&#32;glm_inv_tr_sse2(mat);
161 <emphasis role="preprocessor">#elif&#32;defined(CGLM_NEON_FP)</emphasis>
162 &#32;&#32;glm_inv_tr_neon(mat);
163 <emphasis role="preprocessor">#else</emphasis>
164 &#32;&#32;<link linkend="_types_8h_1a8b0ff7d349466e900282bf2d8d9c98a3">CGLM_ALIGN_MAT</link>&#32;<link linkend="_types_8h_1a68e0f5fed49f769f2fca0e61daeab5f5">mat3</link>&#32;<link linkend="_glad_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>;
165 &#32;&#32;<link linkend="_types_8h_1a7a85e572ca5b793f224bae1ed1a827a1">CGLM_ALIGN</link>(8)&#32;&#32;<link linkend="_types_8h_1aa12dddc6c5b49b59657f5b9262d3196c">vec3</link>&#32;<link linkend="_glext_8h_1a7d65d00ca3b0630d9b5c52df855b19f5">t</link>;
166 
167 &#32;&#32;<emphasis role="comment">/*&#32;rotate&#32;*/</emphasis>
168 &#32;&#32;<link linkend="_mat4_8h_1a0d1b2b85f7d1ede6892eec642d9f8f23">glm_mat4_pick3t</link>(mat,&#32;<link linkend="_glad_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>);
169 &#32;&#32;<link linkend="_mat4_8h_1a820f4c98bd9e535e1d9a81aac2fa7792">glm_mat4_ins3</link>(<link linkend="_glad_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>,&#32;mat);
170 
171 &#32;&#32;<emphasis role="comment">/*&#32;translate&#32;*/</emphasis>
172 &#32;&#32;<link linkend="_mat3_8h_1a5e67abac6a1350b820c919ac5ec7a088">glm_mat3_mulv</link>(<link linkend="_glad_8h_1a42ce7cdc612e53abee15043f80220d97">r</link>,&#32;mat[3],&#32;<link linkend="_glext_8h_1a7d65d00ca3b0630d9b5c52df855b19f5">t</link>);
173 &#32;&#32;<link linkend="_vec3_8h_1a0670d5409499b75435fc5caed9e712aa">glm_vec3_negate</link>(<link linkend="_glext_8h_1a7d65d00ca3b0630d9b5c52df855b19f5">t</link>);
174 &#32;&#32;<link linkend="_vec3_8h_1a15bcfba5a95e389426accbf8843eb866">glm_vec3_copy</link>(<link linkend="_glext_8h_1a7d65d00ca3b0630d9b5c52df855b19f5">t</link>,&#32;mat[3]);
175 <emphasis role="preprocessor">#endif</emphasis>
176 }
</programlisting>    </section><anchor xml:id="_affine-mat_8h_1a7b037f8a0cc9322c8e39e23d5aa5a678"/>    <section>
    <title>glm_mul()</title>
<indexterm><primary>glm_mul</primary><secondary>affine-mat.h</secondary></indexterm>
<indexterm><primary>affine-mat.h</primary><secondary>glm_mul</secondary></indexterm>
<para><computeroutput><link linkend="_include_2cglm_2common_8h_1a132eda4e8b82a997831a6c857f7d26c1">CGLM_INLINE</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glm_mul (<link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m1, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m2, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> dest)</computeroutput></para><para>

<para>this is similar to glm_mat4_mul but specialized to affine transform </para>
</para>

<para>Matrix format should be: R R R X R R R Y R R R Z 0 0 0 W</para>

<para>this reduces some multiplications. It should be faster than mat4_mul. if you are not sure about matrix format then DON&apos;T use this! use mat4_mul</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>m1</entry>
                                <entry>
<para>affine matrix 1 </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>m2</entry>
                                <entry>
<para>affine matrix 2 </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>dest</entry>
                                <entry>
<para>result matrix </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 51 of file affine-mat.h.</para>
<programlisting>51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
52 <emphasis role="preprocessor">#ifdef&#32;__AVX__</emphasis>
53 &#32;&#32;glm_mul_avx(m1,&#32;m2,&#32;dest);
54 <emphasis role="preprocessor">#elif&#32;defined(&#32;__SSE__&#32;)&#32;||&#32;defined(&#32;__SSE2__&#32;)</emphasis>
55 &#32;&#32;glm_mul_sse2(m1,&#32;m2,&#32;dest);
56 <emphasis role="preprocessor">#elif&#32;defined(CGLM_NEON_FP)</emphasis>
57 &#32;&#32;glm_mul_neon(m1,&#32;m2,&#32;dest);
58 <emphasis role="preprocessor">#else</emphasis>
59 &#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;a00&#32;=&#32;m1[0][0],&#32;a01&#32;=&#32;m1[0][1],&#32;a02&#32;=&#32;m1[0][2],&#32;a03&#32;=&#32;m1[0][3],
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a10&#32;=&#32;m1[1][0],&#32;a11&#32;=&#32;m1[1][1],&#32;a12&#32;=&#32;m1[1][2],&#32;a13&#32;=&#32;m1[1][3],
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a20&#32;=&#32;m1[2][0],&#32;a21&#32;=&#32;m1[2][1],&#32;a22&#32;=&#32;m1[2][2],&#32;a23&#32;=&#32;m1[2][3],
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a30&#32;=&#32;m1[3][0],&#32;a31&#32;=&#32;m1[3][1],&#32;a32&#32;=&#32;m1[3][2],&#32;a33&#32;=&#32;m1[3][3],
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b00&#32;=&#32;m2[0][0],&#32;b01&#32;=&#32;m2[0][1],&#32;b02&#32;=&#32;m2[0][2],
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b10&#32;=&#32;m2[1][0],&#32;b11&#32;=&#32;m2[1][1],&#32;b12&#32;=&#32;m2[1][2],
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b20&#32;=&#32;m2[2][0],&#32;b21&#32;=&#32;m2[2][1],&#32;b22&#32;=&#32;m2[2][2],
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b30&#32;=&#32;m2[3][0],&#32;b31&#32;=&#32;m2[3][1],&#32;<link linkend="_include_2vally_2config_8h_1a9d1a1d99b6972446ae039de3d9599b96">b32</link>&#32;=&#32;m2[3][2],&#32;b33&#32;=&#32;m2[3][3];
68 
69 &#32;&#32;dest[0][0]&#32;=&#32;a00&#32;*&#32;b00&#32;+&#32;a10&#32;*&#32;b01&#32;+&#32;a20&#32;*&#32;b02;
70 &#32;&#32;dest[0][1]&#32;=&#32;a01&#32;*&#32;b00&#32;+&#32;a11&#32;*&#32;b01&#32;+&#32;a21&#32;*&#32;b02;
71 &#32;&#32;dest[0][2]&#32;=&#32;a02&#32;*&#32;b00&#32;+&#32;a12&#32;*&#32;b01&#32;+&#32;a22&#32;*&#32;b02;
72 &#32;&#32;dest[0][3]&#32;=&#32;a03&#32;*&#32;b00&#32;+&#32;a13&#32;*&#32;b01&#32;+&#32;a23&#32;*&#32;b02;
73 
74 &#32;&#32;dest[1][0]&#32;=&#32;a00&#32;*&#32;b10&#32;+&#32;a10&#32;*&#32;b11&#32;+&#32;a20&#32;*&#32;b12;
75 &#32;&#32;dest[1][1]&#32;=&#32;a01&#32;*&#32;b10&#32;+&#32;a11&#32;*&#32;b11&#32;+&#32;a21&#32;*&#32;b12;
76 &#32;&#32;dest[1][2]&#32;=&#32;a02&#32;*&#32;b10&#32;+&#32;a12&#32;*&#32;b11&#32;+&#32;a22&#32;*&#32;b12;
77 &#32;&#32;dest[1][3]&#32;=&#32;a03&#32;*&#32;b10&#32;+&#32;a13&#32;*&#32;b11&#32;+&#32;a23&#32;*&#32;b12;
78 
79 &#32;&#32;dest[2][0]&#32;=&#32;a00&#32;*&#32;b20&#32;+&#32;a10&#32;*&#32;b21&#32;+&#32;a20&#32;*&#32;b22;
80 &#32;&#32;dest[2][1]&#32;=&#32;a01&#32;*&#32;b20&#32;+&#32;a11&#32;*&#32;b21&#32;+&#32;a21&#32;*&#32;b22;
81 &#32;&#32;dest[2][2]&#32;=&#32;a02&#32;*&#32;b20&#32;+&#32;a12&#32;*&#32;b21&#32;+&#32;a22&#32;*&#32;b22;
82 &#32;&#32;dest[2][3]&#32;=&#32;a03&#32;*&#32;b20&#32;+&#32;a13&#32;*&#32;b21&#32;+&#32;a23&#32;*&#32;b22;
83 
84 &#32;&#32;dest[3][0]&#32;=&#32;a00&#32;*&#32;b30&#32;+&#32;a10&#32;*&#32;b31&#32;+&#32;a20&#32;*&#32;<link linkend="_include_2vally_2config_8h_1a9d1a1d99b6972446ae039de3d9599b96">b32</link>&#32;+&#32;a30&#32;*&#32;b33;
85 &#32;&#32;dest[3][1]&#32;=&#32;a01&#32;*&#32;b30&#32;+&#32;a11&#32;*&#32;b31&#32;+&#32;a21&#32;*&#32;<link linkend="_include_2vally_2config_8h_1a9d1a1d99b6972446ae039de3d9599b96">b32</link>&#32;+&#32;a31&#32;*&#32;b33;
86 &#32;&#32;dest[3][2]&#32;=&#32;a02&#32;*&#32;b30&#32;+&#32;a12&#32;*&#32;b31&#32;+&#32;a22&#32;*&#32;<link linkend="_include_2vally_2config_8h_1a9d1a1d99b6972446ae039de3d9599b96">b32</link>&#32;+&#32;a32&#32;*&#32;b33;
87 &#32;&#32;dest[3][3]&#32;=&#32;a03&#32;*&#32;b30&#32;+&#32;a13&#32;*&#32;b31&#32;+&#32;a23&#32;*&#32;<link linkend="_include_2vally_2config_8h_1a9d1a1d99b6972446ae039de3d9599b96">b32</link>&#32;+&#32;a33&#32;*&#32;b33;
88 <emphasis role="preprocessor">#endif</emphasis>
89 }
</programlisting>    </section><anchor xml:id="_affine-mat_8h_1a2fb55157c4db3012b51795408e1b0561"/>    <section>
    <title>glm_mul_rot()</title>
<indexterm><primary>glm_mul_rot</primary><secondary>affine-mat.h</secondary></indexterm>
<indexterm><primary>affine-mat.h</primary><secondary>glm_mul_rot</secondary></indexterm>
<para><computeroutput><link linkend="_include_2cglm_2common_8h_1a132eda4e8b82a997831a6c857f7d26c1">CGLM_INLINE</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glm_mul_rot (<link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m1, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> m2, <link linkend="_types_8h_1ae30f88fc32dfb3008b133367bbf0c3a1">mat4</link> dest)</computeroutput></para><para>

<para>this is similar to glm_mat4_mul but specialized to affine transform </para>
</para>

<para>Right Matrix format should be: R R R 0 R R R 0 R R R 0 0 0 0 1</para>

<para>this reduces some multiplications. It should be faster than mat4_mul. if you are not sure about matrix format then DON&apos;T use this! use mat4_mul</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>m1</entry>
                                <entry>
<para>affine matrix 1 </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>m2</entry>
                                <entry>
<para>affine matrix 2 </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>dest</entry>
                                <entry>
<para>result matrix </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 109 of file affine-mat.h.</para>
<programlisting>109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
110 <emphasis role="preprocessor">#if&#32;defined(&#32;__SSE__&#32;)&#32;||&#32;defined(&#32;__SSE2__&#32;)</emphasis>
111 &#32;&#32;glm_mul_rot_sse2(m1,&#32;m2,&#32;dest);
112 <emphasis role="preprocessor">#elif&#32;defined(CGLM_NEON_FP)</emphasis>
113 &#32;&#32;glm_mul_rot_neon(m1,&#32;m2,&#32;dest);
114 <emphasis role="preprocessor">#else</emphasis>
115 &#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;a00&#32;=&#32;m1[0][0],&#32;a01&#32;=&#32;m1[0][1],&#32;a02&#32;=&#32;m1[0][2],&#32;a03&#32;=&#32;m1[0][3],
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a10&#32;=&#32;m1[1][0],&#32;a11&#32;=&#32;m1[1][1],&#32;a12&#32;=&#32;m1[1][2],&#32;a13&#32;=&#32;m1[1][3],
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a20&#32;=&#32;m1[2][0],&#32;a21&#32;=&#32;m1[2][1],&#32;a22&#32;=&#32;m1[2][2],&#32;a23&#32;=&#32;m1[2][3],
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a30&#32;=&#32;m1[3][0],&#32;a31&#32;=&#32;m1[3][1],&#32;a32&#32;=&#32;m1[3][2],&#32;a33&#32;=&#32;m1[3][3],
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b00&#32;=&#32;m2[0][0],&#32;b01&#32;=&#32;m2[0][1],&#32;b02&#32;=&#32;m2[0][2],
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b10&#32;=&#32;m2[1][0],&#32;b11&#32;=&#32;m2[1][1],&#32;b12&#32;=&#32;m2[1][2],
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b20&#32;=&#32;m2[2][0],&#32;b21&#32;=&#32;m2[2][1],&#32;b22&#32;=&#32;m2[2][2];
123 
124 &#32;&#32;dest[0][0]&#32;=&#32;a00&#32;*&#32;b00&#32;+&#32;a10&#32;*&#32;b01&#32;+&#32;a20&#32;*&#32;b02;
125 &#32;&#32;dest[0][1]&#32;=&#32;a01&#32;*&#32;b00&#32;+&#32;a11&#32;*&#32;b01&#32;+&#32;a21&#32;*&#32;b02;
126 &#32;&#32;dest[0][2]&#32;=&#32;a02&#32;*&#32;b00&#32;+&#32;a12&#32;*&#32;b01&#32;+&#32;a22&#32;*&#32;b02;
127 &#32;&#32;dest[0][3]&#32;=&#32;a03&#32;*&#32;b00&#32;+&#32;a13&#32;*&#32;b01&#32;+&#32;a23&#32;*&#32;b02;
128 
129 &#32;&#32;dest[1][0]&#32;=&#32;a00&#32;*&#32;b10&#32;+&#32;a10&#32;*&#32;b11&#32;+&#32;a20&#32;*&#32;b12;
130 &#32;&#32;dest[1][1]&#32;=&#32;a01&#32;*&#32;b10&#32;+&#32;a11&#32;*&#32;b11&#32;+&#32;a21&#32;*&#32;b12;
131 &#32;&#32;dest[1][2]&#32;=&#32;a02&#32;*&#32;b10&#32;+&#32;a12&#32;*&#32;b11&#32;+&#32;a22&#32;*&#32;b12;
132 &#32;&#32;dest[1][3]&#32;=&#32;a03&#32;*&#32;b10&#32;+&#32;a13&#32;*&#32;b11&#32;+&#32;a23&#32;*&#32;b12;
133 
134 &#32;&#32;dest[2][0]&#32;=&#32;a00&#32;*&#32;b20&#32;+&#32;a10&#32;*&#32;b21&#32;+&#32;a20&#32;*&#32;b22;
135 &#32;&#32;dest[2][1]&#32;=&#32;a01&#32;*&#32;b20&#32;+&#32;a11&#32;*&#32;b21&#32;+&#32;a21&#32;*&#32;b22;
136 &#32;&#32;dest[2][2]&#32;=&#32;a02&#32;*&#32;b20&#32;+&#32;a12&#32;*&#32;b21&#32;+&#32;a22&#32;*&#32;b22;
137 &#32;&#32;dest[2][3]&#32;=&#32;a03&#32;*&#32;b20&#32;+&#32;a13&#32;*&#32;b21&#32;+&#32;a23&#32;*&#32;b22;
138 
139 &#32;&#32;dest[3][0]&#32;=&#32;a30;
140 &#32;&#32;dest[3][1]&#32;=&#32;a31;
141 &#32;&#32;dest[3][2]&#32;=&#32;a32;
142 &#32;&#32;dest[3][3]&#32;=&#32;a33;
143 <emphasis role="preprocessor">#endif</emphasis>
144 }
</programlisting></section>
</section>
</section>
