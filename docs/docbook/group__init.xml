<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__init">
<title>Initialization, version and error reference</title>
<indexterm><primary>Initialization, version and error reference</primary></indexterm>
<para>

<para>Functions and types related to initialization and error handling. </para>
 
</para>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group__errors">Error codes</link></para>

<para>Error codes. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_g_l_f_wallocator">GLFWallocator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>   1</para>

<para>One. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>   0</para>

<para>Zero. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gab9c0534709fda03ec8959201da3a9a18">GLFW_JOYSTICK_HAT_BUTTONS</link>   0x00050001</para>

<para>Joystick hat buttons init hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gaec269b24cf549ab46292c0125d8bbdce">GLFW_ANGLE_PLATFORM_TYPE</link>   0x00050002</para>

<para>ANGLE rendering backend init hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1ga9d38bf1fdf4f91d6565401734a7cd967">GLFW_PLATFORM</link>   0x00050003</para>

<para>Platform selection init hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gab937983147a3158d45f88fad7129d9f2">GLFW_COCOA_CHDIR_RESOURCES</link>   0x00051001</para>

<para>macOS specific init hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf">GLFW_COCOA_MENUBAR</link>   0x00051002</para>

<para>macOS specific init hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gaa341e303ebeb8e4199b8ab8be84351f6">GLFW_X11_XCB_VULKAN_SURFACE</link>   0x00052001</para>

<para>X11 specific init hint. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1ga18b2d37374d0dea28cd69194fa85b859">GLFW_ANY_PLATFORM</link>   0x00060000</para>

<para>Hint value that enables automatic platform selection. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1ga8d3d17df2ab57492cef665da52c603a1">GLFW_PLATFORM_WIN32</link>   0x00060001</para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1ga83b18714254f75bc2f0cdbafa0f10b6b">GLFW_PLATFORM_COCOA</link>   0x00060002</para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gac4b08906a3cbf26c518a4a543eedd740">GLFW_PLATFORM_WAYLAND</link>   0x00060003</para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gaf5333f3933e9c248a00cfda6523f386b">GLFW_PLATFORM_X11</link>   0x00060004</para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gac06fad5a4866ae7a1d7b2675fac72d7f">GLFW_PLATFORM_NULL</link>   0x00060005</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *(* <link linkend="_group__init_1gad3ff6f19415d52fbdcf3f0b57d8802aa">GLFWallocatefun</link>) (size_t <link linkend="_glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *user)</para>

<para>The function pointer type for memory allocation callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *(* <link linkend="_group__init_1gad17723fa35a481b6c8d438a000a8201f">GLFWreallocatefun</link>) (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *block, size_t <link linkend="_glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *user)</para>

<para>The function pointer type for memory reallocation callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__init_1ga7181615eda94c4b07bd72bdcee39fa28">GLFWdeallocatefun</link>) (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *block, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *user)</para>

<para>The function pointer type for memory deallocation callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__init_1ga8184701785c096b3862a75cda1bf44a3">GLFWerrorfun</link>) (int error_code, const char *description)</para>

<para>The function pointer type for error callbacks. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_g_l_f_wallocator">GLFWallocator</link> <link linkend="_group__init_1ga145c57d7f2aeda0b704a5a4ba1d6104b">GLFWallocator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Initializes the GLFW library. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Terminates the GLFW library. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f">glfwInitHint</link> (int hint, int <link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)</para>

<para>Sets the specified init hint to the desired value. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link> (const <link linkend="_struct_g_l_f_wallocator">GLFWallocator</link> *allocator)</para>

<para>Sets the init allocator to the desired value. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__init_1ga2402c7824ac0194c13722790ff9559ff">glfwGetVersion</link> (int *major, int *minor, int *rev)</para>

<para>Retrieves the version of the GLFW library. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char * <link linkend="_group__init_1ga7de7ba982c0cf66b35afdaa8bea071ae">glfwGetVersionString</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Returns a string describing the compile-time configuration. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link> (const char **description)</para>

<para>Returns and clears the last error for the calling thread. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__init_1ga8184701785c096b3862a75cda1bf44a3">GLFWerrorfun</link> <link linkend="_group__init_1ga746e2757d069eaea423349aca6ae097a">glfwSetErrorCallback</link> (<link linkend="_group__init_1ga8184701785c096b3862a75cda1bf44a3">GLFWerrorfun</link> callback)</para>

<para>Sets the error callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__init_1gac2d1735162a981fcaa8fb386740aa5ce">glfwGetPlatform</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Returns the currently selected platform. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba">glfwPlatformSupported</link> (int platform)</para>

<para>Returns whether the library includes support for the specified platform. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>GLFW version macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group__init_1ga6337d9ea43b22fc529b2bba066b4a576">GLFW_VERSION_MAJOR</link>   3</para>

<para>The major version number of the GLFW header. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gaf80d40f0aea7088ff337606e9c48f7a3">GLFW_VERSION_MINOR</link>   4</para>

<para>The minor version number of the GLFW header. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__init_1gab72ae2e2035d9ea461abc3495eac0502">GLFW_VERSION_REVISION</link>   0</para>

<para>The revision number of the GLFW header. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Functions and types related to initialization and error handling. </para>

<para>This is the reference documentation for initialization and termination of the library, version management and error handling. For more task-oriented information, see the <link linkend="_intro_guide">Introduction to the API</link>. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group__init_1gaec269b24cf549ab46292c0125d8bbdce"/>    <section>
    <title>GLFW_ANGLE_PLATFORM_TYPE</title>
<indexterm><primary>GLFW_ANGLE_PLATFORM_TYPE</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_ANGLE_PLATFORM_TYPE</secondary></indexterm>
<para><computeroutput>#define GLFW_ANGLE_PLATFORM_TYPE   0x00050002</computeroutput></para><para>

<para>ANGLE rendering backend init hint. </para>
</para>

<para>ANGLE rendering backend <link linkend="_intro_guide_1GLFW_ANGLE_PLATFORM_TYPE_hint">init hint</link>. </para>
<para>
Definition at line 1269 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga18b2d37374d0dea28cd69194fa85b859"/>    <section>
    <title>GLFW_ANY_PLATFORM</title>
<indexterm><primary>GLFW_ANY_PLATFORM</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_ANY_PLATFORM</secondary></indexterm>
<para><computeroutput>#define GLFW_ANY_PLATFORM   0x00060000</computeroutput></para><para>

<para>Hint value that enables automatic platform selection. </para>
</para>

<para>Hint value for <link linkend="_intro_guide_1GLFW_PLATFORM">GLFW_PLATFORM</link> that enables automatic platform selection. </para>
<para>
Definition at line 1298 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gab937983147a3158d45f88fad7129d9f2"/>    <section>
    <title>GLFW_COCOA_CHDIR_RESOURCES</title>
<indexterm><primary>GLFW_COCOA_CHDIR_RESOURCES</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_COCOA_CHDIR_RESOURCES</secondary></indexterm>
<para><computeroutput>#define GLFW_COCOA_CHDIR_RESOURCES   0x00051001</computeroutput></para><para>

<para>macOS specific init hint. </para>
</para>

<para>macOS specific <link linkend="_intro_guide_1GLFW_COCOA_CHDIR_RESOURCES_hint">init hint</link>. </para>
<para>
Definition at line 1279 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf"/>    <section>
    <title>GLFW_COCOA_MENUBAR</title>
<indexterm><primary>GLFW_COCOA_MENUBAR</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_COCOA_MENUBAR</secondary></indexterm>
<para><computeroutput>#define GLFW_COCOA_MENUBAR   0x00051002</computeroutput></para><para>

<para>macOS specific init hint. </para>
</para>

<para>macOS specific <link linkend="_intro_guide_1GLFW_COCOA_MENUBAR_hint">init hint</link>. </para>
<para>
Definition at line 1284 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5"/>    <section>
    <title>GLFW_FALSE</title>
<indexterm><primary>GLFW_FALSE</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_FALSE</secondary></indexterm>
<para><computeroutput>#define GLFW_FALSE   0</computeroutput></para><para>

<para>Zero. </para>
</para>

<para>This is only semantic sugar for the number 0. You can instead use <computeroutput>0</computeroutput> or <computeroutput>false</computeroutput> or <computeroutput>_False</computeroutput> or <computeroutput>GL_FALSE</computeroutput> or <computeroutput>VK_FALSE</computeroutput> or anything else that is equal to zero. </para>
<para>
Definition at line 322 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gab9c0534709fda03ec8959201da3a9a18"/>    <section>
    <title>GLFW_JOYSTICK_HAT_BUTTONS</title>
<indexterm><primary>GLFW_JOYSTICK_HAT_BUTTONS</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_JOYSTICK_HAT_BUTTONS</secondary></indexterm>
<para><computeroutput>#define GLFW_JOYSTICK_HAT_BUTTONS   0x00050001</computeroutput></para><para>

<para>Joystick hat buttons init hint. </para>
</para>

<para>Joystick hat buttons <link linkend="_intro_guide_1GLFW_JOYSTICK_HAT_BUTTONS">init hint</link>. </para>
<para>
Definition at line 1264 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga9d38bf1fdf4f91d6565401734a7cd967"/>    <section>
    <title>GLFW_PLATFORM</title>
<indexterm><primary>GLFW_PLATFORM</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_PLATFORM</secondary></indexterm>
<para><computeroutput>#define GLFW_PLATFORM   0x00050003</computeroutput></para><para>

<para>Platform selection init hint. </para>
</para>

<para>Platform selection <link linkend="_intro_guide_1GLFW_PLATFORM">init hint</link>. </para>
<para>
Definition at line 1274 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga83b18714254f75bc2f0cdbafa0f10b6b"/>    <section>
    <title>GLFW_PLATFORM_COCOA</title>
<indexterm><primary>GLFW_PLATFORM_COCOA</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_PLATFORM_COCOA</secondary></indexterm>
<para><computeroutput>#define GLFW_PLATFORM_COCOA   0x00060002</computeroutput></para><para>
Definition at line 1300 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gac06fad5a4866ae7a1d7b2675fac72d7f"/>    <section>
    <title>GLFW_PLATFORM_NULL</title>
<indexterm><primary>GLFW_PLATFORM_NULL</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_PLATFORM_NULL</secondary></indexterm>
<para><computeroutput>#define GLFW_PLATFORM_NULL   0x00060005</computeroutput></para><para>
Definition at line 1303 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gac4b08906a3cbf26c518a4a543eedd740"/>    <section>
    <title>GLFW_PLATFORM_WAYLAND</title>
<indexterm><primary>GLFW_PLATFORM_WAYLAND</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_PLATFORM_WAYLAND</secondary></indexterm>
<para><computeroutput>#define GLFW_PLATFORM_WAYLAND   0x00060003</computeroutput></para><para>
Definition at line 1301 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga8d3d17df2ab57492cef665da52c603a1"/>    <section>
    <title>GLFW_PLATFORM_WIN32</title>
<indexterm><primary>GLFW_PLATFORM_WIN32</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_PLATFORM_WIN32</secondary></indexterm>
<para><computeroutput>#define GLFW_PLATFORM_WIN32   0x00060001</computeroutput></para><para>
Definition at line 1299 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gaf5333f3933e9c248a00cfda6523f386b"/>    <section>
    <title>GLFW_PLATFORM_X11</title>
<indexterm><primary>GLFW_PLATFORM_X11</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_PLATFORM_X11</secondary></indexterm>
<para><computeroutput>#define GLFW_PLATFORM_X11   0x00060004</computeroutput></para><para>
Definition at line 1302 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba"/>    <section>
    <title>GLFW_TRUE</title>
<indexterm><primary>GLFW_TRUE</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_TRUE</secondary></indexterm>
<para><computeroutput>#define GLFW_TRUE   1</computeroutput></para><para>

<para>One. </para>
</para>

<para>This is only semantic sugar for the number 1. You can instead use <computeroutput>1</computeroutput> or <computeroutput>true</computeroutput> or <computeroutput>_True</computeroutput> or <computeroutput>GL_TRUE</computeroutput> or <computeroutput>VK_TRUE</computeroutput> or anything else that is equal to one. </para>
<para>
Definition at line 313 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga6337d9ea43b22fc529b2bba066b4a576"/>    <section>
    <title>GLFW_VERSION_MAJOR</title>
<indexterm><primary>GLFW_VERSION_MAJOR</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_VERSION_MAJOR</secondary></indexterm>
<para><computeroutput>#define GLFW_VERSION_MAJOR   3</computeroutput></para><para>

<para>The major version number of the GLFW header. </para>
</para>

<para>The major version number of the GLFW header. This is incremented when the API is changed in non-compatible ways. </para>
<para>
Definition at line 288 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gaf80d40f0aea7088ff337606e9c48f7a3"/>    <section>
    <title>GLFW_VERSION_MINOR</title>
<indexterm><primary>GLFW_VERSION_MINOR</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_VERSION_MINOR</secondary></indexterm>
<para><computeroutput>#define GLFW_VERSION_MINOR   4</computeroutput></para><para>

<para>The minor version number of the GLFW header. </para>
</para>

<para>The minor version number of the GLFW header. This is incremented when features are added to the API but it remains backward-compatible. </para>
<para>
Definition at line 295 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gab72ae2e2035d9ea461abc3495eac0502"/>    <section>
    <title>GLFW_VERSION_REVISION</title>
<indexterm><primary>GLFW_VERSION_REVISION</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_VERSION_REVISION</secondary></indexterm>
<para><computeroutput>#define GLFW_VERSION_REVISION   0</computeroutput></para><para>

<para>The revision number of the GLFW header. </para>
</para>

<para>The revision number of the GLFW header. This is incremented when a bug fix release is made that does not contain any API changes. </para>
<para>
Definition at line 302 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gaa341e303ebeb8e4199b8ab8be84351f6"/>    <section>
    <title>GLFW_X11_XCB_VULKAN_SURFACE</title>
<indexterm><primary>GLFW_X11_XCB_VULKAN_SURFACE</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFW_X11_XCB_VULKAN_SURFACE</secondary></indexterm>
<para><computeroutput>#define GLFW_X11_XCB_VULKAN_SURFACE   0x00052001</computeroutput></para><para>

<para>X11 specific init hint. </para>
</para>

<para>X11 specific <link linkend="_intro_guide_1GLFW_X11_XCB_VULKAN_SURFACE_hint">init hint</link>. </para>
<para>
Definition at line 1289 of file glfw3.h.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__init_1gad3ff6f19415d52fbdcf3f0b57d8802aa"/>    <section>
    <title>GLFWallocatefun</title>
<indexterm><primary>GLFWallocatefun</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFWallocatefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>*(* GLFWallocatefun) (size_t <link linkend="_glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *user)</computeroutput></para><para>

<para>The function pointer type for memory allocation callbacks. </para>
</para>

<para>This is the function pointer type for memory allocation callbacks. A memory allocation callback function has the following signature: <literallayout><computeroutput>void*&#32;function_name(size_t&#32;size,&#32;void*&#32;user)
</computeroutput></literallayout></para>

<para>This function must return either a memory block at least <computeroutput>size</computeroutput> bytes long, or <computeroutput>NULL</computeroutput> if allocation failed. Note that not all parts of GLFW handle allocation failures gracefully yet.</para>

<para>This function may be called during <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> but before the library is flagged as initialized, as well as during <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link> after the library is no longer flagged as initialized.</para>

<para>Any memory allocated by this function will be deallocated during library termination or earlier.</para>

<para>The size will always be greater than zero. Allocations of size zero are filtered out before reaching the custom allocator.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>size</entry>
                                <entry>
<para>The minimum size, in bytes, of the memory block. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>user</entry>
                                <entry>
<para>The user-defined pointer from the allocator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The address of the newly allocated memory block, or <computeroutput>NULL</computeroutput> if an error occurred.</para>
</formalpara>
@pointer_lifetime The returned memory block must be valid at least until it is deallocated.</para>

<para>@reentrancy This function should not call any GLFW function.</para>

<para>@thread_safety This function may be called from any thread that calls GLFW functions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1init_allocator">Custom heap memory allocator</link> </para>

<para><link linkend="_struct_g_l_f_wallocator">GLFWallocator</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.4. </para>
</formalpara>
</para>
<para>
Definition at line 1418 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga145c57d7f2aeda0b704a5a4ba1d6104b"/>    <section>
    <title>GLFWallocator</title>
<indexterm><primary>GLFWallocator</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFWallocator</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_g_l_f_wallocator">GLFWallocator</link> <link linkend="_struct_g_l_f_wallocator">GLFWallocator</link></computeroutput></para>
<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1init_allocator">Custom heap memory allocator</link> </para>

<para><link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.4. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group__init_1ga7181615eda94c4b07bd72bdcee39fa28"/>    <section>
    <title>GLFWdeallocatefun</title>
<indexterm><primary>GLFWdeallocatefun</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFWdeallocatefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWdeallocatefun) (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *block, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *user)</computeroutput></para><para>

<para>The function pointer type for memory deallocation callbacks. </para>
</para>

<para>This is the function pointer type for memory deallocation callbacks. A memory deallocation callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(void*&#32;block,&#32;void*&#32;user)
</computeroutput></literallayout></para>

<para>This function may deallocate the specified memory block. This memory block will have been allocated with the same allocator.</para>

<para>This function may be called during <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> but before the library is flagged as initialized, as well as during <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link> after the library is no longer flagged as initialized.</para>

<para>The block address will never be <computeroutput>NULL</computeroutput>. Deallocations of <computeroutput>NULL</computeroutput> are filtered out before reaching the custom allocator.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>block</entry>
                                <entry>
<para>The address of the memory block to deallocate. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>user</entry>
                                <entry>
<para>The user-defined pointer from the allocator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @pointer_lifetime The specified memory block will not be accessed by GLFW after this function is called.</para>

<para>@reentrancy This function should not call any GLFW function.</para>

<para>@thread_safety This function may be called from any thread that calls GLFW functions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1init_allocator">Custom heap memory allocator</link> </para>

<para><link linkend="_struct_g_l_f_wallocator">GLFWallocator</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.4. </para>
</formalpara>
</para>
<para>
Definition at line 1500 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1ga8184701785c096b3862a75cda1bf44a3"/>    <section>
    <title>GLFWerrorfun</title>
<indexterm><primary>GLFWerrorfun</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFWerrorfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWerrorfun) (int error_code, const char *description)</computeroutput></para><para>

<para>The function pointer type for error callbacks. </para>
</para>

<para>This is the function pointer type for error callbacks. An error callback function has the following signature: <literallayout><computeroutput>void&#32;callback_name(int&#32;error_code,&#32;const&#32;char*&#32;description)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>error_code</entry>
                                <entry>
<para>An <link linkend="_group__errors">error code</link>. Future releases may add more error codes. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>description</entry>
                                <entry>
<para>A UTF-8 encoded string describing the error.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @pointer_lifetime The error description string is valid until the callback function returns.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1error_handling">Error handling</link> </para>

<para><link linkend="_group__init_1ga746e2757d069eaea423349aca6ae097a">glfwSetErrorCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1524 of file glfw3.h.</para>
    </section><anchor xml:id="_group__init_1gad17723fa35a481b6c8d438a000a8201f"/>    <section>
    <title>GLFWreallocatefun</title>
<indexterm><primary>GLFWreallocatefun</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>GLFWreallocatefun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>*(* GLFWreallocatefun) (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *block, size_t <link linkend="_glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *user)</computeroutput></para><para>

<para>The function pointer type for memory reallocation callbacks. </para>
</para>

<para>This is the function pointer type for memory reallocation callbacks. A memory reallocation callback function has the following signature: <literallayout><computeroutput>void*&#32;function_name(void*&#32;block,&#32;size_t&#32;size,&#32;void*&#32;user)
</computeroutput></literallayout></para>

<para>This function must return a memory block at least <computeroutput>size</computeroutput> bytes long, or <computeroutput>NULL</computeroutput> if allocation failed. Note that not all parts of GLFW handle allocation failures gracefully yet.</para>

<para>This function may be called during <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> but before the library is flagged as initialized, as well as during <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link> after the library is no longer flagged as initialized.</para>

<para>Any memory allocated by this function will be deallocated during library termination or earlier.</para>

<para>The block address will never be <computeroutput>NULL</computeroutput> and the size will always be greater than zero. Reallocations of a block to size zero are converted into deallocations. Reallocations of <computeroutput>NULL</computeroutput> to a non-zero size are converted into regular allocations.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>block</entry>
                                <entry>
<para>The address of the memory block to reallocate. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>size</entry>
                                <entry>
<para>The new minimum size, in bytes, of the memory block. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>user</entry>
                                <entry>
<para>The user-defined pointer from the allocator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The address of the newly allocated or resized memory block, or <computeroutput>NULL</computeroutput> if an error occurred.</para>
</formalpara>
@pointer_lifetime The returned memory block must be valid at least until it is deallocated.</para>

<para>@reentrancy This function should not call any GLFW function.</para>

<para>@thread_safety This function may be called from any thread that calls GLFW functions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1init_allocator">Custom heap memory allocator</link> </para>

<para><link linkend="_struct_g_l_f_wallocator">GLFWallocator</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.4. </para>
</formalpara>
</para>
<para>
Definition at line 1463 of file glfw3.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e"/>    <section>
    <title>glfwGetError()</title>
<indexterm><primary>glfwGetError</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwGetError</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetError (const char ** description)</computeroutput></para><para>

<para>Returns and clears the last error for the calling thread. </para>
</para>

<para>This function returns and clears the <link linkend="_group__errors">error code</link> of the last error that occurred on the calling thread, and optionally a UTF-8 encoded human-readable description of it. If no error has occurred since the last call, it returns <link linkend="_group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4">GLFW_NO_ERROR</link> (zero) and the description pointer is set to <computeroutput>NULL</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>description</entry>
                                <entry>
<para>Where to store the error description pointer, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The last error code for the calling thread, or <link linkend="_group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4">GLFW_NO_ERROR</link> (zero).</para>
</formalpara>
@errors None.</para>

<para>@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is guaranteed to be valid only until the next error occurs or the library is terminated.</para>

<para><formalpara><title>Remarks</title>

<para>This function may be called before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>.</para>
</formalpara>
@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1error_handling">Error handling</link> </para>

<para><link linkend="_group__init_1ga746e2757d069eaea423349aca6ae097a">glfwSetErrorCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 453 of file init.c.</para>
<programlisting>454 {
455 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_werror">_GLFWerror</link>*&#32;<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>;
456 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;code&#32;=&#32;<link linkend="_group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4">GLFW_NO_ERROR</link>;
457 
458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(description)
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*description&#32;=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
460 
461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aef3b20f1280cca7cae8316626af42c45">initialized</link>)
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>&#32;=&#32;<link linkend="_internal_8h_1a0a0787a86bb4e04f17a8d24e70e1f013">_glfwPlatformGetTls</link>(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a3c64f08c60bd21f7349ec252e65c6aa9">errorSlot</link>);
463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>&#32;=&#32;&amp;_glfwMainThreadError;
465 
466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>)
467 &#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;code&#32;=&#32;<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>-&gt;code;
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>-&gt;code&#32;=&#32;<link linkend="_group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4">GLFW_NO_ERROR</link>;
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(description&#32;&amp;&amp;&#32;code)
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*description&#32;=&#32;<link linkend="_cave__main_8c_1a42c6b1edc1bd763019f0eb5edce18793">error</link>-&gt;description;
472 &#32;&#32;&#32;&#32;}
473 
474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;code;
475 }
</programlisting>    </section><anchor xml:id="_group__init_1gac2d1735162a981fcaa8fb386740aa5ce"/>    <section>
    <title>glfwGetPlatform()</title>
<indexterm><primary>glfwGetPlatform</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwGetPlatform</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetPlatform (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Returns the currently selected platform. </para>
</para>

<para>This function returns the platform that was selected during initialization. The returned value will be one of <computeroutput>GLFW_PLATFORM_WIN32</computeroutput>, <computeroutput>GLFW_PLATFORM_COCOA</computeroutput>, <computeroutput>GLFW_PLATFORM_WAYLAND</computeroutput>, <computeroutput>GLFW_PLATFORM_X11</computeroutput> or <computeroutput>GLFW_PLATFORM_NULL</computeroutput>.</para>

<para><formalpara><title>Returns</title>

<para>The currently selected platform, or zero if an error occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1platform">Runtime platform selection</link> </para>

<para><link linkend="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba">glfwPlatformSupported</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.4. </para>
</formalpara>
</para>
<para>
Definition at line 114 of file platform.c.</para>
<programlisting>115 {
116 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(0);
117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1adadc0cac5c197cc28788bc4993a9f6da">platformID</link>;
118 }
</programlisting>    </section><anchor xml:id="_group__init_1ga2402c7824ac0194c13722790ff9559ff"/>    <section>
    <title>glfwGetVersion()</title>
<indexterm><primary>glfwGetVersion</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwGetVersion</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetVersion (int * major, int * minor, int * rev)</computeroutput></para><para>

<para>Retrieves the version of the GLFW library. </para>
</para>

<para>This function retrieves the major, minor and revision numbers of the GLFW library. It is intended for when you are using GLFW as a shared library and want to ensure that you are using the minimum required version.</para>

<para>Any or all of the version arguments may be <computeroutput>NULL</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out                                </entry>                                <entry>major</entry>
                                <entry>
<para>Where to store the major version number, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>minor</entry>
                                <entry>
<para>Where to store the minor version number, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>rev</entry>
                                <entry>
<para>Where to store the revision number, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors None.</para>

<para><formalpara><title>Remarks</title>

<para>This function may be called before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>.</para>
</formalpara>
@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1intro_version">Version management</link> </para>

<para><link linkend="_group__init_1ga7de7ba982c0cf66b35afdaa8bea071ae">glfwGetVersionString</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
<para>
Definition at line 443 of file init.c.</para>
<programlisting>444 {
445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(major&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*major&#32;=&#32;<link linkend="_group__init_1ga6337d9ea43b22fc529b2bba066b4a576">GLFW_VERSION_MAJOR</link>;
447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minor&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*minor&#32;=&#32;<link linkend="_group__init_1gaf80d40f0aea7088ff337606e9c48f7a3">GLFW_VERSION_MINOR</link>;
449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rev&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*rev&#32;=&#32;<link linkend="_group__init_1gab72ae2e2035d9ea461abc3495eac0502">GLFW_VERSION_REVISION</link>;
451 }
</programlisting>    </section><anchor xml:id="_group__init_1ga7de7ba982c0cf66b35afdaa8bea071ae"/>    <section>
    <title>glfwGetVersionString()</title>
<indexterm><primary>glfwGetVersionString</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwGetVersionString</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char* glfwGetVersionString (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Returns a string describing the compile-time configuration. </para>
</para>

<para>This function returns the compile-time generated <link linkend="_intro_guide_1intro_version_string">version string</link> of the GLFW library binary. It describes the version, platforms, compiler and any platform or operating system specific compile-time options. It should not be confused with the OpenGL or OpenGL ES version string, queried with <computeroutput>glGetString</computeroutput>.</para>

<para><emphasis role="bold">Do not use the version string</emphasis> to parse the GLFW library version. The <link linkend="_group__init_1ga2402c7824ac0194c13722790ff9559ff">glfwGetVersion</link> function provides the version of the running library binary in numerical format.</para>

<para><emphasis role="bold">Do not use the version string</emphasis> to parse what platforms are supported. The <link linkend="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba">glfwPlatformSupported</link> function lets you query platform support.</para>

<para><formalpara><title>Returns</title>

<para>The ASCII encoded GLFW version string.</para>
</formalpara>
@errors None.</para>

<para><formalpara><title>Remarks</title>

<para>This function may be called before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>.</para>
</formalpara>
@pointer_lifetime The returned string is static and compile-time generated.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1intro_version">Version management</link> </para>

<para><link linkend="_group__init_1ga2402c7824ac0194c13722790ff9559ff">glfwGetVersion</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 147 of file platform.c.</para>
<programlisting>148 {
149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_internal_8h_1a49e6e8977bd1fed7778c71dffa019eae">_GLFW_VERSION_NUMBER</link>
150 <emphasis role="preprocessor">#if&#32;defined(_GLFW_WIN32)</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Win32&#32;WGL&quot;</emphasis>
152 <emphasis role="preprocessor">#endif</emphasis>
153 <emphasis role="preprocessor">#if&#32;defined(_GLFW_COCOA)</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Cocoa&#32;NSGL&quot;</emphasis>
155 <emphasis role="preprocessor">#endif</emphasis>
156 <emphasis role="preprocessor">#if&#32;defined(_GLFW_WAYLAND)</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Wayland&quot;</emphasis>
158 <emphasis role="preprocessor">#endif</emphasis>
159 <emphasis role="preprocessor">#if&#32;defined(_GLFW_X11)</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;X11&#32;GLX&quot;</emphasis>
161 <emphasis role="preprocessor">#endif</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Null&quot;</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;EGL&quot;</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;OSMesa&quot;</emphasis>
165 <emphasis role="preprocessor">#if&#32;defined(__MINGW64_VERSION_MAJOR)</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;MinGW-w64&quot;</emphasis>
167 <emphasis role="preprocessor">#elif&#32;defined(__MINGW32__)</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;MinGW&quot;</emphasis>
169 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;VisualC&quot;</emphasis>
171 <emphasis role="preprocessor">#endif</emphasis>
172 <emphasis role="preprocessor">#if&#32;defined(_GLFW_USE_HYBRID_HPG)&#32;||&#32;defined(_GLFW_USE_OPTIMUS_HPG)</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;hybrid-GPU&quot;</emphasis>
174 <emphasis role="preprocessor">#endif</emphasis>
175 <emphasis role="preprocessor">#if&#32;defined(_POSIX_MONOTONIC_CLOCK)</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;monotonic&quot;</emphasis>
177 <emphasis role="preprocessor">#endif</emphasis>
178 <emphasis role="preprocessor">#if&#32;defined(_GLFW_BUILD_DLL)</emphasis>
179 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;DLL&quot;</emphasis>
181 <emphasis role="preprocessor">#elif&#32;defined(__APPLE__)</emphasis>
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;dynamic&quot;</emphasis>
183 <emphasis role="preprocessor">#else</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;shared&quot;</emphasis>
185 <emphasis role="preprocessor">#endif</emphasis>
186 <emphasis role="preprocessor">#endif</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
188 }
</programlisting>    </section><anchor xml:id="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40"/>    <section>
    <title>glfwInit()</title>
<indexterm><primary>glfwInit</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwInit</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwInit (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Initializes the GLFW library. </para>
</para>

<para>This function initializes the GLFW library. Before most GLFW functions can be used, GLFW must be initialized, and before an application terminates GLFW should be terminated in order to free any resources allocated during or after initialization.</para>

<para>If this function fails, it calls <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link> before returning. If it succeeds, you should call <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link> before the application exits.</para>

<para>Additional calls to this function after successful initialization but before termination will return <computeroutput>GLFW_TRUE</computeroutput> immediately.</para>

<para>The <link linkend="_intro_guide_1GLFW_PLATFORM">GLFW_PLATFORM</link> init hint controls which platforms are considered during initialization. This also depends on which platforms the library was compiled to support.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if successful, or <computeroutput>GLFW_FALSE</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga3608c6c29ab7a72f3bf019f4c3a2563d">GLFW_PLATFORM_UNAVAILABLE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@macos This function will change the current directory of the application to the <computeroutput>Contents/Resources</computeroutput> subdirectory of the application&apos;s bundle, if present. This can be disabled with the <link linkend="_group__init_1gab937983147a3158d45f88fad7129d9f2">GLFW_COCOA_CHDIR_RESOURCES</link> init hint.</para>

<para>@macos This function will create the main menu and dock icon for the application. If GLFW finds a <computeroutput>MainMenu.nib</computeroutput> it is loaded and assumed to contain a menu bar. Otherwise a minimal menu bar is created manually with common commands like Hide, Quit and About. The About entry opens a minimal about dialog with information from the application&apos;s bundle. The menu bar and dock icon can be disabled entirely with the <link linkend="_group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf">GLFW_COCOA_MENUBAR</link> init hint.</para>

<para>@x11 This function will set the <computeroutput>LC_CTYPE</computeroutput> category of the application locale according to the current environment if that category is still &quot;C&quot;. This is because the &quot;C&quot; locale breaks Unicode text input.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1intro_init">Initialization and termination</link> </para>

<para><link linkend="_group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f">glfwInitHint</link> </para>

<para><link linkend="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e">glfwInitAllocator</link> </para>

<para><link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
<para>
Definition at line 343 of file init.c.</para>
<programlisting>344 {
345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aef3b20f1280cca7cae8316626af42c45">initialized</link>)
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
347 
348 &#32;&#32;&#32;&#32;memset(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>));
349 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a86550c51bab958a99de2e243e48dd8e8">init</link>&#32;=&#32;_glfwInitHints;
350 
351 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a619cff4c7af731aa58dd3484d7fab761">allocator</link>&#32;=&#32;_glfwInitAllocator;
352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a619cff4c7af731aa58dd3484d7fab761">allocator</link>.<link linkend="_struct_g_l_f_wallocator_1a18a798136f17a9cb105be18312193bf7">allocate</link>)
353 &#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a619cff4c7af731aa58dd3484d7fab761">allocator</link>.<link linkend="_struct_g_l_f_wallocator_1a18a798136f17a9cb105be18312193bf7">allocate</link>&#32;&#32;&#32;=&#32;defaultAllocate;
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a619cff4c7af731aa58dd3484d7fab761">allocator</link>.<link linkend="_struct_g_l_f_wallocator_1af5a674af9e170095b968f467233437be">reallocate</link>&#32;=&#32;defaultReallocate;
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a619cff4c7af731aa58dd3484d7fab761">allocator</link>.<link linkend="_struct_g_l_f_wallocator_1ab74cf9a969e73e6eb65a6112a591a988">deallocate</link>&#32;=&#32;defaultDeallocate;
357 &#32;&#32;&#32;&#32;}
358 
359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_internal_8h_1ad112b3b0da5acafb0091c6bcd8bc23d0">_glfwSelectPlatform</link>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a86550c51bab958a99de2e243e48dd8e8">init</link>.<link linkend="_struct___g_l_f_winitconfig_1a253300e3d980415b24aeafb2b5ca3351">platformID</link>,&#32;&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>))
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
361 
362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1af79a9d797672428713e58c2a91b6cac8">init</link>())
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;terminate();
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
366 &#32;&#32;&#32;&#32;}
367 
368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_internal_8h_1a6c5f30449fe62f561c9b01f839ec0438">_glfwPlatformCreateMutex</link>(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a1bc5de4505509cfb4911760237845ee2">errorLock</link>)&#32;||
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_internal_8h_1afad94d57290ac85fbece14f93c41754f">_glfwPlatformCreateTls</link>(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a3c64f08c60bd21f7349ec252e65c6aa9">errorSlot</link>)&#32;||
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_internal_8h_1afad94d57290ac85fbece14f93c41754f">_glfwPlatformCreateTls</link>(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aa267e959a6f2dae405c0c15220e0cfb2">contextSlot</link>))
371 &#32;&#32;&#32;&#32;{
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;terminate();
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
374 &#32;&#32;&#32;&#32;}
375 
376 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a302f48b6d4dba6b3579449d8a43cfae7">_glfwPlatformSetTls</link>(&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a3c64f08c60bd21f7349ec252e65c6aa9">errorSlot</link>,&#32;&amp;_glfwMainThreadError);
377 
378 &#32;&#32;&#32;&#32;<link linkend="_deps_2glfw_2src_2input_8c_1a1dab257a37caa6b39cfe9924c2487db6">_glfwInitGamepadMappings</link>();
379 
380 &#32;&#32;&#32;&#32;<link linkend="_cocoa__time_8c_1a6029c1379e357d7b4e8836e1c1ad2fa2">_glfwPlatformInitTimer</link>();
381 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aad3e22c47c3095922e6bcbab7f4fe113">timer</link>.<link linkend="_struct___g_l_f_wlibrary_1a1afbda4be41aa343745fc99acc9f895b">offset</link>&#32;=&#32;<link linkend="_cocoa__time_8c_1a5ee7e09b380d3afdd3c2738b726a2a6e">_glfwPlatformGetTimerValue</link>();
382 
383 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aef3b20f1280cca7cae8316626af42c45">initialized</link>&#32;=&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
384 
385 &#32;&#32;&#32;&#32;<link linkend="_group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4">glfwDefaultWindowHints</link>();
386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
387 }
</programlisting>    </section><anchor xml:id="_group__init_1ga0f4c8556a21d9e774a0ba0332da1748e"/>    <section>
    <title>glfwInitAllocator()</title>
<indexterm><primary>glfwInitAllocator</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwInitAllocator</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwInitAllocator (const <link linkend="_struct_g_l_f_wallocator">GLFWallocator</link> * allocator)</computeroutput></para><para>

<para>Sets the init allocator to the desired value. </para>
</para>

<para>To use the default allocator, call this function with a <computeroutput>NULL</computeroutput> argument.</para>

<para>If you specify an allocator struct, every member must be a valid function pointer. If any member is <computeroutput>NULL</computeroutput>, this function emits <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link> and the init allocator is unchanged.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>allocator</entry>
                                <entry>
<para>The allocator to use at the next initialization, or <computeroutput>NULL</computeroutput> to use the default one.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>.</para>

<para>@pointer_lifetime The specified allocator is copied before this function returns.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1init_allocator">Custom heap memory allocator</link> </para>

<para><link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.4. </para>
</formalpara>
</para>
<para>
Definition at line 425 of file init.c.</para>
<programlisting>426 {
427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allocator)
428 &#32;&#32;&#32;&#32;{
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allocator-&gt;<link linkend="_struct_g_l_f_wallocator_1a18a798136f17a9cb105be18312193bf7">allocate</link>&#32;&amp;&amp;&#32;allocator-&gt;<link linkend="_struct_g_l_f_wallocator_1af5a674af9e170095b968f467233437be">reallocate</link>&#32;&amp;&amp;&#32;allocator-&gt;<link linkend="_struct_g_l_f_wallocator_1ab74cf9a969e73e6eb65a6112a591a988">deallocate</link>)
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_glfwInitAllocator&#32;=&#32;*allocator;
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,&#32;<emphasis role="stringliteral">&quot;Missing&#32;function&#32;in&#32;allocator&quot;</emphasis>);
433 &#32;&#32;&#32;&#32;}
434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;_glfwInitAllocator,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_g_l_f_wallocator">GLFWallocator</link>));
436 }
</programlisting>    </section><anchor xml:id="_group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f"/>    <section>
    <title>glfwInitHint()</title>
<indexterm><primary>glfwInitHint</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwInitHint</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwInitHint (int hint, int value)</computeroutput></para><para>

<para>Sets the specified init hint to the desired value. </para>
</para>

<para>This function sets hints for the next initialization of GLFW.</para>

<para>The values you set hints to are never reset by GLFW, but they only take effect during initialization. Once GLFW has been initialized, any values you set will be ignored until the library is terminated and initialized again.</para>

<para>Some hints are platform specific. These may be set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>hint</entry>
                                <entry>
<para>The <link linkend="_intro_guide_1init_hints">init hint</link> to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>The new value of the init hint.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>.</para>

<para><formalpara><title>Remarks</title>

<para>This function may be called before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para>init_hints </para>

<para><link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 397 of file init.c.</para>
<programlisting>398 {
399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(hint)
400 &#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__init_1gab9c0534709fda03ec8959201da3a9a18">GLFW_JOYSTICK_HAT_BUTTONS</link>:
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_glfwInitHints.<link linkend="_struct___g_l_f_winitconfig_1aad1f2044edaa145d86bed1fe2b61fa06">hatButtons</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__init_1gaec269b24cf549ab46292c0125d8bbdce">GLFW_ANGLE_PLATFORM_TYPE</link>:
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_glfwInitHints.<link linkend="_struct___g_l_f_winitconfig_1a6b47f84f808ef3b893e915bb3ada5fce">angleType</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__init_1ga9d38bf1fdf4f91d6565401734a7cd967">GLFW_PLATFORM</link>:
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_glfwInitHints.<link linkend="_struct___g_l_f_winitconfig_1a253300e3d980415b24aeafb2b5ca3351">platformID</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__init_1gab937983147a3158d45f88fad7129d9f2">GLFW_COCOA_CHDIR_RESOURCES</link>:
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_glfwInitHints.<link linkend="_struct___g_l_f_winitconfig_1ac2f47b2a12635cb2d8972f6690a29021">ns</link>.<link linkend="_struct___g_l_f_winitconfig_1a9a76e6c2480a3e6062947d2e9a0743c6">chdir</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf">GLFW_COCOA_MENUBAR</link>:
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_glfwInitHints.<link linkend="_struct___g_l_f_winitconfig_1ac2f47b2a12635cb2d8972f6690a29021">ns</link>.<link linkend="_struct___g_l_f_winitconfig_1aeef44c014800b5e07490919431b446ce">menubar</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__init_1gaa341e303ebeb8e4199b8ab8be84351f6">GLFW_X11_XCB_VULKAN_SURFACE</link>:
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_glfwInitHints.<link linkend="_struct___g_l_f_winitconfig_1a37a48f3528dc887fb7e38b877920eab0">x11</link>.<link linkend="_struct___g_l_f_winitconfig_1a8299abc62cc9ffe202a0e19b46b547cd">xcbVulkanSurface</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
419 &#32;&#32;&#32;&#32;}
420 
421 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;init&#32;hint&#32;0x%08X&quot;</emphasis>,&#32;hint);
423 }
</programlisting>    </section><anchor xml:id="_group__init_1ga7b57ba0946498e8621f4d969bbcecfba"/>    <section>
    <title>glfwPlatformSupported()</title>
<indexterm><primary>glfwPlatformSupported</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwPlatformSupported</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwPlatformSupported (int platform)</computeroutput></para><para>

<para>Returns whether the library includes support for the specified platform. </para>
</para>

<para>This function returns whether the library was compiled with support for the specified platform. The platform must be one of <computeroutput>GLFW_PLATFORM_WIN32</computeroutput>, <computeroutput>GLFW_PLATFORM_COCOA</computeroutput>, <computeroutput>GLFW_PLATFORM_WAYLAND</computeroutput>, <computeroutput>GLFW_PLATFORM_X11</computeroutput> or <computeroutput>GLFW_PLATFORM_NULL</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>platform</entry>
                                <entry>
<para>The platform to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if the platform is supported, or <computeroutput>GLFW_FALSE</computeroutput> otherwise.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para><formalpara><title>Remarks</title>

<para>This function may be called before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>.</para>
</formalpara>
@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1platform">Runtime platform selection</link> </para>

<para><link linkend="_group__init_1gac2d1735162a981fcaa8fb386740aa5ce">glfwGetPlatform</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.4. </para>
</formalpara>
</para>
<para>
Definition at line 120 of file platform.c.</para>
<programlisting>121 {
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(supportedPlatforms)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(supportedPlatforms[0]);
123 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i;
124 
125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(platformID&#32;!=&#32;<link linkend="_group__init_1ga8d3d17df2ab57492cef665da52c603a1">GLFW_PLATFORM_WIN32</link>&#32;&amp;&amp;
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;platformID&#32;!=&#32;<link linkend="_group__init_1ga83b18714254f75bc2f0cdbafa0f10b6b">GLFW_PLATFORM_COCOA</link>&#32;&amp;&amp;
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;platformID&#32;!=&#32;<link linkend="_group__init_1gac4b08906a3cbf26c518a4a543eedd740">GLFW_PLATFORM_WAYLAND</link>&#32;&amp;&amp;
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;platformID&#32;!=&#32;<link linkend="_group__init_1gaf5333f3933e9c248a00cfda6523f386b">GLFW_PLATFORM_X11</link>&#32;&amp;&amp;
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;platformID&#32;!=&#32;<link linkend="_group__init_1gac06fad5a4866ae7a1d7b2675fac72d7f">GLFW_PLATFORM_NULL</link>)
130 &#32;&#32;&#32;&#32;{
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;platform&#32;ID&#32;0x%08X&quot;</emphasis>,&#32;platformID);
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
133 &#32;&#32;&#32;&#32;}
134 
135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(platformID&#32;==&#32;<link linkend="_group__init_1gac06fad5a4866ae7a1d7b2675fac72d7f">GLFW_PLATFORM_NULL</link>)
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
137 
138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;&#32;i&#32;&lt;&#32;<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>;&#32;&#32;i++)
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(platformID&#32;==&#32;supportedPlatforms[i].<link linkend="_platform_8c_1af180e926633cde08a05ccbc3af397ee4">ID</link>)
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
142 &#32;&#32;&#32;&#32;}
143 
144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
145 }
</programlisting>    </section><anchor xml:id="_group__init_1ga746e2757d069eaea423349aca6ae097a"/>    <section>
    <title>glfwSetErrorCallback()</title>
<indexterm><primary>glfwSetErrorCallback</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwSetErrorCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__init_1ga8184701785c096b3862a75cda1bf44a3">GLFWerrorfun</link> glfwSetErrorCallback (<link linkend="_group__init_1ga8184701785c096b3862a75cda1bf44a3">GLFWerrorfun</link> callback)</computeroutput></para><para>

<para>Sets the error callback. </para>
</para>

<para>This function sets the error callback, which is called with an error code and a human-readable description each time a GLFW error occurs.</para>

<para>The error code is set before the callback is called. Calling <link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link> from the error callback will return the same value as the error code argument.</para>

<para>The error callback is called on the thread where the error occurred. If you are using GLFW from multiple threads, your error callback needs to be written accordingly.</para>

<para>Because the description string may have been generated specifically for that error, it is not guaranteed to be valid after the callback has returned. If you wish to use it after the callback returns, you need to make a copy.</para>

<para>Once set, the error callback remains set even after the library has been terminated.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;callback_name(int&#32;error_code,&#32;const&#32;char*&#32;description)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__init_1ga8184701785c096b3862a75cda1bf44a3">callback pointer type</link>.</para>

<para>@errors None.</para>

<para><formalpara><title>Remarks</title>

<para>This function may be called before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1error_handling">Error handling</link> </para>

<para><link linkend="_group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e">glfwGetError</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 477 of file init.c.</para>
<programlisting>478 {
479 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__init_1ga8184701785c096b3862a75cda1bf44a3">GLFWerrorfun</link>,&#32;_glfwErrorCallback,&#32;cbfun);
480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
481 }
</programlisting>    </section><anchor xml:id="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504"/>    <section>
    <title>glfwTerminate()</title>
<indexterm><primary>glfwTerminate</primary><secondary>Initialization, version and error reference</secondary></indexterm>
<indexterm><primary>Initialization, version and error reference</primary><secondary>glfwTerminate</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwTerminate (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Terminates the GLFW library. </para>
</para>

<para>This function destroys all remaining windows and cursors, restores any modified gamma ramps and frees any other allocated resources. Once this function is called, you must again call <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> successfully before you will be able to use most GLFW functions.</para>

<para>If GLFW has been successfully initialized, this function should be called before the application exits. If initialization fails, there is no need to call this function, as it is called by <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link> before it returns failure.</para>

<para>This function has no effect if GLFW is not initialized.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>This function may be called before <link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link>.</para>
</formalpara>
<warning><title>Warning</title>

<para>The contexts of any remaining windows must not be current on any other thread when this function is called.</para>
</warning>
@reentrancy This function must not be called from a callback.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_intro_guide_1intro_init">Initialization and termination</link> </para>

<para><link linkend="_group__init_1gab41771f0215a2e0afb4cf1cf98082d40">glfwInit</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
<para>
Definition at line 389 of file init.c.</para>
<programlisting>390 {
391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aef3b20f1280cca7cae8316626af42c45">initialized</link>)
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
393 
394 &#32;&#32;&#32;&#32;terminate();
395 }
</programlisting></section>
</section>
</section>
