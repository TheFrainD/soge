<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_compile_guide">

<para>This is about compiling the GLFW library itself. For information on how to build applications that use GLFW, see <link linkend="_build_guide">Building applications</link>.</para>
<section xml:id="_compile_guide_1compile_cmake">
<title>Using CMake</title>

<para>GLFW behaves like most other libraries that use CMake so this guide mostly describes the standard configure, generate and compile sequence. If you are already familiar with this from other projects, you may want to focus on the <link linkend="_compile_guide_1compile_deps">Installing dependencies</link> and <link linkend="_compile_guide_1compile_options">CMake options</link> sections for GLFW-specific information.</para>

<para>GLFW uses <link xlink:href="https://cmake.org/">CMake</link> to generate project files or makefiles for your chosen development environment. To compile GLFW, first generate these files with CMake and then use them to compile the GLFW library.</para>

<para>If you are on Windows and macOS you can <link xlink:href="https://cmake.org/download/">download CMake</link> from their site.</para>

<para>If you are on a Unix-like system such as Linux, FreeBSD or Cygwin or have a package system like Fink, MacPorts or Homebrew, you can install its CMake package.</para>

<para>CMake is a complex tool and this guide will only show a few of the possible ways to set up and compile GLFW. The CMake project has their own much more detailed <link xlink:href="https://cmake.org/cmake/help/latest/guide/user-interaction/">CMake user guide</link> that includes everything in this guide not specific to GLFW. It may be a useful companion to this one.</para>
<section xml:id="_compile_guide_1compile_deps">
<title>Installing dependencies</title>

<para>The C/C++ development environments in Visual Studio, Xcode and MinGW come with all necessary dependencies for compiling GLFW, but on Unix-like systems like Linux and FreeBSD you will need a few extra packages.</para>
<section xml:id="_compile_guide_1compile_deps_x11">
<title>Dependencies for X11</title>

<para>To compile GLFW for X11, you need to have the X11 development packages installed. They are not needed to build or run programs that use GLFW.</para>

<para>On Debian and derivates like Ubuntu and Linux Mint the <computeroutput>xorg-dev</computeroutput> meta-package pulls in the development packages for all of X11.</para>

<para><literallayout><computeroutput>sudo&#32;apt&#32;install&#32;xorg-dev
</computeroutput></literallayout></para>

<para>On Fedora and derivatives like Red Hat the X11 extension packages <computeroutput>libXcursor-devel</computeroutput>, <computeroutput>libXi-devel</computeroutput>, <computeroutput>libXinerama-devel</computeroutput> and <computeroutput>libXrandr-devel</computeroutput> required by GLFW pull in all its other dependencies.</para>

<para><literallayout><computeroutput>sudo&#32;dnf&#32;install&#32;libXcursor-devel&#32;libXi-devel&#32;libXinerama-devel&#32;libXrandr-devel
</computeroutput></literallayout></para>

<para>On FreeBSD the X11 headers are installed along the end-user X11 packages, so if you have an X server running you should have the headers as well. If not, install the <computeroutput>xorgproto</computeroutput> package.</para>

<para><literallayout><computeroutput>pkg&#32;install&#32;xorgproto
</computeroutput></literallayout></para>

<para>On Cygwin the <computeroutput>xorgproto</computeroutput> package in the Devel section of the GUI installer will install the headers and other development related files for all of X11.</para>

<para>Once you have the required dependencies, move on to <link linkend="_compile_guide_1compile_generate">Generating build files with CMake</link>.</para>
</section>
<section xml:id="_compile_guide_1compile_deps_wayland">
<title>Dependencies for Wayland and X11</title>

<para>To compile GLFW for both Wayland and X11, you need to have the X11, Wayland and xkbcommon development packages installed. They are not needed to build or run programs that use GLFW. You will also need to set the <link linkend="_compile_guide_1GLFW_BUILD_WAYLAND">GLFW_BUILD_WAYLAND</link> CMake option in the next step when generating build files.</para>

<para>On Debian and derivates like Ubuntu and Linux Mint you will need the <computeroutput>libwayland-dev</computeroutput>, <computeroutput>libxkbcommon-dev</computeroutput> and <computeroutput>wayland-protocols</computeroutput> packages and the <computeroutput>xorg-dev</computeroutput> meta-package. These will pull in all other dependencies.</para>

<para><literallayout><computeroutput>sudo&#32;apt&#32;install&#32;libwayland-dev&#32;libxkbcommon-dev&#32;wayland-protocols&#32;xorg-dev
</computeroutput></literallayout></para>

<para>On Fedora and derivatives like Red Hat you will need the <computeroutput>wayland-devel</computeroutput>, <computeroutput>libxkbcommon-devel</computeroutput>, <computeroutput>wayland-protocols-devel</computeroutput>, <computeroutput>libXcursor-devel</computeroutput>, <computeroutput>libXi-devel</computeroutput>, <computeroutput>libXinerama-devel</computeroutput> and <computeroutput>libXrandr-devel</computeroutput> packages. These will pull in all other dependencies.</para>

<para><literallayout><computeroutput>sudo&#32;dnf&#32;install&#32;wayland-devel&#32;libxkbcommon-devel&#32;wayland-protocols-devel&#32;libXcursor-devel&#32;libXi-devel&#32;libXinerama-devel&#32;libXrandr-devel
</computeroutput></literallayout></para>

<para>On FreeBSD you will need the <computeroutput>wayland</computeroutput>, <computeroutput>libxkbcommon</computeroutput> and <computeroutput>wayland-protocols</computeroutput> packages. The X11 headers are installed along the end-user X11 packages, so if you have an X server running you should have the headers as well. If not, install the <computeroutput>xorgproto</computeroutput> package.</para>

<para><literallayout><computeroutput>pkg&#32;install&#32;wayland&#32;libxkbcommon&#32;wayland-protocols&#32;xorgproto
</computeroutput></literallayout></para>

<para>Once you have the required dependencies, move on to <link linkend="_compile_guide_1compile_generate">Generating build files with CMake</link>.</para>
</section>
</section>
<section xml:id="_compile_guide_1compile_generate">
<title>Generating build files with CMake</title>

<para>Once you have all necessary dependencies it is time to generate the project files or makefiles for your development environment. CMake needs two paths for this:</para>

<para><itemizedlist>
<listitem>
<para>the path to the root directory of the GLFW source tree (not its <computeroutput>src</computeroutput> subdirectory)</para>
</listitem><listitem>
<para>the path to the directory where the generated build files and compiled binaries will be placed</para>
</listitem></itemizedlist>
</para>

<para>If these are the same, it is called an in-tree build, otherwise it is called an out-of-tree build.</para>

<para>Out-of-tree builds are recommended as they avoid cluttering up the source tree. They also allow you to have several build directories for different configurations all using the same source tree.</para>

<para>A common pattern when building a single configuration is to have a build directory named <computeroutput>build</computeroutput> in the root of the source tree.</para>
<section xml:id="_compile_guide_1compile_generate_gui">
<title>Generating with the CMake GUI</title>

<para>Start the CMake GUI and set the paths to the source and build directories described above. Then press <emphasis>Configure</emphasis> and <emphasis>Generate</emphasis>.</para>

<para>If you wish change any CMake variables in the list, press <emphasis>Configure</emphasis> and then <emphasis>Generate</emphasis> to have the new values take effect. The variable list will be populated after the first configure step.</para>

<para>By default GLFW will use X11 on Linux and other Unix-like systems other than macOS. To include support for Wayland as well, set the <link linkend="_compile_guide_1GLFW_BUILD_WAYLAND">GLFW_BUILD_WAYLAND</link> option in the GLFW section of the variable list, then apply the new value as described above.</para>

<para>Once you have generated the project files or makefiles for your chosen development environment, move on to <link linkend="_compile_guide_1compile_compile">Compiling the library</link>.</para>
</section>
<section xml:id="_compile_guide_1compile_generate_cli">
<title>Generating with command-line CMake</title>

<para>To make a build directory, pass the source and build directories to the <computeroutput>cmake</computeroutput> command. These can be relative or absolute paths. The build directory is created if it doesn&apos;t already exist.</para>

<para><literallayout><computeroutput>cmake&#32;-S&#32;path/to/glfw&#32;-B&#32;path/to/build
</computeroutput></literallayout></para>

<para>It is common to name the build directory <computeroutput>build</computeroutput> and place it in the root of the source tree when only planning to build a single configuration.</para>

<para><literallayout><computeroutput>cd&#32;path/to/glfw
cmake&#32;-S&#32;.&#32;-B&#32;build
</computeroutput></literallayout></para>

<para>Without other flags these will generate Visual Studio project files on Windows and makefiles on other platforms. You can choose other targets using the <computeroutput>-G</computeroutput> flag.</para>

<para><literallayout><computeroutput>cmake&#32;-S&#32;path/to/glfw&#32;-B&#32;path/to/build&#32;-G&#32;Xcode
</computeroutput></literallayout></para>

<para>By default GLFW will use X11 on Linux and other Unix-like systems other than macOS. To also include support for Wayland, set the <link linkend="_compile_guide_1GLFW_BUILD_WAYLAND">GLFW_BUILD_WAYLAND</link> CMake option.</para>

<para><literallayout><computeroutput>cmake&#32;-S&#32;path/to/glfw&#32;-B&#32;path/to/build&#32;-D&#32;GLFW_BUILD_WAYLAND=1
</computeroutput></literallayout></para>

<para>Once you have generated the project files or makefiles for your chosen development environment, move on to <link linkend="_compile_guide_1compile_compile">Compiling the library</link>.</para>
</section>
</section>
<section xml:id="_compile_guide_1compile_compile">
<title>Compiling the library</title>

<para>You should now have all required dependencies and the project files or makefiles necessary to compile GLFW. Go ahead and compile the actual GLFW library with these files as you would with any other project.</para>

<para>With Visual Studio open <computeroutput>GLFW.sln</computeroutput> and use the Build menu. With Xcode open <computeroutput>GLFW.xcodeproj</computeroutput> and use the Project menu.</para>

<para>With Linux, macOS and other forms of Unix, run <computeroutput>make</computeroutput>.</para>

<para><literallayout><computeroutput>cd&#32;path/to/build
make
</computeroutput></literallayout></para>

<para>With MinGW, it is <computeroutput>mingw32-make</computeroutput>.</para>

<para><literallayout><computeroutput>cd&#32;path/to/build
mingw32-make
</computeroutput></literallayout></para>

<para>Any CMake build directory can also be built with the <computeroutput>cmake</computeroutput> command and the <computeroutput>--build</computeroutput> flag.</para>

<para><literallayout><computeroutput>cmake&#32;--build&#32;path/to/build
</computeroutput></literallayout></para>

<para>This will run the platform specific build tool the directory was generated for.</para>

<para>Once the GLFW library is compiled you are ready to build your application, linking it to the GLFW library. See <link linkend="_build_guide">Building applications</link> for more information.</para>
</section>
</section>
<section xml:id="_compile_guide_1compile_options">
<title>CMake options</title>

<para>The CMake files for GLFW provide a number of options, although not all are available on all supported platforms. Some of these are de facto standards among projects using CMake and so have no <computeroutput>GLFW_</computeroutput> prefix.</para>

<para>If you are using the GUI version of CMake, these are listed and can be changed from there. If you are using the command-line version of CMake you can use the <computeroutput>ccmake</computeroutput> ncurses GUI to set options. Some package systems like Ubuntu and other distributions based on Debian GNU/Linux have this tool in a separate <computeroutput>cmake-curses-gui</computeroutput> package.</para>

<para>Finally, if you don&apos;t want to use any GUI, you can set options from the <computeroutput>cmake</computeroutput> command-line with the <computeroutput>-D</computeroutput> flag.</para>

<para><literallayout><computeroutput>cmake&#32;-S&#32;path/to/glfw&#32;-B&#32;path/to/build&#32;-D&#32;BUILD_SHARED_LIBS=ON
</computeroutput></literallayout></para>
<section xml:id="_compile_guide_1compile_options_shared">
<title>Shared CMake options</title>

<para><anchor xml:id="_compile_guide_1BUILD_SHARED_LIBS"/><emphasis role="bold">BUILD_SHARED_LIBS</emphasis> determines whether GLFW is built as a static library or as a DLL / shared library / dynamic library. This is disabled by default, producing a static GLFW library. This variable has no <computeroutput>GLFW_</computeroutput> prefix because it is defined by CMake. If you want to change the library only for GLFW when it is part of a larger project, see <link linkend="_compile_guide_1GLFW_LIBRARY_TYPE">GLFW_LIBRARY_TYPE</link>.</para>

<para><anchor xml:id="_compile_guide_1GLFW_LIBRARY_TYPE"/><emphasis role="bold">GLFW_LIBRARY_TYPE</emphasis> allows you to override <link linkend="_compile_guide_1BUILD_SHARED_LIBS">BUILD_SHARED_LIBS</link> only for GLFW, without affecting other libraries in a larger project. When set, the value of this option must be a valid CMake library type. Set it to <computeroutput>STATIC</computeroutput> to build GLFW as a static library, <computeroutput>SHARED</computeroutput> to build it as a shared library / dynamic library / DLL, or <computeroutput>OBJECT</computeroutput> to make GLFW a CMake object library.</para>

<para><anchor xml:id="_compile_guide_1GLFW_BUILD_EXAMPLES"/><emphasis role="bold">GLFW_BUILD_EXAMPLES</emphasis> determines whether the GLFW examples are built along with the library. This is enabled by default unless GLFW is being built as a sub-project of a larger CMake project.</para>

<para><anchor xml:id="_compile_guide_1GLFW_BUILD_TESTS"/><emphasis role="bold">GLFW_BUILD_TESTS</emphasis> determines whether the GLFW test programs are built along with the library. This is enabled by default unless GLFW is being built as a sub-project of a larger CMake project.</para>

<para><anchor xml:id="_compile_guide_1GLFW_BUILD_DOCS"/><emphasis role="bold">GLFW_BUILD_DOCS</emphasis> determines whether the GLFW documentation is built along with the library. This is enabled by default if <link xlink:href="https://www.doxygen.nl/">Doxygen</link> is found by CMake during configuration.</para>
</section>
<section xml:id="_compile_guide_1compile_options_win32">
<title>Win32 specific CMake options</title>

<para><anchor xml:id="_compile_guide_1GLFW_BUILD_WIN32"/><emphasis role="bold">GLFW_BUILD_WIN32</emphasis> determines whether to include support for Win32 when compiling the library. This option is only available when compiling for Windows. This is enabled by default.</para>

<para><anchor xml:id="_compile_guide_1USE_MSVC_RUNTIME_LIBRARY_DLL"/><emphasis role="bold">USE_MSVC_RUNTIME_LIBRARY_DLL</emphasis> determines whether to use the DLL version or the static library version of the Visual C++ runtime library. When enabled, the DLL version of the Visual C++ library is used. This is enabled by default.</para>

<para>On CMake 3.15 and later you can set the standard CMake <link xlink:href="https://cmake.org/cmake/help/latest/variable/CMAKE_MSVC_RUNTIME_LIBRARY.html">CMAKE_MSVC_RUNTIME_LIBRARY</link> variable instead of this GLFW-specific option.</para>

<para><anchor xml:id="_compile_guide_1GLFW_USE_HYBRID_HPG"/><emphasis role="bold">GLFW_USE_HYBRID_HPG</emphasis> determines whether to export the <computeroutput>NvOptimusEnablement</computeroutput> and <computeroutput>AmdPowerXpressRequestHighPerformance</computeroutput> symbols, which force the use of the high-performance GPU on Nvidia Optimus and AMD PowerXpress systems. These symbols need to be exported by the EXE to be detected by the driver, so the override will not work if GLFW is built as a DLL. This is disabled by default, letting the operating system and driver decide.</para>
</section>
<section xml:id="_compile_guide_1compile_options_macos">
<title>macOS specific CMake options</title>

<para><anchor xml:id="_compile_guide_1GLFW_BUILD_COCOA"/><emphasis role="bold">GLFW_BUILD_COCOA</emphasis> determines whether to include support for Cocoa when compiling the library. This option is only available when compiling for macOS. This is enabled by default.</para>
</section>
<section xml:id="_compile_guide_1compile_options_unix">
<title>Unix-like system specific CMake options</title>

<para><anchor xml:id="_compile_guide_1GLFW_BUILD_WAYLAND"/><emphasis role="bold">GLFW_BUILD_WAYLAND</emphasis> determines whether to include support for Wayland when compiling the library. This option is only available when compiling for Linux and other Unix-like systems other than macOS. This is disabled by default.</para>

<para><anchor xml:id="_compile_guide_1GLFW_BUILD_X11"/><emphasis role="bold">GLFW_BUILD_X11</emphasis> determines whether to include support for X11 when compiling the library. This option is only available when compiling for Linux and other Unix-like systems other than macOS. This is enabled by default.</para>
</section>
</section>
<section xml:id="_compile_guide_1compile_mingw_cross">
<title>Cross-compilation with CMake and MinGW</title>

<para>Both Cygwin and many Linux distributions have MinGW or MinGW-w64 packages. For example, Cygwin has the <computeroutput>mingw64-i686-gcc</computeroutput> and <computeroutput>mingw64-x86_64-gcc</computeroutput> packages for 32- and 64-bit version of MinGW-w64, while Debian GNU/Linux and derivatives like Ubuntu have the <computeroutput>mingw-w64</computeroutput> package for both.</para>

<para>GLFW has CMake toolchain files in the <computeroutput>CMake</computeroutput> subdirectory that set up cross-compilation of Windows binaries. To use these files you set the <computeroutput>CMAKE_TOOLCHAIN_FILE</computeroutput> CMake variable with the <computeroutput>-D</computeroutput> flag add an option when configuring and generating the build files.</para>

<para><literallayout><computeroutput>cmake&#32;-S&#32;path/to/glfw&#32;-B&#32;path/to/build&#32;-D&#32;CMAKE_TOOLCHAIN_FILE=path/to/file
</computeroutput></literallayout></para>

<para>The exact toolchain file to use depends on the prefix used by the MinGW or MinGW-w64 binaries on your system. You can usually see this in the /usr directory. For example, both the Ubuntu and Cygwin MinGW-w64 packages have <computeroutput>/usr/x86_64-w64-mingw32</computeroutput> for the 64-bit compilers, so the correct invocation would be:</para>

<para><literallayout><computeroutput>cmake&#32;-S&#32;path/to/glfw&#32;-B&#32;path/to/build&#32;-D&#32;CMAKE_TOOLCHAIN_FILE=CMake/x86_64-w64-mingw32.cmake
</computeroutput></literallayout></para>

<para>The path to the toolchain file is relative to the path to the GLFW source tree passed to the <computeroutput>-S</computeroutput> flag, not to the current directory.</para>

<para>For more details see the <link xlink:href="https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html">CMake toolchain guide</link>.</para>
</section>
<section xml:id="_compile_guide_1compile_manual">
<title>Compiling GLFW manually</title>

<para>If you wish to compile GLFW without its CMake build environment then you will have to do at least some of the platform detection yourself. There are preprocessor macros for enabling support for the platforms (window systems) available. There are also optional, platform-specific macros for various features.</para>

<para>When building, GLFW will expect the necessary configuration macros to be defined on the command-line. The GLFW CMake files set these as private compile definitions on the GLFW target but if you compile the GLFW sources manually you will need to define them yourself.</para>

<para>The window system is used to create windows, handle input, monitors, gamma ramps and clipboard. The options are:</para>

<para><itemizedlist>
<listitem>
<para><emphasis role="bold">_GLFW_COCOA</emphasis> to use the Cocoa frameworks</para>
</listitem><listitem>
<para><emphasis role="bold">_GLFW_WIN32</emphasis> to use the Win32 API</para>
</listitem><listitem>
<para><emphasis role="bold">_GLFW_X11</emphasis> to use the X Window System</para>
</listitem><listitem>
<para><emphasis role="bold">_GLFW_WAYLAND</emphasis> to use the Wayland API (incomplete)</para>
</listitem></itemizedlist>
</para>

<para>The <emphasis role="bold">_GLFW_WAYLAND</emphasis> and <emphasis role="bold">_GLFW_X11</emphasis> macros may be combined and produces a library that attempts to detect the appropriate platform at initialization.</para>

<para>If you are building GLFW as a shared library / dynamic library / DLL then you must also define <emphasis role="bold">_GLFW_BUILD_DLL</emphasis>. Otherwise, you must not define it.</para>

<para>If you are using a custom name for the Vulkan, EGL, GLX, OSMesa, OpenGL, GLESv1 or GLESv2 library, you can override the default names by defining those you need of <emphasis role="bold">_GLFW_VULKAN_LIBRARY</emphasis>, <emphasis role="bold">_GLFW_EGL_LIBRARY</emphasis>, <emphasis role="bold">_GLFW_GLX_LIBRARY</emphasis>, <emphasis role="bold">_GLFW_OSMESA_LIBRARY</emphasis>, <emphasis role="bold">_GLFW_OPENGL_LIBRARY</emphasis>, <emphasis role="bold">_GLFW_GLESV1_LIBRARY</emphasis> and <emphasis role="bold">_GLFW_GLESV2_LIBRARY</emphasis>. Otherwise, GLFW will use the built-in default names.</para>

<para><note><title>Note</title>

<para>None of the <link linkend="_build_guide_1build_macros">GLFW header option macros</link> may be defined during the compilation of GLFW. If you define any of these in your build files, make sure they are not applied to the GLFW sources. </para>
</note>
</para>
</section>
</section>
