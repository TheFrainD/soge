<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__input">
<title>Input reference</title>
<indexterm><primary>Input reference</primary></indexterm>
<para>

<para>Functions and types related to input handling. </para>
 
</para>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group__hat__state">Joystick hat states</link></para>

<para>Joystick hat states. </para>
</listitem>
            <listitem><para><link linkend="_group__keys">Keyboard keys</link></para>

<para>Keyboard key IDs. </para>
</listitem>
            <listitem><para><link linkend="_group__mods">Modifier key flags</link></para>

<para>Modifier key flags. </para>
</listitem>
            <listitem><para><link linkend="_group__buttons">Mouse buttons</link></para>

<para>Mouse button IDs. </para>
</listitem>
            <listitem><para><link linkend="_group__joysticks">Joysticks</link></para>

<para>Joystick IDs. </para>
</listitem>
            <listitem><para><link linkend="_group__gamepad__buttons">Gamepad buttons</link></para>

<para>Gamepad buttons. </para>
</listitem>
            <listitem><para><link linkend="_group__gamepad__axes">Gamepad axes</link></para>

<para>Gamepad axes. </para>
</listitem>
            <listitem><para><link linkend="_group__shapes">Standard cursor shapes</link></para>

<para>Standard system cursor shapes. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link></para>

<para>Gamepad input state. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link></para>

<para>Opaque cursor object. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1ga0184dcb59f6d85d735503dcaae809727">GLFWmousebuttonfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int button, int action, int mods)</para>

<para>The function pointer type for mouse button callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68">GLFWcursorposfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, double xpos, double ypos)</para>

<para>The function pointer type for cursor position callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe">GLFWcursorenterfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int entered)</para>

<para>The function pointer type for cursor enter/leave callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1gaf656112c33de3efdb227fa58f0134cf5">GLFWscrollfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, double <link linkend="_glad_8h_1ac20a0ffebf4c476650fcfa0633066f0e">xoffset</link>, double <link linkend="_glad_8h_1a76dfb6803dcff61037ba688b7f4242b8">yoffset</link>)</para>

<para>The function pointer type for scroll callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1ga5bd751b27b90f865d2ea613533f0453c">GLFWkeyfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>, int scancode, int action, int mods)</para>

<para>The function pointer type for keyboard key callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e">GLFWcharfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, unsigned int codepoint)</para>

<para>The function pointer type for Unicode character callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f">GLFWcharmodsfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, unsigned int codepoint, int mods)</para>

<para>The function pointer type for Unicode character with modifiers callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1gaaba73c3274062c18723b7f05862d94b2">GLFWdropfun</link>) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int path_count, const char *<link linkend="_glext_8h_1adcb3345bcd367edfa374dd2e0452a033">paths</link>[])</para>

<para>The function pointer type for path drop callbacks. </para>
</listitem>
            <listitem><para>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* <link linkend="_group__input_1gaa21ad5986ae9a26077a40142efb56243">GLFWjoystickfun</link>) (int jid, int <link linkend="_glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</para>

<para>The function pointer type for joystick configuration callbacks. </para>
</listitem>
            <listitem><para>typedef struct <link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link> <link linkend="_group__input_1ga61acfb1f28f751438dd221225c5e725d">GLFWgamepadstate</link></para>

<para>Gamepad input state. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1ga1248dd5b1e566b2817e71547564d6af9">glfwGetInputMode</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)</para>

<para>Returns the value of an input option for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1gae1eb729d2dd91dc33fd60e150a6e1684">glfwSetInputMode</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>, int <link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)</para>

<para>Sets an input option for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1ga9b83d8957a566b22b3b768c7d1d4be03">glfwRawMouseMotionSupported</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Returns whether raw mouse motion is supported. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char * <link linkend="_group__input_1ga244737e5242c866e0f0af5a9c95f3e58">glfwGetKeyName</link> (int <link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>, int scancode)</para>

<para>Returns the layout-specific name of the specified printable key. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1ga3ea3b9d74f8352506068620980e01fe5">glfwGetKeyScancode</link> (int <link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>)</para>

<para>Returns the platform-specific scancode of the specified key. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1ga7d8ad8ffaf272808f04e1d5d33ec8859">glfwGetKey</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>)</para>

<para>Returns the last reported state of a keyboard key for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1ga6da5efb04f700c312a57a169fa9393a0">glfwGetMouseButton</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int button)</para>

<para>Returns the last reported state of a mouse button for the specified window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1gad289438eb7cf53d11eca685373f44105">glfwGetCursorPos</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, double *xpos, double *ypos)</para>

<para>Retrieves the position of the cursor relative to the content area of the window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1gaaf152cc93418acb0ba342e3f4af922bc">glfwSetCursorPos</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, double xpos, double ypos)</para>

<para>Sets the position of the cursor, relative to the content area of the window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> * <link linkend="_group__input_1gac0f0f691f2d110f9acfb4bfe07f1216c">glfwCreateCursor</link> (const <link linkend="_struct_g_l_f_wimage">GLFWimage</link> *<link linkend="_structimage">image</link>, int xhot, int yhot)</para>

<para>Creates a custom cursor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> * <link linkend="_group__input_1ga969dd87ad2ddbf3e1086cc40f235eed1">glfwCreateStandardCursor</link> (int shape)</para>

<para>Creates a cursor with a standard shape. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1ga27556b7122117bc1bbb4bb3cc003ea43">glfwDestroyCursor</link> (<link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> *cursor)</para>

<para>Destroys a cursor. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1gafaf103cea2f43530cff7de4e01126a4f">glfwSetCursor</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> *cursor)</para>

<para>Sets the cursor for the window. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga5bd751b27b90f865d2ea613533f0453c">GLFWkeyfun</link> <link linkend="_group__input_1gaa4cbcb81b939b8800e44cea971ddae47">glfwSetKeyCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1ga5bd751b27b90f865d2ea613533f0453c">GLFWkeyfun</link> callback)</para>

<para>Sets the key callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e">GLFWcharfun</link> <link linkend="_group__input_1gad3d7e6e3134fa034cc1604162579585e">glfwSetCharCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e">GLFWcharfun</link> callback)</para>

<para>Sets the Unicode character callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f">GLFWcharmodsfun</link> <link linkend="_group__input_1ga359a8529c2eb06e6e2173168f30ac99c">glfwSetCharModsCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f">GLFWcharmodsfun</link> callback)</para>

<para>Sets the Unicode character with modifiers callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga0184dcb59f6d85d735503dcaae809727">GLFWmousebuttonfun</link> <link linkend="_group__input_1gab8f17646f43cdca14e5095512618fdf6">glfwSetMouseButtonCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1ga0184dcb59f6d85d735503dcaae809727">GLFWmousebuttonfun</link> callback)</para>

<para>Sets the mouse button callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68">GLFWcursorposfun</link> <link linkend="_group__input_1ga74124d0eff27040fd10e4df9e17d129c">glfwSetCursorPosCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68">GLFWcursorposfun</link> callback)</para>

<para>Sets the cursor position callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe">GLFWcursorenterfun</link> <link linkend="_group__input_1gacdb3490e374c8bc08549c6f173ffa7c2">glfwSetCursorEnterCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe">GLFWcursorenterfun</link> callback)</para>

<para>Sets the cursor enter/leave callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaf656112c33de3efdb227fa58f0134cf5">GLFWscrollfun</link> <link linkend="_group__input_1gaa786b59f19ad8525d251cda8e0d7d29b">glfwSetScrollCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1gaf656112c33de3efdb227fa58f0134cf5">GLFWscrollfun</link> callback)</para>

<para>Sets the scroll callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaaba73c3274062c18723b7f05862d94b2">GLFWdropfun</link> <link linkend="_group__input_1ga8bab819b7b0ef9bc1a38e58c577c1d13">glfwSetDropCallback</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, <link linkend="_group__input_1gaaba73c3274062c18723b7f05862d94b2">GLFWdropfun</link> callback)</para>

<para>Sets the path drop callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link> (int jid)</para>

<para>Returns whether the specified joystick is present. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> float * <link linkend="_group__input_1gaf0537d8832818963f8d24ac1c98e42a3">glfwGetJoystickAxes</link> (int jid, int *<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>)</para>

<para>Returns the values of all axes of the specified joystick. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> unsigned char * <link linkend="_group__input_1gaee8f9532b2dff9278cee70d0e6cde82c">glfwGetJoystickButtons</link> (int jid, int *<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>)</para>

<para>Returns the state of all buttons of the specified joystick. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> unsigned char * <link linkend="_group__input_1gad415b53795a1aeced53b7b66c7943931">glfwGetJoystickHats</link> (int jid, int *<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>)</para>

<para>Returns the state of all hats of the specified joystick. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char * <link linkend="_group__input_1ga9b5d2d156f0138e0e7ad065e477dcfe3">glfwGetJoystickName</link> (int jid)</para>

<para>Returns the name of the specified joystick. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char * <link linkend="_group__input_1ga40f8522193d983af333bb6e21a3b120a">glfwGetJoystickGUID</link> (int jid)</para>

<para>Returns the SDL compatible GUID of the specified joystick. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1ga3a8999c2d2634c7bcf4a04f1ec64895c">glfwSetJoystickUserPointer</link> (int jid, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> *<link linkend="_glad_8h_1a8e06a460fd89ba3a95ce49119ef7aab2">pointer</link>)</para>

<para>Sets the user pointer of the specified joystick. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * <link linkend="_group__input_1gaf4317a5b0a7849f9b2b7b2b69366a72b">glfwGetJoystickUserPointer</link> (int jid)</para>

<para>Returns the user pointer of the specified joystick. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1gac9720b6e5062a5fc5fc0bb4be6dc04a0">glfwJoystickIsGamepad</link> (int jid)</para>

<para>Returns whether the specified joystick has a gamepad mapping. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaa21ad5986ae9a26077a40142efb56243">GLFWjoystickfun</link> <link linkend="_group__input_1gad90f60a4c0e04629928305b53e96154a">glfwSetJoystickCallback</link> (<link linkend="_group__input_1gaa21ad5986ae9a26077a40142efb56243">GLFWjoystickfun</link> callback)</para>

<para>Sets the joystick configuration callback. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1ga276a2aec236a671a99f6f0a9be7fa3fc">glfwUpdateGamepadMappings</link> (const char *<link linkend="_glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b">string</link>)</para>

<para>Adds the specified SDL_GameControllerDB gamepad mappings. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char * <link linkend="_group__input_1ga36983e6ae6fa159a1426a0148a1ec00b">glfwGetGamepadName</link> (int jid)</para>

<para>Returns the human-readable gamepad name for the specified joystick. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__input_1ga6e138d3b0761546f5a12546f367501d6">glfwGetGamepadState</link> (int jid, <link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link> *state)</para>

<para>Retrieves the state of the specified joystick remapped as a gamepad. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1ga7a580309bbc185a0459c3559021d2fd7">glfwSetClipboardString</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, const char *<link linkend="_glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b">string</link>)</para>

<para>Sets the clipboard to the specified string. </para>
</listitem>
            <listitem><para>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char * <link linkend="_group__input_1gae22e5d8bc376aeb71ea063d1bc63fddc">glfwGetClipboardString</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>)</para>

<para>Returns the contents of the clipboard as a string. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> double <link linkend="_group__input_1ga03d4a1039b8662c71eeb40beea8cb622">glfwGetTime</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Returns the GLFW time. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> <link linkend="_group__input_1ga94360a3628a09f32708f83cc3fa48590">glfwSetTime</link> (double time)</para>

<para>Sets the GLFW time. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_group__input_1gaa00c3e32227eb70b3968fca0bfe4ae26">glfwGetTimerValue</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Returns the current value of the raw timer. </para>
</listitem>
            <listitem><para><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_group__input_1gaa92d10b10013372778efbf6367714371">glfwGetTimerFrequency</link> (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>)</para>

<para>Returns the frequency, in Hz, of the raw timer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Key and button actions    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>   0</para>

<para>The key or mouse button was released. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__input_1ga2485743d0b59df3791c45951c4195265">GLFW_PRESS</link>   1</para>

<para>The key or mouse button was pressed. </para>
</listitem>
            <listitem><para>#define <link linkend="_group__input_1gac96fd3b9fc66c6f0eebaf6532595338f">GLFW_REPEAT</link>   2</para>

<para>The key was held down until it repeated. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Functions and types related to input handling. </para>

<para>This is the reference documentation for input related functions and types. For more task-oriented information, see the <link linkend="_input_guide">Input guide</link>. </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group__input_1ga2485743d0b59df3791c45951c4195265"/>    <section>
    <title>GLFW_PRESS</title>
<indexterm><primary>GLFW_PRESS</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFW_PRESS</secondary></indexterm>
<para><computeroutput>#define GLFW_PRESS   1</computeroutput></para><para>

<para>The key or mouse button was pressed. </para>
</para>

<para>The key or mouse button was pressed. </para>
<para>
Definition at line 339 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1gada11d965c4da13090ad336e030e4d11f"/>    <section>
    <title>GLFW_RELEASE</title>
<indexterm><primary>GLFW_RELEASE</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFW_RELEASE</secondary></indexterm>
<para><computeroutput>#define GLFW_RELEASE   0</computeroutput></para><para>

<para>The key or mouse button was released. </para>
</para>

<para>The key or mouse button was released. </para>
<para>
Definition at line 332 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1gac96fd3b9fc66c6f0eebaf6532595338f"/>    <section>
    <title>GLFW_REPEAT</title>
<indexterm><primary>GLFW_REPEAT</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFW_REPEAT</secondary></indexterm>
<para><computeroutput>#define GLFW_REPEAT   2</computeroutput></para><para>

<para>The key was held down until it repeated. </para>
</para>

<para>The key was held down until it repeated. </para>
<para>
Definition at line 346 of file glfw3.h.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e"/>    <section>
    <title>GLFWcharfun</title>
<indexterm><primary>GLFWcharfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWcharfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWcharfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, unsigned int codepoint)</computeroutput></para><para>

<para>The function pointer type for Unicode character callbacks. </para>
</para>

<para>This is the function pointer type for Unicode character callbacks. A Unicode character callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;unsigned&#32;int&#32;codepoint)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>codepoint</entry>
                                <entry>
<para>The Unicode code point of the character.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_char">Text input</link> </para>

<para><link linkend="_group__input_1gad3d7e6e3134fa034cc1604162579585e">glfwSetCharCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.4. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 1852 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f"/>    <section>
    <title>GLFWcharmodsfun</title>
<indexterm><primary>GLFWcharmodsfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWcharmodsfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWcharmodsfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, unsigned int codepoint, int mods)</computeroutput></para><para>

<para>The function pointer type for Unicode character with modifiers callbacks. </para>
</para>

<para>This is the function pointer type for Unicode character with modifiers callbacks. It is called for each input character, regardless of what modifier keys are held down. A Unicode character with modifiers callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;unsigned&#32;int&#32;codepoint,&#32;int&#32;mods)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>codepoint</entry>
                                <entry>
<para>The Unicode code point of the character. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mods</entry>
                                <entry>
<para>Bit field describing which <link linkend="_group__mods">modifier keys</link> were held down.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_char">Text input</link> </para>

<para><link linkend="_group__input_1ga359a8529c2eb06e6e2173168f30ac99c">glfwSetCharModsCallback</link></para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000001">Deprecated</link> 
<para>Scheduled for removal in version 4.0.</para>
</para></para>

<para><formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 1879 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4"/>    <section>
    <title>GLFWcursor</title>
<indexterm><primary>GLFWcursor</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWcursor</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link></computeroutput></para><para>

<para>Opaque cursor object. </para>
</para>

<para>Opaque cursor object.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_object">Cursor objects</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 1375 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe"/>    <section>
    <title>GLFWcursorenterfun</title>
<indexterm><primary>GLFWcursorenterfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWcursorenterfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWcursorenterfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int entered)</computeroutput></para><para>

<para>The function pointer type for cursor enter/leave callbacks. </para>
</para>

<para>This is the function pointer type for cursor enter/leave callbacks. A cursor enter/leave callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;entered)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>entered</entry>
                                <entry>
<para><computeroutput>GLFW_TRUE</computeroutput> if the cursor entered the window&apos;s content area, or <computeroutput>GLFW_FALSE</computeroutput> if it left it.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_enter">Cursor enter/leave events</link> </para>

<para><link linkend="_group__input_1gacdb3490e374c8bc08549c6f173ffa7c2">glfwSetCursorEnterCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1784 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68"/>    <section>
    <title>GLFWcursorposfun</title>
<indexterm><primary>GLFWcursorposfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWcursorposfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWcursorposfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, double xpos, double ypos)</computeroutput></para><para>

<para>The function pointer type for cursor position callbacks. </para>
</para>

<para>This is the function pointer type for cursor position callbacks. A cursor position callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;double&#32;xpos,&#32;double&#32;ypos);
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>The new cursor x-coordinate, relative to the left edge of the content area. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>The new cursor y-coordinate, relative to the top edge of the content area.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_pos">Cursor position</link> </para>

<para><link linkend="_group__input_1ga74124d0eff27040fd10e4df9e17d129c">glfwSetCursorPosCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>GLFWmouseposfun</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 1763 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1gaaba73c3274062c18723b7f05862d94b2"/>    <section>
    <title>GLFWdropfun</title>
<indexterm><primary>GLFWdropfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWdropfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWdropfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int path_count, const char *<link linkend="_glext_8h_1adcb3345bcd367edfa374dd2e0452a033">paths</link>[])</computeroutput></para><para>

<para>The function pointer type for path drop callbacks. </para>
</para>

<para>This is the function pointer type for path drop callbacks. A path drop callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;path_count,&#32;const&#32;char*&#32;paths[])
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>path_count</entry>
                                <entry>
<para>The number of dropped paths. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>paths</entry>
                                <entry>
<para>The UTF-8 encoded file and/or directory path names.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @pointer_lifetime The path array and its strings are valid until the callback function returns.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1path_drop">Path drop input</link> </para>

<para><link linkend="_group__input_1ga8bab819b7b0ef9bc1a38e58c577c1d13">glfwSetDropCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 1903 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1ga61acfb1f28f751438dd221225c5e725d"/>    <section>
    <title>GLFWgamepadstate</title>
<indexterm><primary>GLFWgamepadstate</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWgamepadstate</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link> <link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link></computeroutput></para><para>

<para>Gamepad input state. </para>
</para>

<para>This describes the input state of a gamepad.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1gamepad">Gamepad input</link> </para>

<para><link linkend="_group__input_1ga6e138d3b0761546f5a12546f367501d6">glfwGetGamepadState</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group__input_1gaa21ad5986ae9a26077a40142efb56243"/>    <section>
    <title>GLFWjoystickfun</title>
<indexterm><primary>GLFWjoystickfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWjoystickfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWjoystickfun) (int jid, int <link linkend="_glext_8h_1a03b04a5a978bad576866339075de01f6">event</link>)</computeroutput></para><para>

<para>The function pointer type for joystick configuration callbacks. </para>
</para>

<para>This is the function pointer type for joystick configuration callbacks. A joystick configuration callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(int&#32;jid,&#32;int&#32;event)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The joystick that was connected or disconnected. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>event</entry>
                                <entry>
<para>One of <computeroutput>GLFW_CONNECTED</computeroutput> or <computeroutput>GLFW_DISCONNECTED</computeroutput>. Future releases may add more events.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_event">Joystick configuration changes</link> </para>

<para><link linkend="_group__input_1gad90f60a4c0e04629928305b53e96154a">glfwSetJoystickCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 1945 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1ga5bd751b27b90f865d2ea613533f0453c"/>    <section>
    <title>GLFWkeyfun</title>
<indexterm><primary>GLFWkeyfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWkeyfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWkeyfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int <link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>, int scancode, int action, int mods)</computeroutput></para><para>

<para>The function pointer type for keyboard key callbacks. </para>
</para>

<para>This is the function pointer type for keyboard key callbacks. A keyboard key callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;key,&#32;int&#32;scancode,&#32;int&#32;action,&#32;int&#32;mods)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The <link linkend="_group__keys">keyboard key</link> that was pressed or released. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>scancode</entry>
                                <entry>
<para>The platform-specific scancode of the key. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>action</entry>
                                <entry>
<para><computeroutput>GLFW_PRESS</computeroutput>, <computeroutput>GLFW_RELEASE</computeroutput> or <computeroutput>GLFW_REPEAT</computeroutput>. Future releases may add more actions. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mods</entry>
                                <entry>
<para>Bit field describing which <link linkend="_group__mods">modifier keys</link> were held down.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_key">Key input</link> </para>

<para><link linkend="_group__input_1gaa4cbcb81b939b8800e44cea971ddae47">glfwSetKeyCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle, scancode and modifier mask parameters. </para>
</formalpara>
</para>
<para>
Definition at line 1831 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1ga0184dcb59f6d85d735503dcaae809727"/>    <section>
    <title>GLFWmousebuttonfun</title>
<indexterm><primary>GLFWmousebuttonfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWmousebuttonfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWmousebuttonfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, int button, int action, int mods)</computeroutput></para><para>

<para>The function pointer type for mouse button callbacks. </para>
</para>

<para>This is the function pointer type for mouse button callback functions. A mouse button callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;button,&#32;int&#32;action,&#32;int&#32;mods)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>button</entry>
                                <entry>
<para>The <link linkend="_group__buttons">mouse button</link> that was pressed or released. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>action</entry>
                                <entry>
<para>One of <computeroutput>GLFW_PRESS</computeroutput> or <computeroutput>GLFW_RELEASE</computeroutput>. Future releases may add more actions. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mods</entry>
                                <entry>
<para>Bit field describing which <link linkend="_group__mods">modifier keys</link> were held down.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_mouse_button">Mouse button input</link> </para>

<para><link linkend="_group__input_1gab8f17646f43cdca14e5095512618fdf6">glfwSetMouseButtonCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle and modifier mask parameters. </para>
</formalpara>
</para>
<para>
Definition at line 1740 of file glfw3.h.</para>
    </section><anchor xml:id="_group__input_1gaf656112c33de3efdb227fa58f0134cf5"/>    <section>
    <title>GLFWscrollfun</title>
<indexterm><primary>GLFWscrollfun</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>GLFWscrollfun</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>(* GLFWscrollfun) (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>, double <link linkend="_glad_8h_1ac20a0ffebf4c476650fcfa0633066f0e">xoffset</link>, double <link linkend="_glad_8h_1a76dfb6803dcff61037ba688b7f4242b8">yoffset</link>)</computeroutput></para><para>

<para>The function pointer type for scroll callbacks. </para>
</para>

<para>This is the function pointer type for scroll callbacks. A scroll callback function has the following signature: <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;double&#32;xoffset,&#32;double&#32;yoffset)
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window that received the event. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xoffset</entry>
                                <entry>
<para>The scroll offset along the x-axis. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>yoffset</entry>
                                <entry>
<para>The scroll offset along the y-axis.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_input_guide_1scrolling">Scroll input</link> </para>

<para><link linkend="_group__input_1gaa786b59f19ad8525d251cda8e0d7d29b">glfwSetScrollCallback</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>GLFWmousewheelfun</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 1805 of file glfw3.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__input_1gac0f0f691f2d110f9acfb4bfe07f1216c"/>    <section>
    <title>glfwCreateCursor()</title>
<indexterm><primary>glfwCreateCursor</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwCreateCursor</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link>* glfwCreateCursor (const <link linkend="_struct_g_l_f_wimage">GLFWimage</link> * image, int xhot, int yhot)</computeroutput></para><para>

<para>Creates a custom cursor. </para>
</para>

<para>Creates a new custom cursor image that can be set for a window with <link linkend="_group__input_1gafaf103cea2f43530cff7de4e01126a4f">glfwSetCursor</link>. The cursor can be destroyed with <link linkend="_group__input_1ga27556b7122117bc1bbb4bb3cc003ea43">glfwDestroyCursor</link>. Any remaining cursors are destroyed by <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link>.</para>

<para>The pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight bits per channel with the red channel first. They are arranged canonically as packed sequential rows, starting from the top-left corner.</para>

<para>The cursor hotspot is specified in pixels, relative to the upper-left corner of the cursor image. Like all other coordinate systems in GLFW, the X-axis points to the right and the Y-axis points down.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>image</entry>
                                <entry>
<para>The desired cursor image. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xhot</entry>
                                <entry>
<para>The desired x-coordinate, in pixels, of the cursor hotspot. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>yhot</entry>
                                <entry>
<para>The desired y-coordinate, in pixels, of the cursor hotspot. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The handle of the created cursor, or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The specified image data is copied before this function returns.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_object">Cursor objects</link> </para>

<para><link linkend="_group__input_1ga27556b7122117bc1bbb4bb3cc003ea43">glfwDestroyCursor</link> </para>

<para><link linkend="_group__input_1ga969dd87ad2ddbf3e1086cc40f235eed1">glfwCreateStandardCursor</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 762 of file input.c.</para>
<programlisting>763 {
764 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>*&#32;cursor;
765 
766 &#32;&#32;&#32;&#32;assert(<link linkend="_structimage">image</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
767 
768 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
769 
770 &#32;&#32;&#32;&#32;cursor&#32;=&#32;<link linkend="_init_8c_1afdf24e4f0665535fd3d012b810ffb18f">_glfw_calloc</link>(1,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>));
771 &#32;&#32;&#32;&#32;cursor-&gt;<link linkend="_struct___g_l_f_wcursor_1a3001692b71165b5c9c72137343f4570f">next</link>&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a8e4a4c3a75390dc4a6f649a71ab57a1e">cursorListHead</link>;
772 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a8e4a4c3a75390dc4a6f649a71ab57a1e">cursorListHead</link>&#32;=&#32;cursor;
773 
774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1adf703146bc803d86a63955d827db05d2">createCursor</link>(cursor,&#32;<link linkend="_structimage">image</link>,&#32;xhot,&#32;yhot))
775 &#32;&#32;&#32;&#32;{
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__input_1ga27556b7122117bc1bbb4bb3cc003ea43">glfwDestroyCursor</link>((<link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link>*)&#32;cursor);
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
778 &#32;&#32;&#32;&#32;}
779 
780 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link>*)&#32;cursor;
781 }
</programlisting>    </section><anchor xml:id="_group__input_1ga969dd87ad2ddbf3e1086cc40f235eed1"/>    <section>
    <title>glfwCreateStandardCursor()</title>
<indexterm><primary>glfwCreateStandardCursor</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwCreateStandardCursor</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link>* glfwCreateStandardCursor (int shape)</computeroutput></para><para>

<para>Creates a cursor with a standard shape. </para>
</para>

<para>Returns a cursor with a standard shape, that can be set for a window with <link linkend="_group__input_1gafaf103cea2f43530cff7de4e01126a4f">glfwSetCursor</link>. The images for these cursors come from the system cursor theme and their exact appearance will vary between platforms.</para>

<para>Most of these shapes are guaranteed to exist on every supported platform but a few may not be present. See the table below for details.</para>

<para><informaltable frame="all">
    <tgroup cols="5" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
      <colspec colname='c5'/>
<thead>
      <row >
<entry>
<para>Cursor shape </para>
</entry><entry>
<para>Windows </para>
</entry><entry>
<para>macOS </para>
</entry><entry>
<para>X11 </para>
</entry><entry>
<para>Wayland  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para><link linkend="_group__shapes_1ga8ab0e717245b85506cb0eaefdea39d0a">GLFW_ARROW_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1ga36185f4375eaada1b04e431244774c86">GLFW_IBEAM_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1ga8af88c0ea05ab9e8f9ac1530e8873c22">GLFW_CROSSHAIR_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1gaad01a50929fb515bf27e4462c51f6ed0">GLFW_POINTING_HAND_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1ga2010a43dc1050a7c9154148a63cf01ad">GLFW_RESIZE_EW_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1gaa59214e8cdc8c8adf08fdf125ed68388">GLFW_RESIZE_NS_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1gadf2c0a495ec9cef4e1a364cc99aa78da">GLFW_RESIZE_NWSE_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes<superscript>1</superscript> </para>
</entry><entry>
<para>Maybe<superscript>2</superscript> </para>
</entry><entry>
<para>Maybe<superscript>2</superscript>  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1gab06bba3b407f92807ba9b48de667a323">GLFW_RESIZE_NESW_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes<superscript>1</superscript> </para>
</entry><entry>
<para>Maybe<superscript>2</superscript> </para>
</entry><entry>
<para>Maybe<superscript>2</superscript>  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1ga3a5f4811155f95ccafbbb4c9a899fc1d">GLFW_RESIZE_ALL_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes  </para>
</entry></row>
      <row >
<entry>
<para><link linkend="_group__shapes_1ga297c503095b034bc8891393b637844b1">GLFW_NOT_ALLOWED_CURSOR</link> </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Yes </para>
</entry><entry>
<para>Maybe<superscript>2</superscript> </para>
</entry><entry>
<para>Maybe<superscript>2</superscript>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>1) This uses a private system API and may fail in the future.</para>

<para>2) This uses a newer standard that not all cursor themes support.</para>

<para>If the requested shape is not available, this function emits a <link linkend="_group__errors_1ga09d6943923a70ddef3a085f5baee786c">GLFW_CURSOR_UNAVAILABLE</link> error and returns <computeroutput>NULL</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>shape</entry>
                                <entry>
<para>One of the <link linkend="_group__shapes">standard shapes</link>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A new cursor ready to use or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>, <link linkend="_group__errors_1ga09d6943923a70ddef3a085f5baee786c">GLFW_CURSOR_UNAVAILABLE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_standard">Standard cursor creation</link> </para>

<para><link linkend="_group__input_1gac0f0f691f2d110f9acfb4bfe07f1216c">glfwCreateCursor</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 783 of file input.c.</para>
<programlisting>784 {
785 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>*&#32;cursor;
786 
787 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
788 
789 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shape&#32;!=&#32;<link linkend="_group__shapes_1ga8ab0e717245b85506cb0eaefdea39d0a">GLFW_ARROW_CURSOR</link>&#32;&amp;&amp;
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1ga36185f4375eaada1b04e431244774c86">GLFW_IBEAM_CURSOR</link>&#32;&amp;&amp;
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1ga8af88c0ea05ab9e8f9ac1530e8873c22">GLFW_CROSSHAIR_CURSOR</link>&#32;&amp;&amp;
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1gaad01a50929fb515bf27e4462c51f6ed0">GLFW_POINTING_HAND_CURSOR</link>&#32;&amp;&amp;
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1ga2010a43dc1050a7c9154148a63cf01ad">GLFW_RESIZE_EW_CURSOR</link>&#32;&amp;&amp;
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1gaa59214e8cdc8c8adf08fdf125ed68388">GLFW_RESIZE_NS_CURSOR</link>&#32;&amp;&amp;
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1gadf2c0a495ec9cef4e1a364cc99aa78da">GLFW_RESIZE_NWSE_CURSOR</link>&#32;&amp;&amp;
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1gab06bba3b407f92807ba9b48de667a323">GLFW_RESIZE_NESW_CURSOR</link>&#32;&amp;&amp;
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1ga3a5f4811155f95ccafbbb4c9a899fc1d">GLFW_RESIZE_ALL_CURSOR</link>&#32;&amp;&amp;
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shape&#32;!=&#32;<link linkend="_group__shapes_1ga297c503095b034bc8891393b637844b1">GLFW_NOT_ALLOWED_CURSOR</link>)
799 &#32;&#32;&#32;&#32;{
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;standard&#32;cursor&#32;0x%08X&quot;</emphasis>,&#32;shape);
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
802 &#32;&#32;&#32;&#32;}
803 
804 &#32;&#32;&#32;&#32;cursor&#32;=&#32;<link linkend="_init_8c_1afdf24e4f0665535fd3d012b810ffb18f">_glfw_calloc</link>(1,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>));
805 &#32;&#32;&#32;&#32;cursor-&gt;<link linkend="_struct___g_l_f_wcursor_1a3001692b71165b5c9c72137343f4570f">next</link>&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a8e4a4c3a75390dc4a6f649a71ab57a1e">cursorListHead</link>;
806 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a8e4a4c3a75390dc4a6f649a71ab57a1e">cursorListHead</link>&#32;=&#32;cursor;
807 
808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a2787eebb965d829f20ce793a95f7d798">createStandardCursor</link>(cursor,&#32;shape))
809 &#32;&#32;&#32;&#32;{
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__input_1ga27556b7122117bc1bbb4bb3cc003ea43">glfwDestroyCursor</link>((<link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link>*)&#32;cursor);
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
812 &#32;&#32;&#32;&#32;}
813 
814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link>*)&#32;cursor;
815 }
</programlisting>    </section><anchor xml:id="_group__input_1ga27556b7122117bc1bbb4bb3cc003ea43"/>    <section>
    <title>glfwDestroyCursor()</title>
<indexterm><primary>glfwDestroyCursor</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwDestroyCursor</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwDestroyCursor (<link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> * cursor)</computeroutput></para><para>

<para>Destroys a cursor. </para>
</para>

<para>This function destroys a cursor previously created with <link linkend="_group__input_1gac0f0f691f2d110f9acfb4bfe07f1216c">glfwCreateCursor</link>. Any remaining cursors will be destroyed by <link linkend="_group__init_1gafd90e6fd4819ea9e22e5e739519a6504">glfwTerminate</link>.</para>

<para>If the specified cursor is current for any window, that window will be reverted to the default cursor. This does not affect the cursor mode.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>cursor</entry>
                                <entry>
<para>The cursor object to destroy.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@reentrancy This function must not be called from a callback.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_object">Cursor objects</link> </para>

<para><link linkend="_group__input_1gac0f0f691f2d110f9acfb4bfe07f1216c">glfwCreateCursor</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 817 of file input.c.</para>
<programlisting>818 {
819 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>*&#32;cursor&#32;=&#32;(<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>*)&#32;handle;
820 
821 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
822 
823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor&#32;==&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
825 
826 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;the&#32;cursor&#32;is&#32;not&#32;being&#32;used&#32;by&#32;any&#32;window</emphasis>
827 &#32;&#32;&#32;&#32;{
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>;
829 
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7859e386c1ff4ed65e13e6ba1e189cfe">windowListHead</link>;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;next)
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursor&#32;==&#32;cursor)
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__input_1gafaf103cea2f43530cff7de4e01126a4f">glfwSetCursor</link>((<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link>*)&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
835 &#32;&#32;&#32;&#32;}
836 
837 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ab7be711adbe6e98d270c5cf72721c4ff">destroyCursor</link>(cursor);
838 
839 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unlink&#32;cursor&#32;from&#32;global&#32;linked&#32;list</emphasis>
840 &#32;&#32;&#32;&#32;{
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>**&#32;prev&#32;=&#32;&amp;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a8e4a4c3a75390dc4a6f649a71ab57a1e">cursorListHead</link>;
842 
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*prev&#32;!=&#32;cursor)
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;&amp;((*prev)-&gt;next);
845 
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*prev&#32;=&#32;cursor-&gt;<link linkend="_struct___g_l_f_wcursor_1a3001692b71165b5c9c72137343f4570f">next</link>;
847 &#32;&#32;&#32;&#32;}
848 
849 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1abcf72962b101a8a5c539da1a278b0e9e">_glfw_free</link>(cursor);
850 }
</programlisting>    </section><anchor xml:id="_group__input_1gae22e5d8bc376aeb71ea063d1bc63fddc"/>    <section>
    <title>glfwGetClipboardString()</title>
<indexterm><primary>glfwGetClipboardString</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetClipboardString</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char* glfwGetClipboardString (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Returns the contents of the clipboard as a string. </para>
</para>

<para>This function returns the contents of the system clipboard, if it contains or is convertible to a UTF-8 encoded string. If the clipboard is empty or if its contents cannot be converted, <computeroutput>NULL</computeroutput> is returned and a <link linkend="_group__errors_1ga196e125ef261d94184e2b55c05762f14">GLFW_FORMAT_UNAVAILABLE</link> error is generated.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>Deprecated. Any valid window or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The contents of the clipboard as a UTF-8 encoded string, or <computeroutput>NULL</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga196e125ef261d94184e2b55c05762f14">GLFW_FORMAT_UNAVAILABLE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is valid until the next call to <link linkend="_group__input_1gae22e5d8bc376aeb71ea063d1bc63fddc">glfwGetClipboardString</link> or <link linkend="_group__input_1ga7a580309bbc185a0459c3559021d2fd7">glfwSetClipboardString</link>, or until the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1clipboard">Clipboard input and output</link> </para>

<para><link linkend="_group__input_1ga7a580309bbc185a0459c3559021d2fd7">glfwSetClipboardString</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1386 of file input.c.</para>
<programlisting>1387 {
1388 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ab63964a9e71293e27b0f93208f279468">getClipboardString</link>();
1390 }
</programlisting>    </section><anchor xml:id="_group__input_1gad289438eb7cf53d11eca685373f44105"/>    <section>
    <title>glfwGetCursorPos()</title>
<indexterm><primary>glfwGetCursorPos</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetCursorPos</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwGetCursorPos (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, double * xpos, double * ypos)</computeroutput></para><para>

<para>Retrieves the position of the cursor relative to the content area of the window. </para>
</para>

<para>This function returns the position of the cursor, in screen coordinates, relative to the upper-left corner of the content area of the specified window.</para>

<para>If the cursor is disabled (with <computeroutput>GLFW_CURSOR_DISABLED</computeroutput>) then the cursor position is unbounded and limited only by the minimum and maximum values of a <computeroutput>double</computeroutput>.</para>

<para>The coordinate can be converted to their integer equivalents with the <computeroutput>floor</computeroutput> function. Casting directly to an integer type works for positive coordinates, but fails for negative ones.</para>

<para>Any or all of the position arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> position arguments will be set to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The desired window. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>Where to store the cursor x-coordinate, relative to the left edge of the content area, or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>Where to store the cursor y-coordinate, relative to the to top edge of the content area, or <computeroutput>NULL</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_pos">Cursor position</link> </para>

<para><link linkend="_group__input_1gaaf152cc93418acb0ba342e3f4af922bc">glfwSetCursorPos</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwGetMousePos</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 707 of file input.c.</para>
<programlisting>708 {
709 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
710 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
711 
712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xpos)
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*xpos&#32;=&#32;0;
714 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ypos)
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ypos&#32;=&#32;0;
716 
717 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
718 
719 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursorMode&#32;==&#32;<link linkend="_glfw3_8h_1a2315b99a329ce53e6a13a9d46fd5ca88">GLFW_CURSOR_DISABLED</link>)
720 &#32;&#32;&#32;&#32;{
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xpos)
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*xpos&#32;=&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;virtualCursorPosX;
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ypos)
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ypos&#32;=&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;virtualCursorPosY;
725 &#32;&#32;&#32;&#32;}
726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ab366f4e503c157878421242cbd8e2dc8">getCursorPos</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;xpos,&#32;ypos);
728 }
</programlisting>    </section><anchor xml:id="_group__input_1ga36983e6ae6fa159a1426a0148a1ec00b"/>    <section>
    <title>glfwGetGamepadName()</title>
<indexterm><primary>glfwGetGamepadName</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetGamepadName</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char* glfwGetGamepadName (int jid)</computeroutput></para><para>

<para>Returns the human-readable gamepad name for the specified joystick. </para>
</para>

<para>This function returns the human-readable name of the gamepad from the gamepad mapping assigned to the specified joystick.</para>

<para>If the specified joystick is not present or does not have a gamepad mapping this function will return <computeroutput>NULL</computeroutput> but will not generate an error. Call <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link> to check whether it is present regardless of whether it has a mapping.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The UTF-8 encoded name of the gamepad, or <computeroutput>NULL</computeroutput> if the joystick is not present, does not have a mapping or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified joystick is disconnected, the gamepad mappings are updated or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1gamepad">Gamepad input</link> </para>

<para><link linkend="_group__input_1gac9720b6e5062a5fc5fc0bb4be6dc04a0">glfwJoystickIsGamepad</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1261 of file input.c.</para>
<programlisting>1262 {
1263 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1264 
1265 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1266 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1267 
1268 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1269 
1270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
1271 &#32;&#32;&#32;&#32;{
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1274 &#32;&#32;&#32;&#32;}
1275 
1276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1278 
1279 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1282 
1283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1afacd50de7ce642cb201352bba9c73307">_GLFW_POLL_PRESENCE</link>))
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1285 
1286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a2f367b7ecb533af018bc37304701b502">mapping</link>)
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1288 
1289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a2f367b7ecb533af018bc37304701b502">mapping</link>-&gt;<link linkend="_struct___g_l_f_wmapping_1abef37239c923c537446d95f139966f27">name</link>;
1290 }
</programlisting>    </section><anchor xml:id="_group__input_1ga6e138d3b0761546f5a12546f367501d6"/>    <section>
    <title>glfwGetGamepadState()</title>
<indexterm><primary>glfwGetGamepadState</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetGamepadState</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetGamepadState (int jid, <link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link> * state)</computeroutput></para><para>

<para>Retrieves the state of the specified joystick remapped as a gamepad. </para>
</para>

<para>This function retrieves the state of the specified joystick remapped to an Xbox-like gamepad.</para>

<para>If the specified joystick is not present or does not have a gamepad mapping this function will return <computeroutput>GLFW_FALSE</computeroutput> but will not generate an error. Call <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link> to check whether it is present regardless of whether it has a mapping.</para>

<para>The Guide button may not be available for input as it is often hooked by the system or the Steam client.</para>

<para>Not all devices have all the buttons or axes provided by <link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link>. Unavailable buttons and axes will always report <computeroutput>GLFW_RELEASE</computeroutput> and 0.0 respectively.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>state</entry>
                                <entry>
<para>The gamepad input state of the joystick. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if successful, or <computeroutput>GLFW_FALSE</computeroutput> if no joystick is connected, it has no gamepad mapping or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1gamepad">Gamepad input</link> </para>

<para><link linkend="_group__input_1ga276a2aec236a671a99f6f0a9be7fa3fc">glfwUpdateGamepadMappings</link> </para>

<para><link linkend="_group__input_1gac9720b6e5062a5fc5fc0bb4be6dc04a0">glfwJoystickIsGamepad</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1292 of file input.c.</para>
<programlisting>1293 {
1294 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
1295 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1296 
1297 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1298 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1299 &#32;&#32;&#32;&#32;assert(state&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1300 
1301 &#32;&#32;&#32;&#32;memset(state,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_g_l_f_wgamepadstate">GLFWgamepadstate</link>));
1302 
1303 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>);
1304 
1305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
1306 &#32;&#32;&#32;&#32;{
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1309 &#32;&#32;&#32;&#32;}
1310 
1311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1313 
1314 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1317 
1318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1a27a2c8c577845c5cfecf6f88d47bb8aa">_GLFW_POLL_ALL</link>))
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1320 
1321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a2f367b7ecb533af018bc37304701b502">mapping</link>)
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1323 
1324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;&#32;i&#32;&lt;=&#32;<link linkend="_group__gamepad__buttons_1ga5cc98882f4f81dacf761639a567f61eb">GLFW_GAMEPAD_BUTTON_LAST</link>;&#32;&#32;i++)
1325 &#32;&#32;&#32;&#32;{
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct___g_l_f_wmapelement">_GLFWmapelement</link>*&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a2f367b7ecb533af018bc37304701b502">mapping</link>-&gt;<link linkend="_struct___g_l_f_wmapping_1a0b29e04fc98288bbea0762abd620bddc">buttons</link>&#32;+&#32;i;
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;type&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1a5bf4fa1f0b519aa53c409cfa43c09287">_GLFW_JOYSTICK_AXIS</link>)
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a9412079f36e6531022d5fcb9efa3a156">axes</link>[<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index]&#32;*&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;axisScale&#32;+&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;axisOffset;
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HACK:&#32;This&#32;should&#32;be&#32;baked&#32;into&#32;the&#32;value&#32;transform</emphasis>
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Bake&#32;into&#32;transform&#32;when&#32;implementing&#32;output&#32;modifiers</emphasis>
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;axisOffset&#32;&lt;&#32;0&#32;||&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;axisOffset&#32;==&#32;0&#32;&amp;&amp;&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;axisScale&#32;&gt;&#32;0))
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;&gt;=&#32;0.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>)
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a27e9896b51c65df15fba2c7139bfdb9a">buttons</link>[i]&#32;=&#32;<link linkend="_group__input_1ga2485743d0b59df3791c45951c4195265">GLFW_PRESS</link>;
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;&lt;=&#32;0.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>)
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a27e9896b51c65df15fba2c7139bfdb9a">buttons</link>[i]&#32;=&#32;<link linkend="_group__input_1ga2485743d0b59df3791c45951c4195265">GLFW_PRESS</link>;
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;type&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1aa05206ef4ae4fc35573852aa9d26c811">_GLFW_JOYSTICK_HATBIT</link>)
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;hat&#32;=&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index&#32;&gt;&gt;&#32;4;
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bit&#32;=&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index&#32;&amp;&#32;0xf;
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a84e345346f70340100edf3a715fd11f0">hats</link>[hat]&#32;&amp;&#32;bit)
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a27e9896b51c65df15fba2c7139bfdb9a">buttons</link>[i]&#32;=&#32;<link linkend="_group__input_1ga2485743d0b59df3791c45951c4195265">GLFW_PRESS</link>;
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;type&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1a582c697f7502aae03c949fde57daaf56">_GLFW_JOYSTICK_BUTTON</link>)
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a27e9896b51c65df15fba2c7139bfdb9a">buttons</link>[i]&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1acb06a7749913576f172ea34950b8ec1c">buttons</link>[<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index];
1352 &#32;&#32;&#32;&#32;}
1353 
1354 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;&#32;i&#32;&lt;=&#32;<link linkend="_group__gamepad__axes_1ga0818fd9433e1359692b7443293e5ac86">GLFW_GAMEPAD_AXIS_LAST</link>;&#32;&#32;i++)
1355 &#32;&#32;&#32;&#32;{
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct___g_l_f_wmapelement">_GLFWmapelement</link>*&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a2f367b7ecb533af018bc37304701b502">mapping</link>-&gt;<link linkend="_struct___g_l_f_wmapping_1a918450ad1a7601e13d8d727f52e870f5">axes</link>&#32;+&#32;i;
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;type&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1a5bf4fa1f0b519aa53c409cfa43c09287">_GLFW_JOYSTICK_AXIS</link>)
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a9412079f36e6531022d5fcb9efa3a156">axes</link>[<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index]&#32;*&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;axisScale&#32;+&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;axisOffset;
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a8b2c8939b1d31458de5359998375c189">axes</link>[i]&#32;=&#32;<link linkend="_init_8c_1af27e3c452fbb2a7133339f77b72fcf37">_glfw_fminf</link>(<link linkend="_init_8c_1a159e9723ec02405ea951cea91b1cff30">_glfw_fmaxf</link>(<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>,&#32;-1.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>),&#32;1.<link linkend="_glad_8h_1a691492ec0bd6383f91200e49f6ae40ed">f</link>);
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;type&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1aa05206ef4ae4fc35573852aa9d26c811">_GLFW_JOYSTICK_HATBIT</link>)
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;hat&#32;=&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index&#32;&gt;&gt;&#32;4;
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bit&#32;=&#32;<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index&#32;&amp;&#32;0xf;
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a84e345346f70340100edf3a715fd11f0">hats</link>[hat]&#32;&amp;&#32;bit)
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a8b2c8939b1d31458de5359998375c189">axes</link>[i]&#32;=&#32;1.f;
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a8b2c8939b1d31458de5359998375c189">axes</link>[i]&#32;=&#32;-1.f;
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;type&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1a582c697f7502aae03c949fde57daaf56">_GLFW_JOYSTICK_BUTTON</link>)
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state-&gt;<link linkend="_struct_g_l_f_wgamepadstate_1a8b2c8939b1d31458de5359998375c189">axes</link>[i]&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1acb06a7749913576f172ea34950b8ec1c">buttons</link>[<link linkend="_stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc">e</link>-&gt;index]&#32;*&#32;2.f&#32;-&#32;1.f;
1373 &#32;&#32;&#32;&#32;}
1374 
1375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
1376 }
</programlisting>    </section><anchor xml:id="_group__input_1ga1248dd5b1e566b2817e71547564d6af9"/>    <section>
    <title>glfwGetInputMode()</title>
<indexterm><primary>glfwGetInputMode</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetInputMode</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetInputMode (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int mode)</computeroutput></para><para>

<para>Returns the value of an input option for the specified window. </para>
</para>

<para>This function returns the value of an input option for the specified window. The mode must be one of <link linkend="_input_guide_1GLFW_CURSOR">GLFW_CURSOR</link>, <link linkend="_input_guide_1GLFW_STICKY_KEYS">GLFW_STICKY_KEYS</link>, <link linkend="_input_guide_1GLFW_STICKY_MOUSE_BUTTONS">GLFW_STICKY_MOUSE_BUTTONS</link>, <link linkend="_input_guide_1GLFW_LOCK_KEY_MODS">GLFW_LOCK_KEY_MODS</link> or <link linkend="_input_guide_1GLFW_RAW_MOUSE_MOTION">GLFW_RAW_MOUSE_MOTION</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mode</entry>
                                <entry>
<para>One of <computeroutput>GLFW_CURSOR</computeroutput>, <computeroutput>GLFW_STICKY_KEYS</computeroutput>, <computeroutput>GLFW_STICKY_MOUSE_BUTTONS</computeroutput>, <computeroutput>GLFW_LOCK_KEY_MODS</computeroutput> or <computeroutput>GLFW_RAW_MOUSE_MOTION</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__input_1gae1eb729d2dd91dc33fd60e150a6e1684">glfwSetInputMode</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 493 of file input.c.</para>
<programlisting>494 {
495 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
496 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
497 
498 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(0);
499 
500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)
501 &#32;&#32;&#32;&#32;{
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1aade31da5b884a84a7625c6b059b9132c">GLFW_CURSOR</link>:
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursorMode;
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1ae3bbe2315b7691ab088159eb6c9110fc">GLFW_STICKY_KEYS</link>:
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;stickyKeys;
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1a4d7ce8ce71030c3b04e2b78145bc59d1">GLFW_STICKY_MOUSE_BUTTONS</link>:
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;stickyMouseButtons;
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1a07b84de0b52143e1958f88a7d9105947">GLFW_LOCK_KEY_MODS</link>:
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;lockKeyMods;
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1aeeda1be76a44a1fc97c1282e06281fbb">GLFW_RAW_MOUSE_MOTION</link>:
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;rawMouseMotion;
512 &#32;&#32;&#32;&#32;}
513 
514 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;input&#32;mode&#32;0x%08X&quot;</emphasis>,&#32;<link linkend="_glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>);
515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
516 }
</programlisting>    </section><anchor xml:id="_group__input_1gaf0537d8832818963f8d24ac1c98e42a3"/>    <section>
    <title>glfwGetJoystickAxes()</title>
<indexterm><primary>glfwGetJoystickAxes</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetJoystickAxes</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> float* glfwGetJoystickAxes (int jid, int * count)</computeroutput></para><para>

<para>Returns the values of all axes of the specified joystick. </para>
</para>

<para>This function returns the values of all axes of the specified joystick. Each element in the array is a value between -1.0 and 1.0.</para>

<para>If the specified joystick is not present this function will return <computeroutput>NULL</computeroutput> but will not generate an error. This can be used instead of first calling <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>count</entry>
                                <entry>
<para>Where to store the number of axis values in the returned array. This is set to zero if the joystick is not present or an error occurred. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An array of axis values, or <computeroutput>NULL</computeroutput> if the joystick is not present or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned array is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified joystick is disconnected or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_axis">Joystick axis states</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwGetJoystickPos</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 974 of file input.c.</para>
<programlisting>975 {
976 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
977 
978 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
979 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
980 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
981 
982 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;0;
983 
984 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
985 
986 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
987 &#32;&#32;&#32;&#32;{
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
990 &#32;&#32;&#32;&#32;}
991 
992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
994 
995 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
998 
999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1a0acae8f66cc17e577defec7b7f3ffaa9">_GLFW_POLL_AXES</link>))
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1001 
1002 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a764d4c38cb049362d335450442277773">axisCount</link>;
1003 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a9412079f36e6531022d5fcb9efa3a156">axes</link>;
1004 }
</programlisting>    </section><anchor xml:id="_group__input_1gaee8f9532b2dff9278cee70d0e6cde82c"/>    <section>
    <title>glfwGetJoystickButtons()</title>
<indexterm><primary>glfwGetJoystickButtons</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetJoystickButtons</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> unsigned char* glfwGetJoystickButtons (int jid, int * count)</computeroutput></para><para>

<para>Returns the state of all buttons of the specified joystick. </para>
</para>

<para>This function returns the state of all buttons of the specified joystick. Each element in the array is either <computeroutput>GLFW_PRESS</computeroutput> or <computeroutput>GLFW_RELEASE</computeroutput>.</para>

<para>For backward compatibility with earlier versions that did not have <link linkend="_group__input_1gad415b53795a1aeced53b7b66c7943931">glfwGetJoystickHats</link>, the button array also includes all hats, each represented as four buttons. The hats are in the same order as returned by <emphasis role="bold">glfwGetJoystickHats</emphasis> and are in the order <emphasis>up</emphasis>, <emphasis>right</emphasis>, <emphasis>down</emphasis> and <emphasis>left</emphasis>. To disable these extra buttons, set the <link linkend="_intro_guide_1GLFW_JOYSTICK_HAT_BUTTONS">GLFW_JOYSTICK_HAT_BUTTONS</link> init hint before initialization.</para>

<para>If the specified joystick is not present this function will return <computeroutput>NULL</computeroutput> but will not generate an error. This can be used instead of first calling <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>count</entry>
                                <entry>
<para>Where to store the number of button states in the returned array. This is set to zero if the joystick is not present or an error occurred. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An array of button states, or <computeroutput>NULL</computeroutput> if the joystick is not present or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned array is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified joystick is disconnected or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_button">Joystick button states</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.2. @glfw3 Changed to return a dynamic array. </para>
</formalpara>
</para>
<para>
Definition at line 1006 of file input.c.</para>
<programlisting>1007 {
1008 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1009 
1010 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1011 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1012 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1013 
1014 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;0;
1015 
1016 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1017 
1018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
1019 &#32;&#32;&#32;&#32;{
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1022 &#32;&#32;&#32;&#32;}
1023 
1024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1026 
1027 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1030 
1031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1a92d2619dac62f3f6a7585562f3ab24a5">_GLFW_POLL_BUTTONS</link>))
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1033 
1034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a5146cc5fba43a4706292e0c12d4c4fd0">hints</link>.<link linkend="_struct___g_l_f_wlibrary_1a86550c51bab958a99de2e243e48dd8e8">init</link>.<link linkend="_struct___g_l_f_winitconfig_1aad1f2044edaa145d86bed1fe2b61fa06">hatButtons</link>)
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a556785f64f15a3153371a39d120fbc0b">buttonCount</link>&#32;+&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a812df79ec7f31658e884c4bb93ab73b5">hatCount</link>&#32;*&#32;4;
1036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a556785f64f15a3153371a39d120fbc0b">buttonCount</link>;
1038 
1039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1acb06a7749913576f172ea34950b8ec1c">buttons</link>;
1040 }
</programlisting>    </section><anchor xml:id="_group__input_1ga40f8522193d983af333bb6e21a3b120a"/>    <section>
    <title>glfwGetJoystickGUID()</title>
<indexterm><primary>glfwGetJoystickGUID</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetJoystickGUID</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char* glfwGetJoystickGUID (int jid)</computeroutput></para><para>

<para>Returns the SDL compatible GUID of the specified joystick. </para>
</para>

<para>This function returns the SDL compatible GUID, as a UTF-8 encoded hexadecimal string, of the specified joystick. The returned string is allocated and freed by GLFW. You should not free it yourself.</para>

<para>The GUID is what connects a joystick to a gamepad mapping. A connected joystick will always have a GUID even if there is no gamepad mapping assigned to it.</para>

<para>If the specified joystick is not present this function will return <computeroutput>NULL</computeroutput> but will not generate an error. This can be used instead of first calling <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link>.</para>

<para>The GUID uses the format introduced in SDL 2.0.5. This GUID tries to uniquely identify the make and model of a joystick but does not identify a specific unit, e.g. all wired Xbox 360 controllers will have the same GUID on that platform. The GUID for a unit may vary between platforms depending on what hardware information the platform specific APIs provide.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The UTF-8 encoded GUID of the joystick, or <computeroutput>NULL</computeroutput> if the joystick is not present or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified joystick is disconnected or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1gamepad">Gamepad input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1102 of file input.c.</para>
<programlisting>1103 {
1104 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1105 
1106 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1107 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1108 
1109 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1110 
1111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
1112 &#32;&#32;&#32;&#32;{
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1115 &#32;&#32;&#32;&#32;}
1116 
1117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1119 
1120 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1123 
1124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1afacd50de7ce642cb201352bba9c73307">_GLFW_POLL_PRESENCE</link>))
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1126 
1127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a0d7c8dee95327210882e04073a2b05d4">guid</link>;
1128 }
</programlisting>    </section><anchor xml:id="_group__input_1gad415b53795a1aeced53b7b66c7943931"/>    <section>
    <title>glfwGetJoystickHats()</title>
<indexterm><primary>glfwGetJoystickHats</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetJoystickHats</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> unsigned char* glfwGetJoystickHats (int jid, int * count)</computeroutput></para><para>

<para>Returns the state of all hats of the specified joystick. </para>
</para>

<para>This function returns the state of all hats of the specified joystick. Each element in the array is one of the following values:</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Name </para>
</entry><entry>
<para>Value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_CENTERED</computeroutput> </para>
</entry><entry>
<para>0  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_UP</computeroutput> </para>
</entry><entry>
<para>1  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_RIGHT</computeroutput> </para>
</entry><entry>
<para>2  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_DOWN</computeroutput> </para>
</entry><entry>
<para>4  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_LEFT</computeroutput> </para>
</entry><entry>
<para>8  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_RIGHT_UP</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_HAT_RIGHT</computeroutput> | <computeroutput>GLFW_HAT_UP</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_RIGHT_DOWN</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_HAT_RIGHT</computeroutput> | <computeroutput>GLFW_HAT_DOWN</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_LEFT_UP</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_HAT_LEFT</computeroutput> | <computeroutput>GLFW_HAT_UP</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>GLFW_HAT_LEFT_DOWN</computeroutput> </para>
</entry><entry>
<para><computeroutput>GLFW_HAT_LEFT</computeroutput> | <computeroutput>GLFW_HAT_DOWN</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>The diagonal directions are bitwise combinations of the primary (up, right, down and left) directions and you can test for these individually by ANDing it with the corresponding direction.</para>

<para><literallayout><computeroutput>if&#32;(hats[2]&#32;&amp;&#32;GLFW_HAT_RIGHT)
{
&#32;&#32;&#32;&#32;//&#32;State&#32;of&#32;hat&#32;2&#32;could&#32;be&#32;right-up,&#32;right&#32;or&#32;right-down
}
</computeroutput></literallayout></para>

<para>If the specified joystick is not present this function will return <computeroutput>NULL</computeroutput> but will not generate an error. This can be used instead of first calling <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>count</entry>
                                <entry>
<para>Where to store the number of hat states in the returned array. This is set to zero if the joystick is not present or an error occurred. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An array of hat states, or <computeroutput>NULL</computeroutput> if the joystick is not present or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned array is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified joystick is disconnected, this function is called again for that joystick or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_hat">Joystick hat states</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1042 of file input.c.</para>
<programlisting>1043 {
1044 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1045 
1046 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1047 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1048 &#32;&#32;&#32;&#32;assert(<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1049 
1050 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;0;
1051 
1052 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1053 
1054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
1055 &#32;&#32;&#32;&#32;{
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1058 &#32;&#32;&#32;&#32;}
1059 
1060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1062 
1063 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1066 
1067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1a92d2619dac62f3f6a7585562f3ab24a5">_GLFW_POLL_BUTTONS</link>))
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1069 
1070 &#32;&#32;&#32;&#32;*<link linkend="_glad_8h_1a5b40aca7a9682963dd00a8f5aef0a901">count</link>&#32;=&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a812df79ec7f31658e884c4bb93ab73b5">hatCount</link>;
1071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a84e345346f70340100edf3a715fd11f0">hats</link>;
1072 }
</programlisting>    </section><anchor xml:id="_group__input_1ga9b5d2d156f0138e0e7ad065e477dcfe3"/>    <section>
    <title>glfwGetJoystickName()</title>
<indexterm><primary>glfwGetJoystickName</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetJoystickName</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char* glfwGetJoystickName (int jid)</computeroutput></para><para>

<para>Returns the name of the specified joystick. </para>
</para>

<para>This function returns the name, encoded as UTF-8, of the specified joystick. The returned string is allocated and freed by GLFW. You should not free it yourself.</para>

<para>If the specified joystick is not present this function will return <computeroutput>NULL</computeroutput> but will not generate an error. This can be used instead of first calling <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The UTF-8 encoded name of the joystick, or <computeroutput>NULL</computeroutput> if the joystick is not present or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is valid until the specified joystick is disconnected or the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_name">Joystick name</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1074 of file input.c.</para>
<programlisting>1075 {
1076 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1077 
1078 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1079 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1080 
1081 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1082 
1083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
1084 &#32;&#32;&#32;&#32;{
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1087 &#32;&#32;&#32;&#32;}
1088 
1089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1091 
1092 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1095 
1096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1afacd50de7ce642cb201352bba9c73307">_GLFW_POLL_PRESENCE</link>))
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1098 
1099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a5c3a6e76b15f9865478c10da42eb8518">name</link>;
1100 }
</programlisting>    </section><anchor xml:id="_group__input_1gaf4317a5b0a7849f9b2b7b2b69366a72b"/>    <section>
    <title>glfwGetJoystickUserPointer()</title>
<indexterm><primary>glfwGetJoystickUserPointer</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetJoystickUserPointer</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link>* glfwGetJoystickUserPointer (int jid)</computeroutput></para><para>

<para>Returns the user pointer of the specified joystick. </para>
</para>

<para>This function returns the current value of the user-defined pointer of the specified joystick. The initial value is <computeroutput>NULL</computeroutput>.</para>

<para>This function may be called from the joystick callback, even for a joystick that is being disconnected.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The joystick whose pointer to return.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_userptr">Joystick user pointer</link> </para>

<para><link linkend="_group__input_1ga3a8999c2d2634c7bcf4a04f1ec64895c">glfwSetJoystickUserPointer</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1146 of file input.c.</para>
<programlisting>1147 {
1148 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1149 
1150 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1151 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1152 
1153 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1154 
1155 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1158 
1159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a60db31a4f87d8cc3b96dc229d82e0c59">userPointer</link>;
1160 }
</programlisting>    </section><anchor xml:id="_group__input_1ga7d8ad8ffaf272808f04e1d5d33ec8859"/>    <section>
    <title>glfwGetKey()</title>
<indexterm><primary>glfwGetKey</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetKey</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetKey (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int key)</computeroutput></para><para>

<para>Returns the last reported state of a keyboard key for the specified window. </para>
</para>

<para>This function returns the last state reported for the specified key to the specified window. The returned state is one of <computeroutput>GLFW_PRESS</computeroutput> or <computeroutput>GLFW_RELEASE</computeroutput>. The higher-level action <computeroutput>GLFW_REPEAT</computeroutput> is only reported to the key callback.</para>

<para>If the <link linkend="_input_guide_1GLFW_STICKY_KEYS">GLFW_STICKY_KEYS</link> input mode is enabled, this function returns <computeroutput>GLFW_PRESS</computeroutput> the first time you call it for a key that was pressed, even if that key has already been released.</para>

<para>The key functions deal with physical keys, with <link linkend="_group__keys">key tokens</link> named after their use on the standard US keyboard layout. If you want to input text, use the Unicode character callback instead.</para>

<para>The <link linkend="_group__mods">modifier key bit masks</link> are not key tokens and cannot be used with this function.</para>

<para><emphasis role="bold">Do not use this function</emphasis> to implement <link linkend="_input_guide_1input_char">text input</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The desired window. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The desired <link linkend="_group__keys">keyboard key</link>. <computeroutput>GLFW_KEY_UNKNOWN</computeroutput> is not a valid key for this function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>One of <computeroutput>GLFW_PRESS</computeroutput> or <computeroutput>GLFW_RELEASE</computeroutput>.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_key">Key input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 661 of file input.c.</para>
<programlisting>662 {
663 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
664 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
665 
666 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>);
667 
668 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(key&#32;&lt;&#32;GLFW_KEY_SPACE&#32;||&#32;key&#32;&gt;&#32;<link linkend="_group__keys_1ga442cbaef7bfb9a4ba13594dd7fbf2789">GLFW_KEY_LAST</link>)
669 &#32;&#32;&#32;&#32;{
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;key&#32;%i&quot;</emphasis>,&#32;<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>);
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>;
672 &#32;&#32;&#32;&#32;}
673 
674 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;keys[<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>]&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1af05e8b8bf6c333e9b40f3480b9d88241">_GLFW_STICK</link>)
675 &#32;&#32;&#32;&#32;{
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sticky&#32;mode:&#32;release&#32;key&#32;now</emphasis>
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;keys[<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>]&#32;=&#32;<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>;
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__input_1ga2485743d0b59df3791c45951c4195265">GLFW_PRESS</link>;
679 &#32;&#32;&#32;&#32;}
680 
681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;keys[<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>];
682 }
</programlisting>    </section><anchor xml:id="_group__input_1ga244737e5242c866e0f0af5a9c95f3e58"/>    <section>
    <title>glfwGetKeyName()</title>
<indexterm><primary>glfwGetKeyName</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetKeyName</secondary></indexterm>
<para><computeroutput>const <link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> char* glfwGetKeyName (int key, int scancode)</computeroutput></para><para>

<para>Returns the layout-specific name of the specified printable key. </para>
</para>

<para>This function returns the name of the specified printable key, encoded as UTF-8. This is typically the character that key would produce without any modifier keys, intended for displaying key bindings to the user. For dead keys, it is typically the diacritic it would add to a character.</para>

<para><emphasis role="bold">Do not use this function</emphasis> for <link linkend="_input_guide_1input_char">text input</link>. You will break text input for many languages even if it happens to work for yours.</para>

<para>If the key is <computeroutput>GLFW_KEY_UNKNOWN</computeroutput>, the scancode is used to identify the key, otherwise the scancode is ignored. If you specify a non-printable key, or <computeroutput>GLFW_KEY_UNKNOWN</computeroutput> and a scancode that maps to a non-printable key, this function returns <computeroutput>NULL</computeroutput> but does not emit an error.</para>

<para>This behavior allows you to always pass in the arguments in the <link linkend="_input_guide_1input_key">key callback</link> without modification.</para>

<para>The printable keys are:<itemizedlist>
<listitem>
<para><computeroutput>GLFW_KEY_APOSTROPHE</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_COMMA</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_MINUS</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_PERIOD</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_SLASH</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_SEMICOLON</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_EQUAL</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_LEFT_BRACKET</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_RIGHT_BRACKET</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_BACKSLASH</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_WORLD_1</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_WORLD_2</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_0</computeroutput> to <computeroutput>GLFW_KEY_9</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_A</computeroutput> to <computeroutput>GLFW_KEY_Z</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_KP_0</computeroutput> to <computeroutput>GLFW_KEY_KP_9</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_KP_DECIMAL</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_KP_DIVIDE</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_KP_MULTIPLY</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_KP_SUBTRACT</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_KP_ADD</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLFW_KEY_KP_EQUAL</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>Names for printable keys depend on keyboard layout, while names for non-printable keys are the same across layouts but depend on the application language and should be localized along with other user interface text.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The key to query, or <computeroutput>GLFW_KEY_UNKNOWN</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>scancode</entry>
                                <entry>
<para>The scancode of the key to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The UTF-8 encoded, layout-specific name of the key, or <computeroutput>NULL</computeroutput>.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>The contents of the returned string may change when a keyboard layout change event is received.</para>
</formalpara>
@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is valid until the library is terminated.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_key_name">Key names</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 629 of file input.c.</para>
<programlisting>630 {
631 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
632 
633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>&#32;!=&#32;<link linkend="_group__keys_1ga99aacc875b6b27a072552631e13775c7">GLFW_KEY_UNKNOWN</link>)
634 &#32;&#32;&#32;&#32;{
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>&#32;!=&#32;<link linkend="_group__keys_1gaebdc76d4a808191e6d21b7e4ad2acd97">GLFW_KEY_KP_EQUAL</link>&#32;&amp;&amp;
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(key&#32;&lt;&#32;GLFW_KEY_KP_0&#32;||&#32;key&#32;&gt;&#32;<link linkend="_group__keys_1gad09c7c98acc79e89aa6a0a91275becac">GLFW_KEY_KP_ADD</link>)&#32;&amp;&amp;
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(key&#32;&lt;&#32;GLFW_KEY_APOSTROPHE&#32;||&#32;key&#32;&gt;&#32;<link linkend="_group__keys_1ga20494bfebf0bb4fc9503afca18ab2c5e">GLFW_KEY_WORLD_2</link>))
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
641 
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scancode&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aa594d8adf1f21390097c062dd76e6de9">getKeyScancode</link>(<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>);
643 &#32;&#32;&#32;&#32;}
644 
645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aacc9f47d28e05401a5e987e2e701c59c">getScancodeName</link>(scancode);
646 }
</programlisting>    </section><anchor xml:id="_group__input_1ga3ea3b9d74f8352506068620980e01fe5"/>    <section>
    <title>glfwGetKeyScancode()</title>
<indexterm><primary>glfwGetKeyScancode</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetKeyScancode</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetKeyScancode (int key)</computeroutput></para><para>

<para>Returns the platform-specific scancode of the specified key. </para>
</para>

<para>This function returns the platform-specific scancode of the specified key.</para>

<para>If the key is <computeroutput>GLFW_KEY_UNKNOWN</computeroutput> or does not exist on the keyboard this method will return <computeroutput>-1</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>Any <link linkend="_group__keys">named key</link>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The platform-specific scancode for the key, or <computeroutput>-1</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_key">Key input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 648 of file input.c.</para>
<programlisting>649 {
650 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(-1);
651 
652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(key&#32;&lt;&#32;GLFW_KEY_SPACE&#32;||&#32;key&#32;&gt;&#32;<link linkend="_group__keys_1ga442cbaef7bfb9a4ba13594dd7fbf2789">GLFW_KEY_LAST</link>)
653 &#32;&#32;&#32;&#32;{
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;key&#32;%i&quot;</emphasis>,&#32;<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>);
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>;
656 &#32;&#32;&#32;&#32;}
657 
658 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aa594d8adf1f21390097c062dd76e6de9">getKeyScancode</link>(<link linkend="_gears_8c_1accd6b5b92b78666e36543412d4ac14cd">key</link>);
659 }
</programlisting>    </section><anchor xml:id="_group__input_1ga6da5efb04f700c312a57a169fa9393a0"/>    <section>
    <title>glfwGetMouseButton()</title>
<indexterm><primary>glfwGetMouseButton</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetMouseButton</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwGetMouseButton (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int button)</computeroutput></para><para>

<para>Returns the last reported state of a mouse button for the specified window. </para>
</para>

<para>This function returns the last state reported for the specified mouse button to the specified window. The returned state is one of <computeroutput>GLFW_PRESS</computeroutput> or <computeroutput>GLFW_RELEASE</computeroutput>.</para>

<para>If the <link linkend="_input_guide_1GLFW_STICKY_MOUSE_BUTTONS">GLFW_STICKY_MOUSE_BUTTONS</link> input mode is enabled, this function returns <computeroutput>GLFW_PRESS</computeroutput> the first time you call it for a mouse button that was pressed, even if that mouse button has already been released.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The desired window. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>button</entry>
                                <entry>
<para>The desired <link linkend="_group__buttons">mouse button</link>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>One of <computeroutput>GLFW_PRESS</computeroutput> or <computeroutput>GLFW_RELEASE</computeroutput>.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_mouse_button">Mouse button input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</formalpara>
</para>
<para>
Definition at line 684 of file input.c.</para>
<programlisting>685 {
686 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
687 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
688 
689 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>);
690 
691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(button&#32;&lt;&#32;GLFW_MOUSE_BUTTON_1&#32;||&#32;button&#32;&gt;&#32;<link linkend="_group__buttons_1gab1fd86a4518a9141ec7bcde2e15a2fdf">GLFW_MOUSE_BUTTON_LAST</link>)
692 &#32;&#32;&#32;&#32;{
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;mouse&#32;button&#32;%i&quot;</emphasis>,&#32;button);
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>;
695 &#32;&#32;&#32;&#32;}
696 
697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mouseButtons[button]&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1af05e8b8bf6c333e9b40f3480b9d88241">_GLFW_STICK</link>)
698 &#32;&#32;&#32;&#32;{
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sticky&#32;mode:&#32;release&#32;mouse&#32;button&#32;now</emphasis>
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mouseButtons[button]&#32;=&#32;<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>;
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__input_1ga2485743d0b59df3791c45951c4195265">GLFW_PRESS</link>;
702 &#32;&#32;&#32;&#32;}
703 
704 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mouseButtons[button];
705 }
</programlisting>    </section><anchor xml:id="_group__input_1ga03d4a1039b8662c71eeb40beea8cb622"/>    <section>
    <title>glfwGetTime()</title>
<indexterm><primary>glfwGetTime</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetTime</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> double glfwGetTime (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Returns the GLFW time. </para>
</para>

<para>This function returns the current GLFW time, in seconds. Unless the time has been set using <link linkend="_group__input_1ga94360a3628a09f32708f83cc3fa48590">glfwSetTime</link> it measures time elapsed since GLFW was initialized.</para>

<para>This function and <link linkend="_group__input_1ga94360a3628a09f32708f83cc3fa48590">glfwSetTime</link> are helper functions on top of <link linkend="_group__input_1gaa92d10b10013372778efbf6367714371">glfwGetTimerFrequency</link> and <link linkend="_group__input_1gaa00c3e32227eb70b3968fca0bfe4ae26">glfwGetTimerValue</link>.</para>

<para>The resolution of the timer is system dependent, but is usually on the order of a few micro- or nanoseconds. It uses the highest-resolution monotonic time source on each operating system.</para>

<para><formalpara><title>Returns</title>

<para>The current time, in seconds, or zero if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Reading and writing of the internal base time is not atomic, so it needs to be externally synchronized with calls to <link linkend="_group__input_1ga94360a3628a09f32708f83cc3fa48590">glfwSetTime</link>.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1time">Time input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
<para>
Definition at line 1392 of file input.c.</para>
<programlisting>1393 {
1394 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(0.0);
1395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">double</emphasis>)&#32;(<link linkend="_cocoa__time_8c_1a5ee7e09b380d3afdd3c2738b726a2a6e">_glfwPlatformGetTimerValue</link>()&#32;-&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aad3e22c47c3095922e6bcbab7f4fe113">timer</link>.<link linkend="_struct___g_l_f_wlibrary_1a1afbda4be41aa343745fc99acc9f895b">offset</link>)&#32;/
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_cocoa__time_8c_1ab3fe69b1eec5554114fe774623a15137">_glfwPlatformGetTimerFrequency</link>();
1397 }
</programlisting>    </section><anchor xml:id="_group__input_1gaa92d10b10013372778efbf6367714371"/>    <section>
    <title>glfwGetTimerFrequency()</title>
<indexterm><primary>glfwGetTimerFrequency</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetTimerFrequency</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> glfwGetTimerFrequency (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Returns the frequency, in Hz, of the raw timer. </para>
</para>

<para>This function returns the frequency, in Hz, of the raw timer.</para>

<para><formalpara><title>Returns</title>

<para>The frequency of the timer, in Hz, or zero if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1time">Time input</link> </para>

<para><link linkend="_group__input_1gaa00c3e32227eb70b3968fca0bfe4ae26">glfwGetTimerValue</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 1419 of file input.c.</para>
<programlisting>1420 {
1421 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(0);
1422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_cocoa__time_8c_1ab3fe69b1eec5554114fe774623a15137">_glfwPlatformGetTimerFrequency</link>();
1423 }
</programlisting>    </section><anchor xml:id="_group__input_1gaa00c3e32227eb70b3968fca0bfe4ae26"/>    <section>
    <title>glfwGetTimerValue()</title>
<indexterm><primary>glfwGetTimerValue</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwGetTimerValue</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> glfwGetTimerValue (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Returns the current value of the raw timer. </para>
</para>

<para>This function returns the current value of the raw timer, measured in 1&#160;/&#160;frequency seconds. To get the frequency, call <link linkend="_group__input_1gaa92d10b10013372778efbf6367714371">glfwGetTimerFrequency</link>.</para>

<para><formalpara><title>Returns</title>

<para>The value of the timer, or zero if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1time">Time input</link> </para>

<para><link linkend="_group__input_1gaa92d10b10013372778efbf6367714371">glfwGetTimerFrequency</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 1413 of file input.c.</para>
<programlisting>1414 {
1415 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(0);
1416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_cocoa__time_8c_1a5ee7e09b380d3afdd3c2738b726a2a6e">_glfwPlatformGetTimerValue</link>();
1417 }
</programlisting>    </section><anchor xml:id="_group__input_1gac9720b6e5062a5fc5fc0bb4be6dc04a0"/>    <section>
    <title>glfwJoystickIsGamepad()</title>
<indexterm><primary>glfwJoystickIsGamepad</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwJoystickIsGamepad</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwJoystickIsGamepad (int jid)</computeroutput></para><para>

<para>Returns whether the specified joystick has a gamepad mapping. </para>
</para>

<para>This function returns whether the specified joystick is both present and has a gamepad mapping.</para>

<para>If the specified joystick is present but does not have a gamepad mapping this function will return <computeroutput>GLFW_FALSE</computeroutput> but will not generate an error. Call <link linkend="_group__input_1gacb1b7dfd79df673d48814c06fc436eff">glfwJoystickPresent</link> to check if a joystick is present regardless of whether it has a mapping.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if a joystick is both present and has a gamepad mapping, or <computeroutput>GLFW_FALSE</computeroutput> otherwise.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1gamepad">Gamepad input</link> </para>

<para><link linkend="_group__input_1ga6e138d3b0761546f5a12546f367501d6">glfwGetGamepadState</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1233 of file input.c.</para>
<programlisting>1234 {
1235 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1236 
1237 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1238 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1239 
1240 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>);
1241 
1242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
1243 &#32;&#32;&#32;&#32;{
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1246 &#32;&#32;&#32;&#32;}
1247 
1248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1250 
1251 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1254 
1255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1afacd50de7ce642cb201352bba9c73307">_GLFW_POLL_PRESENCE</link>))
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
1257 
1258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a2f367b7ecb533af018bc37304701b502">mapping</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1259 }
</programlisting>    </section><anchor xml:id="_group__input_1gacb1b7dfd79df673d48814c06fc436eff"/>    <section>
    <title>glfwJoystickPresent()</title>
<indexterm><primary>glfwJoystickPresent</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwJoystickPresent</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwJoystickPresent (int jid)</computeroutput></para><para>

<para>Returns whether the specified joystick is present. </para>
</para>

<para>This function returns whether the specified joystick is present.</para>

<para>There is no need to call this function before other functions that accept a joystick ID, as they all check for presence before performing any other work.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The <link linkend="_group__joysticks">joystick</link> to query. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if the joystick is present, or <computeroutput>GLFW_FALSE</computeroutput> otherwise.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick">Joystick input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwGetJoystickParam</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 949 of file input.c.</para>
<programlisting>950 {
951 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
952 
953 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
954 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
955 
956 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>);
957 
958 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jid&#32;&lt;&#32;0&#32;||&#32;jid&#32;&gt;&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>)
959 &#32;&#32;&#32;&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;joystick&#32;ID&#32;%i&quot;</emphasis>,&#32;jid);
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
962 &#32;&#32;&#32;&#32;}
963 
964 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
966 
967 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
970 
971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a3da90532dee140ec7fbdc402dc700baa">pollJoystick</link>(js,&#32;<link linkend="_internal_8h_1afacd50de7ce642cb201352bba9c73307">_GLFW_POLL_PRESENCE</link>);
972 }
</programlisting>    </section><anchor xml:id="_group__input_1ga9b83d8957a566b22b3b768c7d1d4be03"/>    <section>
    <title>glfwRawMouseMotionSupported()</title>
<indexterm><primary>glfwRawMouseMotionSupported</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwRawMouseMotionSupported</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwRawMouseMotionSupported (<link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> )</computeroutput></para><para>

<para>Returns whether raw mouse motion is supported. </para>
</para>

<para>This function returns whether raw mouse motion is supported on the current system. This status does not change after GLFW has been initialized so you only need to check this once. If you attempt to enable raw motion on a system that does not support it, <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> will be emitted.</para>

<para>Raw mouse motion is closer to the actual motion of the mouse across a surface. It is not affected by the scaling and acceleration applied to the motion of the desktop cursor. That processing is suitable for a cursor while raw motion is better for controlling for example a 3D camera. Because of this, raw mouse motion is only provided when the cursor is disabled.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if raw mouse motion is supported on the current machine, or <computeroutput>GLFW_FALSE</computeroutput> otherwise.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1raw_mouse_motion">Raw mouse motion</link> </para>

<para><link linkend="_group__input_1gae1eb729d2dd91dc33fd60e150a6e1684">glfwSetInputMode</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 623 of file input.c.</para>
<programlisting>624 {
625 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>);
626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a56567c6076b398457c9335feb3c2c0da">rawMouseMotionSupported</link>();
627 }
</programlisting>    </section><anchor xml:id="_group__input_1gad3d7e6e3134fa034cc1604162579585e"/>    <section>
    <title>glfwSetCharCallback()</title>
<indexterm><primary>glfwSetCharCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetCharCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e">GLFWcharfun</link> glfwSetCharCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e">GLFWcharfun</link> callback)</computeroutput></para><para>

<para>Sets the Unicode character callback. </para>
</para>

<para>This function sets the character callback of the specified window, which is called when a Unicode character is input.</para>

<para>The character callback is intended for Unicode text input. As it deals with characters, it is keyboard layout dependent, whereas the <link linkend="_group__input_1gaa4cbcb81b939b8800e44cea971ddae47">key callback</link> is not. Characters do not map 1:1 to physical keys, as a key may produce zero, one or more characters. If you want to know whether a specific physical key was pressed or released, see the key callback instead.</para>

<para>The character callback behaves as system text input normally does and will not be called if modifier keys are held down that would prevent normal text input on that platform, for example a Super (Command) key on macOS or Alt key on Windows.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;unsigned&#32;int&#32;codepoint)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_char">Text input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.4. @glfw3 Added window handle parameter and return value. </para>
</formalpara>
</para>
<para>
Definition at line 875 of file input.c.</para>
<programlisting>876 {
877 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
878 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
879 
880 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
881 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1ga1ab90a55cf3f58639b893c0f4118cb6e">GLFWcharfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.character,&#32;cbfun);
882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
883 }
</programlisting>    </section><anchor xml:id="_group__input_1ga359a8529c2eb06e6e2173168f30ac99c"/>    <section>
    <title>glfwSetCharModsCallback()</title>
<indexterm><primary>glfwSetCharModsCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetCharModsCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f">GLFWcharmodsfun</link> glfwSetCharModsCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f">GLFWcharmodsfun</link> callback)</computeroutput></para><para>

<para>Sets the Unicode character with modifiers callback. </para>
</para>

<para>This function sets the character with modifiers callback of the specified window, which is called when a Unicode character is input regardless of what modifier keys are used.</para>

<para>The character with modifiers callback is intended for implementing custom Unicode character input. For regular Unicode text input, see the <link linkend="_group__input_1gad3d7e6e3134fa034cc1604162579585e">character callback</link>. Like the character callback, the character with modifiers callback deals with characters and is keyboard layout dependent. Characters do not map 1:1 to physical keys, as a key may produce zero, one or more characters. If you want to know whether a specific physical key was pressed or released, see the <link linkend="_group__input_1gaa4cbcb81b939b8800e44cea971ddae47">key callback</link> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;unsigned&#32;int&#32;codepoint,&#32;int&#32;mods)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f">function pointer type</link>.</para>

<para><para><link linkend="_deprecated_1_deprecated000002">Deprecated</link> 
<para>Scheduled for removal in version 4.0.</para>
</para></para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_char">Text input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 885 of file input.c.</para>
<programlisting>886 {
887 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
888 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
889 
890 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
891 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1gac3cf64f90b6219c05ac7b7822d5a4b8f">GLFWcharmodsfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.charmods,&#32;cbfun);
892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
893 }
</programlisting>    </section><anchor xml:id="_group__input_1ga7a580309bbc185a0459c3559021d2fd7"/>    <section>
    <title>glfwSetClipboardString()</title>
<indexterm><primary>glfwSetClipboardString</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetClipboardString</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetClipboardString (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, const char * string)</computeroutput></para><para>

<para>Sets the clipboard to the specified string. </para>
</para>

<para>This function sets the system clipboard to the specified, UTF-8 encoded string.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>Deprecated. Any valid window or <computeroutput>NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>string</entry>
                                <entry>
<para>A UTF-8 encoded string.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@pointer_lifetime The specified string is copied before this function returns.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1clipboard">Clipboard input and output</link> </para>

<para><link linkend="_group__input_1gae22e5d8bc376aeb71ea063d1bc63fddc">glfwGetClipboardString</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 1378 of file input.c.</para>
<programlisting>1379 {
1380 &#32;&#32;&#32;&#32;assert(<emphasis role="keywordtype">string</emphasis>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1381 
1382 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
1383 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ac1072cabfd11e01888797c05a8b6832b">setClipboardString</link>(<emphasis role="keywordtype">string</emphasis>);
1384 }
</programlisting>    </section><anchor xml:id="_group__input_1gafaf103cea2f43530cff7de4e01126a4f"/>    <section>
    <title>glfwSetCursor()</title>
<indexterm><primary>glfwSetCursor</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetCursor</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetCursor (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1ga89261ae18c75e863aaf2656ecdd238f4">GLFWcursor</link> * cursor)</computeroutput></para><para>

<para>Sets the cursor for the window. </para>
</para>

<para>This function sets the cursor image to be used when the cursor is over the content area of the specified window. The set cursor will only be visible when the <link linkend="_input_guide_1cursor_mode">cursor mode</link> of the window is <computeroutput>GLFW_CURSOR_NORMAL</computeroutput>.</para>

<para>On some platforms, the set cursor may not be visible unless the window also has input focus.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window to set the cursor for. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cursor</entry>
                                <entry>
<para>The cursor to set, or <computeroutput>NULL</computeroutput> to switch back to the default arrow cursor.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_object">Cursor objects</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 852 of file input.c.</para>
<programlisting>853 {
854 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;windowHandle;
855 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>*&#32;cursor&#32;=&#32;(<link linkend="_struct___g_l_f_wcursor">_GLFWcursor</link>*)&#32;cursorHandle;
856 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
857 
858 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
859 
860 &#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursor&#32;=&#32;cursor;
861 
862 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1aaf941bbf769ac5a3398db9fe5d318d2d">setCursor</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;cursor);
863 }
</programlisting>    </section><anchor xml:id="_group__input_1gacdb3490e374c8bc08549c6f173ffa7c2"/>    <section>
    <title>glfwSetCursorEnterCallback()</title>
<indexterm><primary>glfwSetCursorEnterCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetCursorEnterCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe">GLFWcursorenterfun</link> glfwSetCursorEnterCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe">GLFWcursorenterfun</link> callback)</computeroutput></para><para>

<para>Sets the cursor enter/leave callback. </para>
</para>

<para>This function sets the cursor boundary crossing callback of the specified window, which is called when the cursor enters or leaves the content area of the window.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;entered)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_enter">Cursor enter/leave events</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
<para>
Definition at line 917 of file input.c.</para>
<programlisting>919 {
920 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
921 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
922 
923 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
924 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1gaa93dc4818ac9ab32532909d53a337cbe">GLFWcursorenterfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.cursorEnter,&#32;cbfun);
925 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
926 }
</programlisting>    </section><anchor xml:id="_group__input_1gaaf152cc93418acb0ba342e3f4af922bc"/>    <section>
    <title>glfwSetCursorPos()</title>
<indexterm><primary>glfwSetCursorPos</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetCursorPos</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetCursorPos (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, double xpos, double ypos)</computeroutput></para><para>

<para>Sets the position of the cursor, relative to the content area of the window. </para>
</para>

<para>This function sets the position, in screen coordinates, of the cursor relative to the upper-left corner of the content area of the specified window. The window must have input focus. If the window does not have input focus when this function is called, it fails silently.</para>

<para><emphasis role="bold">Do not use this function</emphasis> to implement things like camera controls. GLFW already provides the <computeroutput>GLFW_CURSOR_DISABLED</computeroutput> cursor mode that hides the cursor, transparently re-centers it and provides unconstrained cursor motion. See <link linkend="_group__input_1gae1eb729d2dd91dc33fd60e150a6e1684">glfwSetInputMode</link> for more information.</para>

<para>If the cursor mode is <computeroutput>GLFW_CURSOR_DISABLED</computeroutput> then the cursor position is unconstrained and limited only by the minimum and maximum values of a <computeroutput>double</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The desired window. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>xpos</entry>
                                <entry>
<para>The desired x-coordinate, relative to the left edge of the content area. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ypos</entry>
                                <entry>
<para>The desired y-coordinate, relative to the top edge of the content area.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland This function will only work when the cursor mode is <computeroutput>GLFW_CURSOR_DISABLED</computeroutput>, otherwise it will do nothing.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_pos">Cursor position</link> </para>

<para><link linkend="_group__input_1gad289438eb7cf53d11eca685373f44105">glfwGetCursorPos</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwSetMousePos</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 730 of file input.c.</para>
<programlisting>731 {
732 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
733 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
734 
735 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
736 
737 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(xpos&#32;!=&#32;xpos&#32;||&#32;xpos&#32;&lt;&#32;-DBL_MAX&#32;||&#32;xpos&#32;&gt;&#32;DBL_MAX&#32;||
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ypos&#32;!=&#32;ypos&#32;||&#32;ypos&#32;&lt;&#32;-DBL_MAX&#32;||&#32;ypos&#32;&gt;&#32;DBL_MAX)
739 &#32;&#32;&#32;&#32;{
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;cursor&#32;position&#32;%f&#32;%f&quot;</emphasis>,
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xpos,&#32;ypos);
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
744 &#32;&#32;&#32;&#32;}
745 
746 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a4f8164c43b16635c985a41ff9056a5fe">windowFocused</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>))
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
748 
749 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursorMode&#32;==&#32;<link linkend="_glfw3_8h_1a2315b99a329ce53e6a13a9d46fd5ca88">GLFW_CURSOR_DISABLED</link>)
750 &#32;&#32;&#32;&#32;{
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;update&#32;the&#32;accumulated&#32;position&#32;if&#32;the&#32;cursor&#32;is&#32;disabled</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;virtualCursorPosX&#32;=&#32;xpos;
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;virtualCursorPosY&#32;=&#32;ypos;
754 &#32;&#32;&#32;&#32;}
755 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
756 &#32;&#32;&#32;&#32;{
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;system&#32;cursor&#32;position</emphasis>
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a12b2a907300bcf7e4badcd84c36f41aa">setCursorPos</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;xpos,&#32;ypos);
759 &#32;&#32;&#32;&#32;}
760 }
</programlisting>    </section><anchor xml:id="_group__input_1ga74124d0eff27040fd10e4df9e17d129c"/>    <section>
    <title>glfwSetCursorPosCallback()</title>
<indexterm><primary>glfwSetCursorPosCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetCursorPosCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68">GLFWcursorposfun</link> glfwSetCursorPosCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68">GLFWcursorposfun</link> callback)</computeroutput></para><para>

<para>Sets the cursor position callback. </para>
</para>

<para>This function sets the cursor position callback of the specified window, which is called when the cursor is moved. The callback is provided with the position, in screen coordinates, relative to the upper-left corner of the content area of the window.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;double&#32;xpos,&#32;double&#32;ypos);
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1cursor_pos">Cursor position</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwSetMousePosCallback</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 906 of file input.c.</para>
<programlisting>908 {
909 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
910 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
911 
912 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
913 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1gad6fae41b3ac2e4209aaa87b596c57f68">GLFWcursorposfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.cursorPos,&#32;cbfun);
914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
915 }
</programlisting>    </section><anchor xml:id="_group__input_1ga8bab819b7b0ef9bc1a38e58c577c1d13"/>    <section>
    <title>glfwSetDropCallback()</title>
<indexterm><primary>glfwSetDropCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetDropCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaaba73c3274062c18723b7f05862d94b2">GLFWdropfun</link> glfwSetDropCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1gaaba73c3274062c18723b7f05862d94b2">GLFWdropfun</link> callback)</computeroutput></para><para>

<para>Sets the path drop callback. </para>
</para>

<para>This function sets the path drop callback of the specified window, which is called when one or more dragged paths are dropped on the window.</para>

<para>Because the path array and its strings may have been generated specifically for that event, they are not guaranteed to be valid after the callback has returned. If you wish to use them after the callback returns, you need to make a deep copy.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new file drop callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;path_count,&#32;const&#32;char*&#32;paths[])
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1gaaba73c3274062c18723b7f05862d94b2">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para><formalpara><title>Remarks</title>

<para>@wayland File drop is currently unimplemented.</para>
</formalpara>
@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1path_drop">Path drop input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.1. </para>
</formalpara>
</para>
<para>
Definition at line 939 of file input.c.</para>
<programlisting>940 {
941 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
942 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
943 
944 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
945 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1gaaba73c3274062c18723b7f05862d94b2">GLFWdropfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.drop,&#32;cbfun);
946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
947 }
</programlisting>    </section><anchor xml:id="_group__input_1gae1eb729d2dd91dc33fd60e150a6e1684"/>    <section>
    <title>glfwSetInputMode()</title>
<indexterm><primary>glfwSetInputMode</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetInputMode</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetInputMode (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, int mode, int value)</computeroutput></para><para>

<para>Sets an input option for the specified window. </para>
</para>

<para>This function sets an input mode option for the specified window. The mode must be one of <link linkend="_input_guide_1GLFW_CURSOR">GLFW_CURSOR</link>, <link linkend="_input_guide_1GLFW_STICKY_KEYS">GLFW_STICKY_KEYS</link>, <link linkend="_input_guide_1GLFW_STICKY_MOUSE_BUTTONS">GLFW_STICKY_MOUSE_BUTTONS</link>, <link linkend="_input_guide_1GLFW_LOCK_KEY_MODS">GLFW_LOCK_KEY_MODS</link> or <link linkend="_input_guide_1GLFW_RAW_MOUSE_MOTION">GLFW_RAW_MOUSE_MOTION</link>.</para>

<para>If the mode is <computeroutput>GLFW_CURSOR</computeroutput>, the value must be one of the following cursor modes:<itemizedlist>
<listitem>
<para><computeroutput>GLFW_CURSOR_NORMAL</computeroutput> makes the cursor visible and behaving normally.</para>
</listitem><listitem>
<para><computeroutput>GLFW_CURSOR_HIDDEN</computeroutput> makes the cursor invisible when it is over the content area of the window but does not restrict the cursor from leaving.</para>
</listitem><listitem>
<para><computeroutput>GLFW_CURSOR_DISABLED</computeroutput> hides and grabs the cursor, providing virtual and unlimited cursor movement. This is useful for implementing for example 3D camera controls.</para>
</listitem></itemizedlist>
</para>

<para>If the mode is <computeroutput>GLFW_STICKY_KEYS</computeroutput>, the value must be either <computeroutput>GLFW_TRUE</computeroutput> to enable sticky keys, or <computeroutput>GLFW_FALSE</computeroutput> to disable it. If sticky keys are enabled, a key press will ensure that <link linkend="_group__input_1ga7d8ad8ffaf272808f04e1d5d33ec8859">glfwGetKey</link> returns <computeroutput>GLFW_PRESS</computeroutput> the next time it is called even if the key had been released before the call. This is useful when you are only interested in whether keys have been pressed but not when or in which order.</para>

<para>If the mode is <computeroutput>GLFW_STICKY_MOUSE_BUTTONS</computeroutput>, the value must be either <computeroutput>GLFW_TRUE</computeroutput> to enable sticky mouse buttons, or <computeroutput>GLFW_FALSE</computeroutput> to disable it. If sticky mouse buttons are enabled, a mouse button press will ensure that <link linkend="_group__input_1ga6da5efb04f700c312a57a169fa9393a0">glfwGetMouseButton</link> returns <computeroutput>GLFW_PRESS</computeroutput> the next time it is called even if the mouse button had been released before the call. This is useful when you are only interested in whether mouse buttons have been pressed but not when or in which order.</para>

<para>If the mode is <computeroutput>GLFW_LOCK_KEY_MODS</computeroutput>, the value must be either <computeroutput>GLFW_TRUE</computeroutput> to enable lock key modifier bits, or <computeroutput>GLFW_FALSE</computeroutput> to disable them. If enabled, callbacks that receive modifier bits will also have the <link linkend="_group__mods_1gaefeef8fcf825a6e43e241b337897200f">GLFW_MOD_CAPS_LOCK</link> bit set when the event was generated with Caps Lock on, and the <link linkend="_group__mods_1ga64e020b8a42af8376e944baf61feecbe">GLFW_MOD_NUM_LOCK</link> bit when Num Lock was on.</para>

<para>If the mode is <computeroutput>GLFW_RAW_MOUSE_MOTION</computeroutput>, the value must be either <computeroutput>GLFW_TRUE</computeroutput> to enable raw (unscaled and unaccelerated) mouse motion when the cursor is disabled, or <computeroutput>GLFW_FALSE</computeroutput> to disable it. If raw motion is not supported, attempting to set this will emit <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link>. Call <link linkend="_group__input_1ga9b83d8957a566b22b3b768c7d1d4be03">glfwRawMouseMotionSupported</link> to check for support.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose input mode to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mode</entry>
                                <entry>
<para>One of <computeroutput>GLFW_CURSOR</computeroutput>, <computeroutput>GLFW_STICKY_KEYS</computeroutput>, <computeroutput>GLFW_STICKY_MOUSE_BUTTONS</computeroutput>, <computeroutput>GLFW_LOCK_KEY_MODS</computeroutput> or <computeroutput>GLFW_RAW_MOUSE_MOTION</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>value</entry>
                                <entry>
<para>The new value of the specified input mode.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>, <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link> and <link linkend="_group__errors_1ga526fba20a01504a8086c763b6ca53ce5">GLFW_FEATURE_UNAVAILABLE</link> (see above).</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__input_1ga1248dd5b1e566b2817e71547564d6af9">glfwGetInputMode</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwEnable</computeroutput> and <computeroutput>glfwDisable</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 518 of file input.c.</para>
<programlisting>519 {
520 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
521 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
522 
523 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
524 
525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>)
526 &#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1aade31da5b884a84a7625c6b059b9132c">GLFW_CURSOR</link>:
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;!=&#32;<link linkend="_glfw3_8h_1ae04dd25c8577e19fa8c97368561f6c68">GLFW_CURSOR_NORMAL</link>&#32;&amp;&amp;
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;!=&#32;<link linkend="_glfw3_8h_1ac4d5cb9d78de8573349c58763d53bf11">GLFW_CURSOR_HIDDEN</link>&#32;&amp;&amp;
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;!=&#32;<link linkend="_glfw3_8h_1a2315b99a329ce53e6a13a9d46fd5ca88">GLFW_CURSOR_DISABLED</link>)
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;cursor&#32;mode&#32;0x%08X&quot;</emphasis>,
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
538 
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursorMode&#32;==&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
541 
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;cursorMode&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
543 
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1ab366f4e503c157878421242cbd8e2dc8">getCursorPos</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;virtualCursorPosX,
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;virtualCursorPosY);
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a00975c3896aa18de74e118225b8d0d11">setCursorMode</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
550 
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1ae3bbe2315b7691ab088159eb6c9110fc">GLFW_STICKY_KEYS</link>:
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;stickyKeys&#32;==&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
556 
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
560 
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Release&#32;all&#32;sticky&#32;keys</emphasis>
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;&#32;i&#32;&lt;=&#32;<link linkend="_group__keys_1ga442cbaef7bfb9a4ba13594dd7fbf2789">GLFW_KEY_LAST</link>;&#32;&#32;i++)
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;keys[i]&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1af05e8b8bf6c333e9b40f3480b9d88241">_GLFW_STICK</link>)
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;keys[i]&#32;=&#32;<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>;
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
568 
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;stickyKeys&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
572 
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1a4d7ce8ce71030c3b04e2b78145bc59d1">GLFW_STICKY_MOUSE_BUTTONS</link>:
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;stickyMouseButtons&#32;==&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
578 
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
582 
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Release&#32;all&#32;sticky&#32;mouse&#32;buttons</emphasis>
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;&#32;i&#32;&lt;=&#32;<link linkend="_group__buttons_1gab1fd86a4518a9141ec7bcde2e15a2fdf">GLFW_MOUSE_BUTTON_LAST</link>;&#32;&#32;i++)
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mouseButtons[i]&#32;==&#32;<link linkend="_deps_2glfw_2src_2input_8c_1af05e8b8bf6c333e9b40f3480b9d88241">_GLFW_STICK</link>)
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;mouseButtons[i]&#32;=&#32;<link linkend="_group__input_1gada11d965c4da13090ad336e030e4d11f">GLFW_RELEASE</link>;
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
590 
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;stickyMouseButtons&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
594 
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1a07b84de0b52143e1958f88a7d9105947">GLFW_LOCK_KEY_MODS</link>:
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;lockKeyMods&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
600 
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_glfw3_8h_1aeeda1be76a44a1fc97c1282e06281fbb">GLFW_RAW_MOUSE_MOTION</link>:
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a56567c6076b398457c9335feb3c2c0da">rawMouseMotionSupported</link>())
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>,
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Raw&#32;mouse&#32;motion&#32;is&#32;not&#32;supported&#32;on&#32;this&#32;system&quot;</emphasis>);
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
609 
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>&#32;?&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>&#32;:&#32;<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>;
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;rawMouseMotion&#32;==&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>)
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;rawMouseMotion&#32;=&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>;
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a93b1c9522ac532d94b32072cf4bf1421">platform</link>.<link linkend="_struct___g_l_f_wplatform_1a55eae3de308cd1ca34e5ada8e88f070e">setRawMouseMotion</link>(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>,&#32;<link linkend="_glad_8h_1a79169be77d7e02a24f68a5bfe627dc29">value</link>);
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
618 &#32;&#32;&#32;&#32;}
619 
620 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1ga76f6bb9c4eea73db675f096b404593ce">GLFW_INVALID_ENUM</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;input&#32;mode&#32;0x%08X&quot;</emphasis>,&#32;<link linkend="_glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>);
621 }
</programlisting>    </section><anchor xml:id="_group__input_1gad90f60a4c0e04629928305b53e96154a"/>    <section>
    <title>glfwSetJoystickCallback()</title>
<indexterm><primary>glfwSetJoystickCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetJoystickCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaa21ad5986ae9a26077a40142efb56243">GLFWjoystickfun</link> glfwSetJoystickCallback (<link linkend="_group__input_1gaa21ad5986ae9a26077a40142efb56243">GLFWjoystickfun</link> callback)</computeroutput></para><para>

<para>Sets the joystick configuration callback. </para>
</para>

<para>This function sets the joystick configuration callback, or removes the currently set callback. This is called when a joystick is connected to or disconnected from the system.</para>

<para>For joystick connection and disconnection events to be delivered on all platforms, you need to call one of the <link linkend="_input_guide_1events">event processing</link> functions. Joystick disconnection may also be detected and the callback called by joystick functions. The function will then return whatever it returns if the joystick is not present.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(int&#32;jid,&#32;int&#32;event)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1gaa21ad5986ae9a26077a40142efb56243">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_event">Joystick configuration changes</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.2. </para>
</formalpara>
</para>
<para>
Definition at line 1162 of file input.c.</para>
<programlisting>1163 {
1164 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1165 
1166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!initJoysticks())
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1168 
1169 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1gaa21ad5986ae9a26077a40142efb56243">GLFWjoystickfun</link>,&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a59fc977d623a780eb748aadcd1485d6c">callbacks</link>.<link linkend="_struct___g_l_f_wlibrary_1a60d552e59e41b4500e3d36acd35131da">joystick</link>,&#32;cbfun);
1170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
1171 }
</programlisting>    </section><anchor xml:id="_group__input_1ga3a8999c2d2634c7bcf4a04f1ec64895c"/>    <section>
    <title>glfwSetJoystickUserPointer()</title>
<indexterm><primary>glfwSetJoystickUserPointer</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetJoystickUserPointer</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetJoystickUserPointer (int jid, <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> * pointer)</computeroutput></para><para>

<para>Sets the user pointer of the specified joystick. </para>
</para>

<para>This function sets the user-defined pointer of the specified joystick. The current value is retained until the joystick is disconnected. The initial value is <computeroutput>NULL</computeroutput>.</para>

<para>This function may be called from the joystick callback, even for a joystick that is being disconnected.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>jid</entry>
                                <entry>
<para>The joystick whose pointer to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pointer</entry>
                                <entry>
<para>The new value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1joystick_userptr">Joystick user pointer</link> </para>

<para><link linkend="_group__input_1gaf4317a5b0a7849f9b2b7b2b69366a72b">glfwGetJoystickUserPointer</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1130 of file input.c.</para>
<programlisting>1131 {
1132 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js;
1133 
1134 &#32;&#32;&#32;&#32;assert(jid&#32;&gt;=&#32;<link linkend="_group__joysticks_1ga34a0443d059e9f22272cd4669073f73d">GLFW_JOYSTICK_1</link>);
1135 &#32;&#32;&#32;&#32;assert(jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>);
1136 
1137 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
1138 
1139 &#32;&#32;&#32;&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1142 
1143 &#32;&#32;&#32;&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a60db31a4f87d8cc3b96dc229d82e0c59">userPointer</link>&#32;=&#32;<link linkend="_glad_8h_1a8e06a460fd89ba3a95ce49119ef7aab2">pointer</link>;
1144 }
</programlisting>    </section><anchor xml:id="_group__input_1gaa4cbcb81b939b8800e44cea971ddae47"/>    <section>
    <title>glfwSetKeyCallback()</title>
<indexterm><primary>glfwSetKeyCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetKeyCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga5bd751b27b90f865d2ea613533f0453c">GLFWkeyfun</link> glfwSetKeyCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1ga5bd751b27b90f865d2ea613533f0453c">GLFWkeyfun</link> callback)</computeroutput></para><para>

<para>Sets the key callback. </para>
</para>

<para>This function sets the key callback of the specified window, which is called when a key is pressed, repeated or released.</para>

<para>The key functions deal with physical keys, with layout independent <link linkend="_group__keys">key tokens</link> named after their values in the standard US keyboard layout. If you want to input text, use the <link linkend="_group__input_1gad3d7e6e3134fa034cc1604162579585e">character callback</link> instead.</para>

<para>When a window loses input focus, it will generate synthetic key release events for all pressed keys. You can tell these events from user-generated events by the fact that the synthetic ones are generated after the focus loss event has been processed, i.e. after the <link linkend="_group__window_1gacce1c4dd273b5c4c60b05599f8725b4e">window focus callback</link> has been called.</para>

<para>The scancode of a key is specific to that platform or sometimes even to that machine. Scancodes are intended to allow users to bind keys that don&apos;t have a GLFW key token. Such keys have <computeroutput>key</computeroutput> set to <computeroutput>GLFW_KEY_UNKNOWN</computeroutput>, their state is not saved and so it cannot be queried with <link linkend="_group__input_1ga7d8ad8ffaf272808f04e1d5d33ec8859">glfwGetKey</link>.</para>

<para>Sometimes GLFW needs to generate synthetic key events, in which case the scancode may be zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new key callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;key,&#32;int&#32;scancode,&#32;int&#32;action,&#32;int&#32;mods)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1ga5bd751b27b90f865d2ea613533f0453c">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_key">Key input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter and return value. </para>
</formalpara>
</para>
<para>
Definition at line 865 of file input.c.</para>
<programlisting>866 {
867 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
868 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
869 
870 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
871 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1ga5bd751b27b90f865d2ea613533f0453c">GLFWkeyfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.key,&#32;cbfun);
872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
873 }
</programlisting>    </section><anchor xml:id="_group__input_1gab8f17646f43cdca14e5095512618fdf6"/>    <section>
    <title>glfwSetMouseButtonCallback()</title>
<indexterm><primary>glfwSetMouseButtonCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetMouseButtonCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1ga0184dcb59f6d85d735503dcaae809727">GLFWmousebuttonfun</link> glfwSetMouseButtonCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1ga0184dcb59f6d85d735503dcaae809727">GLFWmousebuttonfun</link> callback)</computeroutput></para><para>

<para>Sets the mouse button callback. </para>
</para>

<para>This function sets the mouse button callback of the specified window, which is called when a mouse button is pressed or released.</para>

<para>When a window loses input focus, it will generate synthetic mouse button release events for all pressed mouse buttons. You can tell these events from user-generated events by the fact that the synthetic ones are generated after the focus loss event has been processed, i.e. after the <link linkend="_group__window_1gacce1c4dd273b5c4c60b05599f8725b4e">window focus callback</link> has been called.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;int&#32;button,&#32;int&#32;action,&#32;int&#32;mods)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1ga0184dcb59f6d85d735503dcaae809727">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1input_mouse_button">Mouse button input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. @glfw3 Added window handle parameter and return value. </para>
</formalpara>
</para>
<para>
Definition at line 895 of file input.c.</para>
<programlisting>897 {
898 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
899 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
900 
901 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
902 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1ga0184dcb59f6d85d735503dcaae809727">GLFWmousebuttonfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.mouseButton,&#32;cbfun);
903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
904 }
</programlisting>    </section><anchor xml:id="_group__input_1gaa786b59f19ad8525d251cda8e0d7d29b"/>    <section>
    <title>glfwSetScrollCallback()</title>
<indexterm><primary>glfwSetScrollCallback</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetScrollCallback</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__input_1gaf656112c33de3efdb227fa58f0134cf5">GLFWscrollfun</link> glfwSetScrollCallback (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window, <link linkend="_group__input_1gaf656112c33de3efdb227fa58f0134cf5">GLFWscrollfun</link> callback)</computeroutput></para><para>

<para>Sets the scroll callback. </para>
</para>

<para>This function sets the scroll callback of the specified window, which is called when a scrolling device is used, such as a mouse wheel or scrolling area of a touchpad.</para>

<para>The scroll callback receives all scrolling input, like that from a mouse wheel or a touchpad scrolling area.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>window</entry>
                                <entry>
<para>The window whose callback to set. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>callback</entry>
                                <entry>
<para>The new scroll callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <link linkend="_intro_guide_1intro_init">initialized</link>.</para>
</formalpara>
@callback_signature <literallayout><computeroutput>void&#32;function_name(GLFWwindow*&#32;window,&#32;double&#32;xoffset,&#32;double&#32;yoffset)
</computeroutput></literallayout> For more information about the callback parameters, see the <link linkend="_group__input_1gaf656112c33de3efdb227fa58f0134cf5">function pointer type</link>.</para>

<para>@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1scrolling">Scroll input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. Replaces <computeroutput>glfwSetMouseWheelCallback</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 928 of file input.c.</para>
<programlisting>930 {
931 &#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;=&#32;(<link linkend="_struct___g_l_f_wwindow">_GLFWwindow</link>*)&#32;handle;
932 &#32;&#32;&#32;&#32;assert(<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
933 
934 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
935 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aafb05e4264bc90b90636133fd00eecf6">_GLFW_SWAP</link>(<link linkend="_group__input_1gaf656112c33de3efdb227fa58f0134cf5">GLFWscrollfun</link>,&#32;<link linkend="_truetype__test__win32_8c_1a773143cded4dde4b20b2c5dc501a5b51">window</link>-&gt;callbacks.scroll,&#32;cbfun);
936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cbfun;
937 }
</programlisting>    </section><anchor xml:id="_group__input_1ga94360a3628a09f32708f83cc3fa48590"/>    <section>
    <title>glfwSetTime()</title>
<indexterm><primary>glfwSetTime</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwSetTime</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_glext_8h_1a46df6112013cf583e82b25cebd5cb499">void</link> glfwSetTime (double time)</computeroutput></para><para>

<para>Sets the GLFW time. </para>
</para>

<para>This function sets the current GLFW time, in seconds. The value must be a positive finite number less than or equal to 18446744073.0, which is approximately 584.5 years.</para>

<para>This function and <link linkend="_group__input_1ga03d4a1039b8662c71eeb40beea8cb622">glfwGetTime</link> are helper functions on top of <link linkend="_group__input_1gaa92d10b10013372778efbf6367714371">glfwGetTimerFrequency</link> and <link linkend="_group__input_1gaa00c3e32227eb70b3968fca0bfe4ae26">glfwGetTimerValue</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>time</entry>
                                <entry>
<para>The new value, in seconds.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>.</para>

<para><formalpara><title>Remarks</title>

<para>The upper limit of GLFW time is calculated as floor((2<superscript>64</superscript> - 1) / 10<superscript>9</superscript>) and is due to implementations storing nanoseconds in 64 bits. The limit may be increased in the future.</para>
</formalpara>
@thread_safety This function may be called from any thread. Reading and writing of the internal base time is not atomic, so it needs to be externally synchronized with calls to <link linkend="_group__input_1ga03d4a1039b8662c71eeb40beea8cb622">glfwGetTime</link>.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1time">Time input</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 2.2. </para>
</formalpara>
</para>
<para>
Definition at line 1399 of file input.c.</para>
<programlisting>1400 {
1401 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1aefaae289f758535cd19343d0120b9715">_GLFW_REQUIRE_INIT</link>();
1402 
1403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(time&#32;!=&#32;time&#32;||&#32;time&#32;&lt;&#32;0.0&#32;||&#32;time&#32;&gt;&#32;18446744073.0)
1404 &#32;&#32;&#32;&#32;{
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3287b282ec57a4a89127ae51f49f10f5">_glfwInputError</link>(<link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;time&#32;%f&quot;</emphasis>,&#32;time);
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1407 &#32;&#32;&#32;&#32;}
1408 
1409 &#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1aad3e22c47c3095922e6bcbab7f4fe113">timer</link>.<link linkend="_struct___g_l_f_wlibrary_1a1afbda4be41aa343745fc99acc9f895b">offset</link>&#32;=&#32;<link linkend="_cocoa__time_8c_1a5ee7e09b380d3afdd3c2738b726a2a6e">_glfwPlatformGetTimerValue</link>()&#32;-
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;(time&#32;*&#32;<link linkend="_cocoa__time_8c_1ab3fe69b1eec5554114fe774623a15137">_glfwPlatformGetTimerFrequency</link>());
1411 }
</programlisting>    </section><anchor xml:id="_group__input_1ga276a2aec236a671a99f6f0a9be7fa3fc"/>    <section>
    <title>glfwUpdateGamepadMappings()</title>
<indexterm><primary>glfwUpdateGamepadMappings</primary><secondary>Input reference</secondary></indexterm>
<indexterm><primary>Input reference</primary><secondary>glfwUpdateGamepadMappings</secondary></indexterm>
<para><computeroutput><link linkend="_glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwUpdateGamepadMappings (const char * string)</computeroutput></para><para>

<para>Adds the specified SDL_GameControllerDB gamepad mappings. </para>
</para>

<para>This function parses the specified ASCII encoded string and updates the internal list with any gamepad mappings it finds. This string may contain either a single gamepad mapping or many mappings separated by newlines. The parser supports the full format of the <computeroutput>gamecontrollerdb.txt</computeroutput> source file including empty lines and comments.</para>

<para>See <link linkend="_input_guide_1gamepad_mapping">Gamepad mappings</link> for a description of the format.</para>

<para>If there is already a gamepad mapping for a given GUID in the internal list, it will be replaced by the one passed to this function. If the library is terminated and re-initialized the internal list will revert to the built-in default.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>string</entry>
                                <entry>
<para>The string containing the gamepad mappings. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if successful, or <computeroutput>GLFW_FALSE</computeroutput> if an <link linkend="_intro_guide_1error_handling">error</link> occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link> and <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link>.</para>

<para>@thread_safety This function must only be called from the main thread.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_input_guide_1gamepad">Gamepad input</link> </para>

<para><link linkend="_group__input_1gac9720b6e5062a5fc5fc0bb4be6dc04a0">glfwJoystickIsGamepad</link> </para>

<para><link linkend="_group__input_1ga36983e6ae6fa159a1426a0148a1ec00b">glfwGetGamepadName</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.3. </para>
</formalpara>
</para>
<para>
Definition at line 1173 of file input.c.</para>
<programlisting>1174 {
1175 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;jid;
1176 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;=&#32;<link linkend="_glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b">string</link>;
1177 
1178 &#32;&#32;&#32;&#32;assert(<emphasis role="keywordtype">string</emphasis>&#32;!=&#32;<link linkend="_include_2vally_2config_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
1179 
1180 &#32;&#32;&#32;&#32;<link linkend="_internal_8h_1a69563c87fe776d416636a4d1b0e9e599">_GLFW_REQUIRE_INIT_OR_RETURN</link>(<link linkend="_group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5">GLFW_FALSE</link>);
1181 
1182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>)
1183 &#32;&#32;&#32;&#32;{
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;*<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)&#32;||
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;&gt;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;*<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;&lt;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>)&#32;||
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;&gt;=&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;*<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;&lt;=&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>))
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;line[1024];
1189 
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_glad_8h_1a921fa83f7755f0139c84ba1831417a2e">length</link>&#32;=&#32;strcspn(<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>,&#32;<emphasis role="stringliteral">&quot;\r\n&quot;</emphasis>);
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_glad_8h_1a921fa83f7755f0139c84ba1831417a2e">length</link>&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(line))
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmapping">_GLFWmapping</link>&#32;<link linkend="_glext_8h_1aa4f194e5160ccbb5a8e83ab6ef4676d2">mapping</link>&#32;=&#32;{{0}};
1194 
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(line,&#32;<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>,&#32;<link linkend="_glad_8h_1a921fa83f7755f0139c84ba1831417a2e">length</link>);
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line[<link linkend="_glad_8h_1a921fa83f7755f0139c84ba1831417a2e">length</link>]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
1197 
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseMapping(&amp;<link linkend="_glext_8h_1aa4f194e5160ccbb5a8e83ab6ef4676d2">mapping</link>,&#32;line))
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wmapping">_GLFWmapping</link>*&#32;previous&#32;=&#32;findMapping(<link linkend="_glext_8h_1aa4f194e5160ccbb5a8e83ab6ef4676d2">mapping</link>.guid);
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(previous)
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*previous&#32;=&#32;<link linkend="_glext_8h_1aa4f194e5160ccbb5a8e83ab6ef4676d2">mapping</link>;
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a974eecd4fb17f568673a0b16474268aa">mappingCount</link>++;
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a0f3d3622b971d031db365d71eeae0048">mappings</link>&#32;=
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a428a65f03ddd87abacc7db0251b4e9af">_glfw_realloc</link>(<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a0f3d3622b971d031db365d71eeae0048">mappings</link>,
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct___g_l_f_wmapping">_GLFWmapping</link>)&#32;*&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a974eecd4fb17f568673a0b16474268aa">mappingCount</link>);
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a0f3d3622b971d031db365d71eeae0048">mappings</link>[<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a974eecd4fb17f568673a0b16474268aa">mappingCount</link>&#32;-&#32;1]&#32;=&#32;<link linkend="_glext_8h_1aa4f194e5160ccbb5a8e83ab6ef4676d2">mapping</link>;
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1213 
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;+=&#32;<link linkend="_glad_8h_1a921fa83f7755f0139c84ba1831417a2e">length</link>;
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;+=&#32;strcspn(<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>,&#32;<emphasis role="stringliteral">&quot;\r\n&quot;</emphasis>);
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>&#32;+=&#32;strspn(<link linkend="_glext_8h_1a1f2d7f8147412c43ba2303a56f97ee73">c</link>,&#32;<emphasis role="stringliteral">&quot;\r\n&quot;</emphasis>);
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1221 &#32;&#32;&#32;&#32;}
1222 
1223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(jid&#32;=&#32;0;&#32;&#32;jid&#32;&lt;=&#32;<link linkend="_group__joysticks_1ga9ca13ebf24c331dd98df17d84a4b72c9">GLFW_JOYSTICK_LAST</link>;&#32;&#32;jid++)
1224 &#32;&#32;&#32;&#32;{
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct___g_l_f_wjoystick">_GLFWjoystick</link>*&#32;js&#32;=&#32;<link linkend="_init_8c_1a3007bc654ca6468ee69759007f70ba1e">_glfw</link>.<link linkend="_struct___g_l_f_wlibrary_1a7f6b01642d8bc4965fd7b084a01bc401">joysticks</link>&#32;+&#32;jid;
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a88a2e71ed9c3be6eca850577a104d611">present</link>)
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;js-&gt;<link linkend="_struct___g_l_f_wjoystick_1a2f367b7ecb533af018bc37304701b502">mapping</link>&#32;=&#32;findValidMapping(js);
1228 &#32;&#32;&#32;&#32;}
1229 
1230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__init_1ga2744fbb29b5631bb28802dbe0cf36eba">GLFW_TRUE</link>;
1231 }
</programlisting></section>
</section>
</section>
