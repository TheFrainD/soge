<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_quick_guide">

<para>This guide takes you through writing a small application using GLFW 3. The application will create a window and OpenGL context, render a rotating triangle and exit when the user closes the window or presses <emphasis>Escape</emphasis>. This guide will introduce a few of the most commonly used functions, but there are many more.</para>

<para>This guide assumes no experience with earlier versions of GLFW. If you have used GLFW 2 in the past, read <link linkend="_moving_guide">Moving from GLFW 2 to 3</link>, as some functions behave differently in GLFW 3.</para>
<section xml:id="_quick_guide_1quick_steps">
<title>Step by step</title>
<section xml:id="_quick_guide_1quick_include">
<title>Including the GLFW header</title>

<para>In the source files of your application where you use GLFW, you need to include its header file.</para>

<para><literallayout><computeroutput>#include&#32;&lt;GLFW/glfw3.h&gt;
</computeroutput></literallayout></para>

<para>This header provides all the constants, types and function prototypes of the GLFW API.</para>

<para>By default it also includes the OpenGL header from your development environment. On some platforms this header only supports older versions of OpenGL. The most extreme case is Windows, where it typically only supports OpenGL 1.2.</para>

<para>Most programs will instead use an <link linkend="_context_guide_1context_glext_auto">extension loader library</link> and include its header. This example uses files generated by <link xlink:href="https://gen.glad.sh/">glad</link>. The GLFW header can detect most such headers if they are included first and will then not include the one from your development environment.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glad/gl.h&gt;
#include&#32;&lt;GLFW/glfw3.h&gt;
</computeroutput></literallayout></para>

<para>To make sure there will be no header conflicts, you can define <link linkend="_build_guide_1GLFW_INCLUDE_NONE">GLFW_INCLUDE_NONE</link> before the GLFW header to explicitly disable inclusion of the development environment header. This also allows the two headers to be included in any order.</para>

<para><literallayout><computeroutput>#define&#32;GLFW_INCLUDE_NONE
#include&#32;&lt;GLFW/glfw3.h&gt;
#include&#32;&lt;glad/gl.h&gt;
</computeroutput></literallayout></para>
</section>
<section xml:id="_quick_guide_1quick_init_term">
<title>Initializing and terminating GLFW</title>

<para>Before you can use most GLFW functions, the library must be initialized. On successful initialization, <computeroutput>GLFW_TRUE</computeroutput> is returned. If an error occurred, <computeroutput>GLFW_FALSE</computeroutput> is returned.</para>

<para><literallayout><computeroutput>if&#32;(!glfwInit())
{
&#32;&#32;&#32;&#32;//&#32;Initialization&#32;failed
}
</computeroutput></literallayout></para>

<para>Note that <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput> are and will always be one and zero.</para>

<para>When you are done using GLFW, typically just before the application exits, you need to terminate GLFW.</para>

<para><literallayout><computeroutput>glfwTerminate();
</computeroutput></literallayout></para>

<para>This destroys any remaining windows and releases any other resources allocated by GLFW. After this call, you must initialize GLFW again before using any GLFW functions that require it.</para>
</section>
<section xml:id="_quick_guide_1quick_capture_error">
<title>Setting an error callback</title>

<para>Most events are reported through callbacks, whether it&apos;s a key being pressed, a GLFW window being moved, or an error occurring. Callbacks are C functions (or C++ static methods) that are called by GLFW with arguments describing the event.</para>

<para>In case a GLFW function fails, an error is reported to the GLFW error callback. You can receive these reports with an error callback. This function must have the signature below but may do anything permitted in other callbacks.</para>

<para><literallayout><computeroutput>void&#32;error_callback(int&#32;error,&#32;const&#32;char*&#32;description)
{
&#32;&#32;&#32;&#32;fprintf(stderr,&#32;&quot;Error:&#32;%s\n&quot;,&#32;description);
}
</computeroutput></literallayout></para>

<para><link linkend="_struct_callback">Callback</link> functions must be set, so GLFW knows to call them. The function to set the error callback is one of the few GLFW functions that may be called before initialization, which lets you be notified of errors both during and after initialization.</para>

<para><literallayout><computeroutput>glfwSetErrorCallback(error_callback);
</computeroutput></literallayout></para>
</section>
<section xml:id="_quick_guide_1quick_create_window">
<title>Creating a window and context</title>

<para>The window and its OpenGL context are created with a single call to <link linkend="_group__window_1ga680a02abe0e4494b6759d5703240713e">glfwCreateWindow</link>, which returns a handle to the created combined window and context object</para>

<para><literallayout><computeroutput>GLFWwindow*&#32;window&#32;=&#32;glfwCreateWindow(640,&#32;480,&#32;&quot;My&#32;Title&quot;,&#32;NULL,&#32;NULL);
if&#32;(!window)
{
&#32;&#32;&#32;&#32;//&#32;Window&#32;or&#32;OpenGL&#32;context&#32;creation&#32;failed
}
</computeroutput></literallayout></para>

<para>This creates a 640 by 480 windowed mode window with an OpenGL context. If window or OpenGL context creation fails, <computeroutput>NULL</computeroutput> will be returned. You should always check the return value. While window creation rarely fails, context creation depends on properly installed drivers and may fail even on machines with the necessary hardware.</para>

<para>By default, the OpenGL context GLFW creates may have any version. You can require a minimum OpenGL version by setting the <computeroutput>GLFW_CONTEXT_VERSION_MAJOR</computeroutput> and <computeroutput>GLFW_CONTEXT_VERSION_MINOR</computeroutput> hints <emphasis>before</emphasis> creation. If the required minimum version is not supported on the machine, context (and window) creation fails.</para>

<para>You can select the OpenGL profile by setting the <computeroutput>GLFW_OPENGL_PROFILE</computeroutput> hint. This program uses the core profile as that is the only profile macOS supports for OpenGL 3.x and 4.x.</para>

<para><literallayout><computeroutput>glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,&#32;3);
glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,&#32;3);
glfwWindowHint(GLFW_OPENGL_PROFILE,&#32;GLFW_OPENGL_CORE_PROFILE);
GLFWwindow*&#32;window&#32;=&#32;glfwCreateWindow(640,&#32;480,&#32;&quot;My&#32;Title&quot;,&#32;NULL,&#32;NULL);
if&#32;(!window)
{
&#32;&#32;&#32;&#32;//&#32;Window&#32;or&#32;context&#32;creation&#32;failed
}
</computeroutput></literallayout></para>

<para>The window handle is passed to all window related functions and is provided to along to all window related callbacks, so they can tell which window received the event.</para>

<para>When a window and context is no longer needed, destroy it.</para>

<para><literallayout><computeroutput>glfwDestroyWindow(window);
</computeroutput></literallayout></para>

<para>Once this function is called, no more events will be delivered for that window and its handle becomes invalid.</para>
</section>
<section xml:id="_quick_guide_1quick_context_current">
<title>Making the OpenGL context current</title>

<para>Before you can use the OpenGL API, you must have a current OpenGL context.</para>

<para><literallayout><computeroutput>glfwMakeContextCurrent(window);
</computeroutput></literallayout></para>

<para>The context will remain current until you make another context current or until the window owning the current context is destroyed.</para>

<para>If you are using an <link linkend="_context_guide_1context_glext_auto">extension loader library</link> to access modern OpenGL then this is when to initialize it, as the loader needs a current context to load from. This example uses <link xlink:href="https://github.com/Dav1dde/glad">glad</link>, but the same rule applies to all such libraries.</para>

<para><literallayout><computeroutput>gladLoadGL(glfwGetProcAddress);
</computeroutput></literallayout></para>
</section>
<section xml:id="_quick_guide_1quick_window_close">
<title>Checking the window close flag</title>

<para>Each window has a flag indicating whether the window should be closed.</para>

<para>When the user attempts to close the window, either by pressing the close widget in the title bar or using a key combination like Alt+F4, this flag is set to 1. Note that <emphasis role="bold">the window isn&apos;t actually closed</emphasis>, so you are expected to monitor this flag and either destroy the window or give some kind of feedback to the user.</para>

<para><literallayout><computeroutput>while&#32;(!glfwWindowShouldClose(window))
{
&#32;&#32;&#32;&#32;//&#32;Keep&#32;running
}
</computeroutput></literallayout></para>

<para>You can be notified when the user is attempting to close the window by setting a close callback with <link linkend="_group__window_1ga693d778815971a06e1a5a7bcdeff3d36">glfwSetWindowCloseCallback</link>. The callback will be called immediately after the close flag has been set.</para>

<para>You can also set it yourself with <link linkend="_group__window_1ga1cadeda7a1e2f224e06a8415d30741aa">glfwSetWindowShouldClose</link>. This can be useful if you want to interpret other kinds of input as closing the window, like for example pressing the <emphasis>Escape</emphasis> key.</para>
</section>
<section xml:id="_quick_guide_1quick_key_input">
<title>Receiving input events</title>

<para>Each window has a large number of callbacks that can be set to receive all the various kinds of events. To receive key press and release events, create a key callback function.</para>

<para><literallayout><computeroutput>static&#32;void&#32;key_callback(GLFWwindow*&#32;window,&#32;int&#32;key,&#32;int&#32;scancode,&#32;int&#32;action,&#32;int&#32;mods)
{
&#32;&#32;&#32;&#32;if&#32;(key&#32;==&#32;GLFW_KEY_ESCAPE&#32;&amp;&amp;&#32;action&#32;==&#32;GLFW_PRESS)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwSetWindowShouldClose(window,&#32;GLFW_TRUE);
}
</computeroutput></literallayout></para>

<para>The key callback, like other window related callbacks, are set per-window.</para>

<para><literallayout><computeroutput>glfwSetKeyCallback(window,&#32;key_callback);
</computeroutput></literallayout></para>

<para>In order for event callbacks to be called when events occur, you need to process events as described below.</para>
</section>
<section xml:id="_quick_guide_1quick_render">
<title>Rendering with OpenGL</title>

<para>Once you have a current OpenGL context, you can use OpenGL normally. In this tutorial, a multi-colored rotating triangle will be rendered. The framebuffer size needs to be retrieved for <computeroutput>glViewport</computeroutput>.</para>

<para><literallayout><computeroutput>int&#32;width,&#32;height;
glfwGetFramebufferSize(window,&#32;&amp;width,&#32;&amp;height);
glViewport(0,&#32;0,&#32;width,&#32;height);
</computeroutput></literallayout></para>

<para>You can also set a framebuffer size callback using <link linkend="_group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0">glfwSetFramebufferSizeCallback</link> and be notified when the size changes.</para>

<para>The details of how to render with OpenGL is outside the scope of this tutorial, but there are many excellent resources for learning modern OpenGL. Here are a few of them:</para>

<para><itemizedlist>
<listitem>
<para><link xlink:href="https://antongerdelan.net/opengl/">Anton&apos;s OpenGL 4 Tutorials</link></para>
</listitem><listitem>
<para><link xlink:href="https://learnopengl.com/">Learn OpenGL</link></para>
</listitem><listitem>
<para><link xlink:href="https://open.gl/">Open.GL</link></para>
</listitem></itemizedlist>
</para>

<para>These all happen to use GLFW, but OpenGL itself works the same whatever API you use to create the window and context.</para>
</section>
<section xml:id="_quick_guide_1quick_timer">
<title>Reading the timer</title>

<para>To create smooth animation, a time source is needed. GLFW provides a timer that returns the number of seconds since initialization. The time source used is the most accurate on each platform and generally has micro- or nanosecond resolution.</para>

<para><literallayout><computeroutput>double&#32;time&#32;=&#32;glfwGetTime();
</computeroutput></literallayout></para>
</section>
<section xml:id="_quick_guide_1quick_swap_buffers">
<title>Swapping buffers</title>

<para>GLFW windows by default use double buffering. That means that each window has two rendering buffers; a front buffer and a back buffer. The front buffer is the one being displayed and the back buffer the one you render to.</para>

<para>When the entire frame has been rendered, the buffers need to be swapped with one another, so the back buffer becomes the front buffer and vice versa.</para>

<para><literallayout><computeroutput>glfwSwapBuffers(window);
</computeroutput></literallayout></para>

<para>The swap interval indicates how many frames to wait until swapping the buffers, commonly known as <emphasis>vsync</emphasis>. By default, the swap interval is zero, meaning buffer swapping will occur immediately. On fast machines, many of those frames will never be seen, as the screen is still only updated typically 60-75 times per second, so this wastes a lot of CPU and GPU cycles.</para>

<para>Also, because the buffers will be swapped in the middle the screen update, leading to <link xlink:href="https://en.wikipedia.org/wiki/Screen_tearing">screen tearing</link>.</para>

<para>For these reasons, applications will typically want to set the swap interval to one. It can be set to higher values, but this is usually not recommended, because of the input latency it leads to.</para>

<para><literallayout><computeroutput>glfwSwapInterval(1);
</computeroutput></literallayout></para>

<para>This function acts on the current context and will fail unless a context is current.</para>
</section>
<section xml:id="_quick_guide_1quick_process_events">
<title>Processing events</title>

<para>GLFW needs to communicate regularly with the window system both in order to receive events and to show that the application hasn&apos;t locked up. Event processing must be done regularly while you have visible windows and is normally done each frame after buffer swapping.</para>

<para>There are two methods for processing pending events; polling and waiting. This example will use event polling, which processes only those events that have already been received and then returns immediately.</para>

<para><literallayout><computeroutput>glfwPollEvents();
</computeroutput></literallayout></para>

<para>This is the best choice when rendering continually, like most games do. If instead you only need to update your rendering once you have received new input, <link linkend="_group__window_1ga6e042d05823c11e11c7339b81a237738">glfwWaitEvents</link> is a better choice. It waits until at least one event has been received, putting the thread to sleep in the meantime, and then processes all received events. This saves a great deal of CPU cycles and is useful for, for example, many kinds of editing tools.</para>
</section>
</section>
<section xml:id="_quick_guide_1quick_example">
<title>Putting it together</title>

<para>Now that you know how to initialize GLFW, create a window and poll for keyboard input, it&apos;s possible to create a small program.</para>

<para>This program creates a 640 by 480 windowed mode window and starts a loop that clears the screen, renders a triangle and processes events until the user either presses <emphasis>Escape</emphasis> or closes the window.</para>

<para><literallayout><computeroutput></computeroutput></literallayout> The program above can be found in the <link xlink:href="https://www.glfw.org/download.html">source package</link> as <computeroutput>examples/triangle-opengl.c</computeroutput> and is compiled along with all other examples when you build GLFW. If you built GLFW from the source package then you already have this as <computeroutput>triangle-opengl.exe</computeroutput> on Windows, <computeroutput>triangle-opengl</computeroutput> on Linux or <computeroutput>triangle-opengl.app</computeroutput> on macOS.</para>

<para>This tutorial used only a few of the many functions GLFW provides. There are guides for each of the areas covered by GLFW. Each guide will introduce all the functions for that category.</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_intro_guide">Introduction to the API</link></para>
</listitem><listitem>
<para><link linkend="_window_guide">Window guide</link></para>
</listitem><listitem>
<para><link linkend="_context_guide">Context guide</link></para>
</listitem><listitem>
<para><link linkend="_monitor_guide">Monitor guide</link></para>
</listitem><listitem>
<para><link linkend="_input_guide">Input guide</link></para>
</listitem></itemizedlist>
</para>

<para>You can access reference documentation for any GLFW function by clicking it and the reference for each function links to related functions and guide sections.</para>

<para>The tutorial ends here. Once you have written a program that uses GLFW, you will need to compile and link it. How to do that depends on the development environment you are using and is best explained by the documentation for that environment. To learn about the details that are specific to GLFW, see <link linkend="_build_guide">Building applications</link>. </para>
</section>
</section>
